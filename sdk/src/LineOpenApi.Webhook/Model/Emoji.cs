/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// Emoji
    /// </summary>
    [DataContract(Name = "Emoji")]
    public partial class Emoji : IEquatable<Emoji>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Emoji" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Emoji() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Emoji" /> class.
        /// </summary>
        /// <param name="index">Index position for a character in text, with the first character being at position 0. (required).</param>
        /// <param name="length">The length of the LINE emoji string. For LINE emoji (hello), 7 is the length. (required).</param>
        /// <param name="productId">Product ID for a LINE emoji set. (required).</param>
        /// <param name="emojiId">ID for a LINE emoji inside a set. (required).</param>
        public Emoji(int index = default(int), int length = default(int), string productId = default(string), string emojiId = default(string))
        {
            this.Index = index;
            this.Length = length;
            // to ensure "productId" is required (not null)
            if (productId == null)
            {
                throw new ArgumentNullException("productId is a required property for Emoji and cannot be null");
            }
            this.ProductId = productId;
            // to ensure "emojiId" is required (not null)
            if (emojiId == null)
            {
                throw new ArgumentNullException("emojiId is a required property for Emoji and cannot be null");
            }
            this.EmojiId = emojiId;
        }

        /// <summary>
        /// Index position for a character in text, with the first character being at position 0.
        /// </summary>
        /// <value>Index position for a character in text, with the first character being at position 0.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// The length of the LINE emoji string. For LINE emoji (hello), 7 is the length.
        /// </summary>
        /// <value>The length of the LINE emoji string. For LINE emoji (hello), 7 is the length.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public int Length { get; set; }

        /// <summary>
        /// Product ID for a LINE emoji set.
        /// </summary>
        /// <value>Product ID for a LINE emoji set.</value>
        [DataMember(Name = "productId", IsRequired = true, EmitDefaultValue = true)]
        public string ProductId { get; set; }

        /// <summary>
        /// ID for a LINE emoji inside a set.
        /// </summary>
        /// <value>ID for a LINE emoji inside a set.</value>
        [DataMember(Name = "emojiId", IsRequired = true, EmitDefaultValue = true)]
        public string EmojiId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Emoji {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  EmojiId: ").Append(EmojiId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Emoji);
        }

        /// <summary>
        /// Returns true if Emoji instances are equal
        /// </summary>
        /// <param name="input">Instance of Emoji to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Emoji input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                ) && 
                (
                    this.ProductId == input.ProductId ||
                    (this.ProductId != null &&
                    this.ProductId.Equals(input.ProductId))
                ) && 
                (
                    this.EmojiId == input.EmojiId ||
                    (this.EmojiId != null &&
                    this.EmojiId.Equals(input.EmojiId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                if (this.ProductId != null)
                {
                    hashCode = (hashCode * 59) + this.ProductId.GetHashCode();
                }
                if (this.EmojiId != null)
                {
                    hashCode = (hashCode * 59) + this.EmojiId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
