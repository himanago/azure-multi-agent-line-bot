/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// The request body contains a JSON object with the user ID of a bot that should receive webhook events and an array of webhook event objects. 
    /// </summary>
    [DataContract(Name = "CallbackRequest")]
    public partial class CallbackRequest : IEquatable<CallbackRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallbackRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackRequest" /> class.
        /// </summary>
        /// <param name="destination">User ID of a bot that should receive webhook events. The user ID value is a string that matches the regular expression, &#x60;U[0-9a-f]{32}&#x60;.  (required).</param>
        /// <param name="events">Array of webhook event objects. The LINE Platform may send an empty array that doesn&#39;t include a webhook event object to confirm communication.  (required).</param>
        public CallbackRequest(string destination = default(string), List<Event> events = default(List<Event>))
        {
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for CallbackRequest and cannot be null");
            }
            this.Destination = destination;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for CallbackRequest and cannot be null");
            }
            this.Events = events;
        }

        /// <summary>
        /// User ID of a bot that should receive webhook events. The user ID value is a string that matches the regular expression, &#x60;U[0-9a-f]{32}&#x60;. 
        /// </summary>
        /// <value>User ID of a bot that should receive webhook events. The user ID value is a string that matches the regular expression, &#x60;U[0-9a-f]{32}&#x60;. </value>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public string Destination { get; set; }

        /// <summary>
        /// Array of webhook event objects. The LINE Platform may send an empty array that doesn&#39;t include a webhook event object to confirm communication. 
        /// </summary>
        /// <value>Array of webhook event objects. The LINE Platform may send an empty array that doesn&#39;t include a webhook event object to confirm communication. </value>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public List<Event> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CallbackRequest {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallbackRequest);
        }

        /// <summary>
        /// Returns true if CallbackRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CallbackRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Destination (string) maxLength
            if (this.Destination != null && this.Destination.Length > 33)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Destination, length must be less than 33.", new [] { "Destination" });
            }

            // Destination (string) minLength
            if (this.Destination != null && this.Destination.Length < 33)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Destination, length must be greater than 33.", new [] { "Destination" });
            }

            if (this.Destination != null) {
                // Destination (string) pattern
                Regex regexDestination = new Regex(@"^U[0-9a-f]{32}$", RegexOptions.CultureInvariant);
                if (!regexDestination.Match(this.Destination).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Destination, must match a pattern of " + regexDestination, new [] { "Destination" });
                }
            }

            yield break;
        }
    }

}
