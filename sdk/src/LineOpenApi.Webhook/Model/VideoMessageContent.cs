/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// VideoMessageContent
    /// </summary>
    [DataContract(Name = "VideoMessageContent")]
    public partial class VideoMessageContent : MessageContent, IEquatable<VideoMessageContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMessageContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VideoMessageContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VideoMessageContent" /> class.
        /// </summary>
        /// <param name="duration">Length of video file (milliseconds).</param>
        /// <param name="contentProvider">contentProvider (required).</param>
        /// <param name="quoteToken">Quote token to quote this message.  (required).</param>
        /// <param name="type">Type (required) (default to &quot;VideoMessageContent&quot;).</param>
        /// <param name="id">Message ID (required).</param>
        public VideoMessageContent(long duration = default(long), ContentProvider contentProvider = default(ContentProvider), string quoteToken = default(string), string type = @"VideoMessageContent", string id = default(string)) : base(type, id)
        {
            // to ensure "contentProvider" is required (not null)
            if (contentProvider == null)
            {
                throw new ArgumentNullException("contentProvider is a required property for VideoMessageContent and cannot be null");
            }
            this.ContentProvider = contentProvider;
            // to ensure "quoteToken" is required (not null)
            if (quoteToken == null)
            {
                throw new ArgumentNullException("quoteToken is a required property for VideoMessageContent and cannot be null");
            }
            this.QuoteToken = quoteToken;
            this.Duration = duration;
        }

        /// <summary>
        /// Length of video file (milliseconds)
        /// </summary>
        /// <value>Length of video file (milliseconds)</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public long Duration { get; set; }

        /// <summary>
        /// Gets or Sets ContentProvider
        /// </summary>
        [DataMember(Name = "contentProvider", IsRequired = true, EmitDefaultValue = true)]
        public ContentProvider ContentProvider { get; set; }

        /// <summary>
        /// Quote token to quote this message. 
        /// </summary>
        /// <value>Quote token to quote this message. </value>
        [DataMember(Name = "quoteToken", IsRequired = true, EmitDefaultValue = true)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VideoMessageContent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  ContentProvider: ").Append(ContentProvider).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VideoMessageContent);
        }

        /// <summary>
        /// Returns true if VideoMessageContent instances are equal
        /// </summary>
        /// <param name="input">Instance of VideoMessageContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VideoMessageContent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && base.Equals(input) && 
                (
                    this.ContentProvider == input.ContentProvider ||
                    (this.ContentProvider != null &&
                    this.ContentProvider.Equals(input.ContentProvider))
                ) && base.Equals(input) && 
                (
                    this.QuoteToken == input.QuoteToken ||
                    (this.QuoteToken != null &&
                    this.QuoteToken.Equals(input.QuoteToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                if (this.ContentProvider != null)
                {
                    hashCode = (hashCode * 59) + this.ContentProvider.GetHashCode();
                }
                if (this.QuoteToken != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
