/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// FileMessageContent
    /// </summary>
    [DataContract(Name = "FileMessageContent")]
    public partial class FileMessageContent : MessageContent, IEquatable<FileMessageContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMessageContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FileMessageContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FileMessageContent" /> class.
        /// </summary>
        /// <param name="fileName">File name (required).</param>
        /// <param name="fileSize">File size in bytes (required).</param>
        /// <param name="type">Type (required) (default to &quot;FileMessageContent&quot;).</param>
        /// <param name="id">Message ID (required).</param>
        public FileMessageContent(string fileName = default(string), int fileSize = default(int), string type = @"FileMessageContent", string id = default(string)) : base(type, id)
        {
            // to ensure "fileName" is required (not null)
            if (fileName == null)
            {
                throw new ArgumentNullException("fileName is a required property for FileMessageContent and cannot be null");
            }
            this.FileName = fileName;
            this.FileSize = fileSize;
        }

        /// <summary>
        /// File name
        /// </summary>
        /// <value>File name</value>
        [DataMember(Name = "fileName", IsRequired = true, EmitDefaultValue = true)]
        public string FileName { get; set; }

        /// <summary>
        /// File size in bytes
        /// </summary>
        /// <value>File size in bytes</value>
        [DataMember(Name = "fileSize", IsRequired = true, EmitDefaultValue = true)]
        public int FileSize { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileMessageContent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  FileSize: ").Append(FileSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FileMessageContent);
        }

        /// <summary>
        /// Returns true if FileMessageContent instances are equal
        /// </summary>
        /// <param name="input">Instance of FileMessageContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FileMessageContent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && base.Equals(input) && 
                (
                    this.FileSize == input.FileSize ||
                    this.FileSize.Equals(input.FileSize)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.FileName != null)
                {
                    hashCode = (hashCode * 59) + this.FileName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FileSize.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
