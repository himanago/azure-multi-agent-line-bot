/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// StickerMessageContent
    /// </summary>
    [DataContract(Name = "StickerMessageContent")]
    public partial class StickerMessageContent : MessageContent, IEquatable<StickerMessageContent>, IValidatableObject
    {
        /// <summary>
        /// Defines StickerResourceType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StickerResourceTypeEnum
        {
            /// <summary>
            /// Enum STATIC for value: STATIC
            /// </summary>
            [EnumMember(Value = "STATIC")]
            STATIC = 1,

            /// <summary>
            /// Enum ANIMATION for value: ANIMATION
            /// </summary>
            [EnumMember(Value = "ANIMATION")]
            ANIMATION = 2,

            /// <summary>
            /// Enum SOUND for value: SOUND
            /// </summary>
            [EnumMember(Value = "SOUND")]
            SOUND = 3,

            /// <summary>
            /// Enum ANIMATIONSOUND for value: ANIMATION_SOUND
            /// </summary>
            [EnumMember(Value = "ANIMATION_SOUND")]
            ANIMATIONSOUND = 4,

            /// <summary>
            /// Enum POPUP for value: POPUP
            /// </summary>
            [EnumMember(Value = "POPUP")]
            POPUP = 5,

            /// <summary>
            /// Enum POPUPSOUND for value: POPUP_SOUND
            /// </summary>
            [EnumMember(Value = "POPUP_SOUND")]
            POPUPSOUND = 6,

            /// <summary>
            /// Enum CUSTOM for value: CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOM = 7,

            /// <summary>
            /// Enum MESSAGE for value: MESSAGE
            /// </summary>
            [EnumMember(Value = "MESSAGE")]
            MESSAGE = 8,

            /// <summary>
            /// Enum NAMETEXT for value: NAME_TEXT
            /// </summary>
            [EnumMember(Value = "NAME_TEXT")]
            NAMETEXT = 9,

            /// <summary>
            /// Enum PERSTICKERTEXT for value: PER_STICKER_TEXT
            /// </summary>
            [EnumMember(Value = "PER_STICKER_TEXT")]
            PERSTICKERTEXT = 10
        }


        /// <summary>
        /// Gets or Sets StickerResourceType
        /// </summary>
        [DataMember(Name = "stickerResourceType", IsRequired = true, EmitDefaultValue = true)]
        public StickerResourceTypeEnum StickerResourceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="StickerMessageContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StickerMessageContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StickerMessageContent" /> class.
        /// </summary>
        /// <param name="packageId">Package ID (required).</param>
        /// <param name="stickerId">Sticker ID (required).</param>
        /// <param name="stickerResourceType">stickerResourceType (required).</param>
        /// <param name="keywords">Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker. .</param>
        /// <param name="text">Any text entered by the user. This property is only included for message stickers. Max character limit: 100 .</param>
        /// <param name="quoteToken">Quote token to quote this message.  (required).</param>
        /// <param name="quotedMessageId">Message ID of a quoted message. Only included when the received message quotes a past message.  .</param>
        /// <param name="type">Type (required) (default to &quot;StickerMessageContent&quot;).</param>
        /// <param name="id">Message ID (required).</param>
        public StickerMessageContent(string packageId = default(string), string stickerId = default(string), StickerResourceTypeEnum stickerResourceType = default(StickerResourceTypeEnum), List<string> keywords = default(List<string>), string text = default(string), string quoteToken = default(string), string quotedMessageId = default(string), string type = @"StickerMessageContent", string id = default(string)) : base(type, id)
        {
            // to ensure "packageId" is required (not null)
            if (packageId == null)
            {
                throw new ArgumentNullException("packageId is a required property for StickerMessageContent and cannot be null");
            }
            this.PackageId = packageId;
            // to ensure "stickerId" is required (not null)
            if (stickerId == null)
            {
                throw new ArgumentNullException("stickerId is a required property for StickerMessageContent and cannot be null");
            }
            this.StickerId = stickerId;
            this.StickerResourceType = stickerResourceType;
            // to ensure "quoteToken" is required (not null)
            if (quoteToken == null)
            {
                throw new ArgumentNullException("quoteToken is a required property for StickerMessageContent and cannot be null");
            }
            this.QuoteToken = quoteToken;
            this.Keywords = keywords;
            this.Text = text;
            this.QuotedMessageId = quotedMessageId;
        }

        /// <summary>
        /// Package ID
        /// </summary>
        /// <value>Package ID</value>
        [DataMember(Name = "packageId", IsRequired = true, EmitDefaultValue = true)]
        public string PackageId { get; set; }

        /// <summary>
        /// Sticker ID
        /// </summary>
        /// <value>Sticker ID</value>
        [DataMember(Name = "stickerId", IsRequired = true, EmitDefaultValue = true)]
        public string StickerId { get; set; }

        /// <summary>
        /// Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker. 
        /// </summary>
        /// <value>Array of up to 15 keywords describing the sticker. If a sticker has 16 or more keywords, a random selection of 15 keywords will be returned. The keyword selection is random for each event, so different keywords may be returned for the same sticker. </value>
        [DataMember(Name = "keywords", EmitDefaultValue = false)]
        public List<string> Keywords { get; set; }

        /// <summary>
        /// Any text entered by the user. This property is only included for message stickers. Max character limit: 100 
        /// </summary>
        /// <value>Any text entered by the user. This property is only included for message stickers. Max character limit: 100 </value>
        [DataMember(Name = "text", EmitDefaultValue = false)]
        public string Text { get; set; }

        /// <summary>
        /// Quote token to quote this message. 
        /// </summary>
        /// <value>Quote token to quote this message. </value>
        [DataMember(Name = "quoteToken", IsRequired = true, EmitDefaultValue = true)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Message ID of a quoted message. Only included when the received message quotes a past message.  
        /// </summary>
        /// <value>Message ID of a quoted message. Only included when the received message quotes a past message.  </value>
        [DataMember(Name = "quotedMessageId", EmitDefaultValue = false)]
        public string QuotedMessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StickerMessageContent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  StickerId: ").Append(StickerId).Append("\n");
            sb.Append("  StickerResourceType: ").Append(StickerResourceType).Append("\n");
            sb.Append("  Keywords: ").Append(Keywords).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("  QuotedMessageId: ").Append(QuotedMessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StickerMessageContent);
        }

        /// <summary>
        /// Returns true if StickerMessageContent instances are equal
        /// </summary>
        /// <param name="input">Instance of StickerMessageContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StickerMessageContent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.PackageId == input.PackageId ||
                    (this.PackageId != null &&
                    this.PackageId.Equals(input.PackageId))
                ) && base.Equals(input) && 
                (
                    this.StickerId == input.StickerId ||
                    (this.StickerId != null &&
                    this.StickerId.Equals(input.StickerId))
                ) && base.Equals(input) && 
                (
                    this.StickerResourceType == input.StickerResourceType ||
                    this.StickerResourceType.Equals(input.StickerResourceType)
                ) && base.Equals(input) && 
                (
                    this.Keywords == input.Keywords ||
                    this.Keywords != null &&
                    input.Keywords != null &&
                    this.Keywords.SequenceEqual(input.Keywords)
                ) && base.Equals(input) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && base.Equals(input) && 
                (
                    this.QuoteToken == input.QuoteToken ||
                    (this.QuoteToken != null &&
                    this.QuoteToken.Equals(input.QuoteToken))
                ) && base.Equals(input) && 
                (
                    this.QuotedMessageId == input.QuotedMessageId ||
                    (this.QuotedMessageId != null &&
                    this.QuotedMessageId.Equals(input.QuotedMessageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.PackageId != null)
                {
                    hashCode = (hashCode * 59) + this.PackageId.GetHashCode();
                }
                if (this.StickerId != null)
                {
                    hashCode = (hashCode * 59) + this.StickerId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StickerResourceType.GetHashCode();
                if (this.Keywords != null)
                {
                    hashCode = (hashCode * 59) + this.Keywords.GetHashCode();
                }
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.QuoteToken != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteToken.GetHashCode();
                }
                if (this.QuotedMessageId != null)
                {
                    hashCode = (hashCode * 59) + this.QuotedMessageId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Text (string) maxLength
            if (this.Text != null && this.Text.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Text, length must be less than 100.", new [] { "Text" });
            }

            yield break;
        }
    }

}
