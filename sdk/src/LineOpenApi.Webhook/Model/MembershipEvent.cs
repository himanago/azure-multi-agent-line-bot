/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// This event indicates that a user has subscribed (joined), unsubscribed (left), or renewed the bot&#39;s membership.
    /// </summary>
    [DataContract(Name = "MembershipEvent")]
    public partial class MembershipEvent : Event, IEquatable<MembershipEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MembershipEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MembershipEvent" /> class.
        /// </summary>
        /// <param name="replyToken">Reply token used to send reply message to this event (required).</param>
        /// <param name="membership">membership (required).</param>
        /// <param name="type">Type of the event (required) (default to &quot;MembershipEvent&quot;).</param>
        /// <param name="source">source.</param>
        /// <param name="timestamp">Time of the event in milliseconds. (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="webhookEventId">Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format. (required).</param>
        /// <param name="deliveryContext">deliveryContext (required).</param>
        public MembershipEvent(string replyToken = default(string), MembershipContent membership = default(MembershipContent), string type = @"MembershipEvent", Source source = default(Source), long timestamp = default(long), EventMode mode = default(EventMode), string webhookEventId = default(string), DeliveryContext deliveryContext = default(DeliveryContext)) : base(type, source, timestamp, mode, webhookEventId, deliveryContext)
        {
            // to ensure "replyToken" is required (not null)
            if (replyToken == null)
            {
                throw new ArgumentNullException("replyToken is a required property for MembershipEvent and cannot be null");
            }
            this.ReplyToken = replyToken;
            // to ensure "membership" is required (not null)
            if (membership == null)
            {
                throw new ArgumentNullException("membership is a required property for MembershipEvent and cannot be null");
            }
            this.Membership = membership;
        }

        /// <summary>
        /// Reply token used to send reply message to this event
        /// </summary>
        /// <value>Reply token used to send reply message to this event</value>
        [DataMember(Name = "replyToken", IsRequired = true, EmitDefaultValue = true)]
        public string ReplyToken { get; set; }

        /// <summary>
        /// Gets or Sets Membership
        /// </summary>
        [DataMember(Name = "membership", IsRequired = true, EmitDefaultValue = true)]
        public MembershipContent Membership { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MembershipEvent {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  ReplyToken: ").Append(ReplyToken).Append("\n");
            sb.Append("  Membership: ").Append(Membership).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MembershipEvent);
        }

        /// <summary>
        /// Returns true if MembershipEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of MembershipEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MembershipEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.ReplyToken == input.ReplyToken ||
                    (this.ReplyToken != null &&
                    this.ReplyToken.Equals(input.ReplyToken))
                ) && base.Equals(input) && 
                (
                    this.Membership == input.Membership ||
                    (this.Membership != null &&
                    this.Membership.Equals(input.Membership))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.ReplyToken != null)
                {
                    hashCode = (hashCode * 59) + this.ReplyToken.GetHashCode();
                }
                if (this.Membership != null)
                {
                    hashCode = (hashCode * 59) + this.Membership.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
