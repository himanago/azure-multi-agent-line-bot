/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// Webhook event
    /// </summary>
    [DataContract(Name = "Event")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(AccountLinkEvent), "accountLink")]
    [JsonSubtypes.KnownSubType(typeof(ActivatedEvent), "activated")]
    [JsonSubtypes.KnownSubType(typeof(BeaconEvent), "beacon")]
    [JsonSubtypes.KnownSubType(typeof(BotResumedEvent), "botResumed")]
    [JsonSubtypes.KnownSubType(typeof(BotSuspendedEvent), "botSuspended")]
    [JsonSubtypes.KnownSubType(typeof(DeactivatedEvent), "deactivated")]
    [JsonSubtypes.KnownSubType(typeof(PnpDeliveryCompletionEvent), "delivery")]
    [JsonSubtypes.KnownSubType(typeof(FollowEvent), "follow")]
    [JsonSubtypes.KnownSubType(typeof(JoinEvent), "join")]
    [JsonSubtypes.KnownSubType(typeof(LeaveEvent), "leave")]
    [JsonSubtypes.KnownSubType(typeof(MemberJoinedEvent), "memberJoined")]
    [JsonSubtypes.KnownSubType(typeof(MemberLeftEvent), "memberLeft")]
    [JsonSubtypes.KnownSubType(typeof(MembershipEvent), "membership")]
    [JsonSubtypes.KnownSubType(typeof(MessageEvent), "message")]
    [JsonSubtypes.KnownSubType(typeof(ModuleEvent), "module")]
    [JsonSubtypes.KnownSubType(typeof(PostbackEvent), "postback")]
    [JsonSubtypes.KnownSubType(typeof(ThingsEvent), "things")]
    [JsonSubtypes.KnownSubType(typeof(UnfollowEvent), "unfollow")]
    [JsonSubtypes.KnownSubType(typeof(UnsendEvent), "unsend")]
    [JsonSubtypes.KnownSubType(typeof(VideoPlayCompleteEvent), "videoPlayComplete")]
    public partial class Event : IEquatable<Event>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name = "mode", IsRequired = true, EmitDefaultValue = true)]
        public EventMode Mode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Event() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Event" /> class.
        /// </summary>
        /// <param name="type">Type of the event (required).</param>
        /// <param name="source">source.</param>
        /// <param name="timestamp">Time of the event in milliseconds. (required).</param>
        /// <param name="mode">mode (required).</param>
        /// <param name="webhookEventId">Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format. (required).</param>
        /// <param name="deliveryContext">deliveryContext (required).</param>
        public Event(string type = default(string), Source source = default(Source), long timestamp = default(long), EventMode mode = default(EventMode), string webhookEventId = default(string), DeliveryContext deliveryContext = default(DeliveryContext))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Event and cannot be null");
            }
            this.Type = type;
            this.Timestamp = timestamp;
            this.Mode = mode;
            // to ensure "webhookEventId" is required (not null)
            if (webhookEventId == null)
            {
                throw new ArgumentNullException("webhookEventId is a required property for Event and cannot be null");
            }
            this.WebhookEventId = webhookEventId;
            // to ensure "deliveryContext" is required (not null)
            if (deliveryContext == null)
            {
                throw new ArgumentNullException("deliveryContext is a required property for Event and cannot be null");
            }
            this.DeliveryContext = deliveryContext;
            this.Source = source;
        }

        /// <summary>
        /// Type of the event
        /// </summary>
        /// <value>Type of the event</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public Source Source { get; set; }

        /// <summary>
        /// Time of the event in milliseconds.
        /// </summary>
        /// <value>Time of the event in milliseconds.</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public long Timestamp { get; set; }

        /// <summary>
        /// Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format.
        /// </summary>
        /// <value>Webhook Event ID. An ID that uniquely identifies a webhook event. This is a string in ULID format.</value>
        [DataMember(Name = "webhookEventId", IsRequired = true, EmitDefaultValue = true)]
        public string WebhookEventId { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryContext
        /// </summary>
        [DataMember(Name = "deliveryContext", IsRequired = true, EmitDefaultValue = true)]
        public DeliveryContext DeliveryContext { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Event {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  WebhookEventId: ").Append(WebhookEventId).Append("\n");
            sb.Append("  DeliveryContext: ").Append(DeliveryContext).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Event);
        }

        /// <summary>
        /// Returns true if Event instances are equal
        /// </summary>
        /// <param name="input">Instance of Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Event input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    this.Timestamp.Equals(input.Timestamp)
                ) && 
                (
                    this.Mode == input.Mode ||
                    this.Mode.Equals(input.Mode)
                ) && 
                (
                    this.WebhookEventId == input.WebhookEventId ||
                    (this.WebhookEventId != null &&
                    this.WebhookEventId.Equals(input.WebhookEventId))
                ) && 
                (
                    this.DeliveryContext == input.DeliveryContext ||
                    (this.DeliveryContext != null &&
                    this.DeliveryContext.Equals(input.DeliveryContext))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                hashCode = (hashCode * 59) + this.Mode.GetHashCode();
                if (this.WebhookEventId != null)
                {
                    hashCode = (hashCode * 59) + this.WebhookEventId.GetHashCode();
                }
                if (this.DeliveryContext != null)
                {
                    hashCode = (hashCode * 59) + this.DeliveryContext.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
