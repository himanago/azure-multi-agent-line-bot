/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// Content of the account link event.
    /// </summary>
    [DataContract(Name = "LinkContent")]
    public partial class LinkContent : IEquatable<LinkContent>, IValidatableObject
    {
        /// <summary>
        /// One of the following values to indicate whether linking the account was successful or not
        /// </summary>
        /// <value>One of the following values to indicate whether linking the account was successful or not</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Ok for value: ok
            /// </summary>
            [EnumMember(Value = "ok")]
            Ok = 1,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 2
        }


        /// <summary>
        /// One of the following values to indicate whether linking the account was successful or not
        /// </summary>
        /// <value>One of the following values to indicate whether linking the account was successful or not</value>
        [DataMember(Name = "result", IsRequired = true, EmitDefaultValue = true)]
        public ResultEnum Result { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LinkContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="LinkContent" /> class.
        /// </summary>
        /// <param name="result">One of the following values to indicate whether linking the account was successful or not (required).</param>
        /// <param name="nonce">Specified nonce (number used once) when verifying the user ID. (required).</param>
        public LinkContent(ResultEnum result = default(ResultEnum), string nonce = default(string))
        {
            this.Result = result;
            // to ensure "nonce" is required (not null)
            if (nonce == null)
            {
                throw new ArgumentNullException("nonce is a required property for LinkContent and cannot be null");
            }
            this.Nonce = nonce;
        }

        /// <summary>
        /// Specified nonce (number used once) when verifying the user ID.
        /// </summary>
        /// <value>Specified nonce (number used once) when verifying the user ID.</value>
        [DataMember(Name = "nonce", IsRequired = true, EmitDefaultValue = true)]
        public string Nonce { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LinkContent {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LinkContent);
        }

        /// <summary>
        /// Returns true if LinkContent instances are equal
        /// </summary>
        /// <param name="input">Instance of LinkContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LinkContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Result == input.Result ||
                    this.Result.Equals(input.Result)
                ) && 
                (
                    this.Nonce == input.Nonce ||
                    (this.Nonce != null &&
                    this.Nonce.Equals(input.Nonce))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Result.GetHashCode();
                if (this.Nonce != null)
                {
                    hashCode = (hashCode * 59) + this.Nonce.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
