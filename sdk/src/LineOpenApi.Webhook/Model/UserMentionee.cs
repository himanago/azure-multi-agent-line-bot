/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// Mentioned target is user
    /// </summary>
    [DataContract(Name = "UserMentionee")]
    public partial class UserMentionee : Mentionee, IEquatable<UserMentionee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMentionee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UserMentionee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserMentionee" /> class.
        /// </summary>
        /// <param name="userId">User ID of the mentioned user. Only included if mention.mentions[].type is user and the user consents to the LINE Official Account obtaining their user profile information..</param>
        /// <param name="isSelf">Whether the mentioned user is the bot that receives the webhook..</param>
        /// <param name="type">Mentioned target. (required) (default to &quot;UserMentionee&quot;).</param>
        /// <param name="index">Index position of the user mention for a character in text, with the first character being at position 0. (required).</param>
        /// <param name="length">The length of the text of the mentioned user. For a mention @example, 8 is the length. (required).</param>
        public UserMentionee(string userId = default(string), bool isSelf = default(bool), string type = @"UserMentionee", int index = default(int), int length = default(int)) : base(type, index, length)
        {
            this.UserId = userId;
            this.IsSelf = isSelf;
        }

        /// <summary>
        /// User ID of the mentioned user. Only included if mention.mentions[].type is user and the user consents to the LINE Official Account obtaining their user profile information.
        /// </summary>
        /// <value>User ID of the mentioned user. Only included if mention.mentions[].type is user and the user consents to the LINE Official Account obtaining their user profile information.</value>
        [DataMember(Name = "userId", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Whether the mentioned user is the bot that receives the webhook.
        /// </summary>
        /// <value>Whether the mentioned user is the bot that receives the webhook.</value>
        [DataMember(Name = "isSelf", EmitDefaultValue = true)]
        public bool IsSelf { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UserMentionee {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  IsSelf: ").Append(IsSelf).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserMentionee);
        }

        /// <summary>
        /// Returns true if UserMentionee instances are equal
        /// </summary>
        /// <param name="input">Instance of UserMentionee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserMentionee input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && base.Equals(input) && 
                (
                    this.IsSelf == input.IsSelf ||
                    this.IsSelf.Equals(input.IsSelf)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.UserId != null)
                {
                    hashCode = (hashCode * 59) + this.UserId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSelf.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
