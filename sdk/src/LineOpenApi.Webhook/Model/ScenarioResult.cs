/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// ScenarioResult
    /// </summary>
    [DataContract(Name = "ScenarioResult")]
    public partial class ScenarioResult : IEquatable<ScenarioResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScenarioResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScenarioResult" /> class.
        /// </summary>
        /// <param name="scenarioId">Scenario ID executed.</param>
        /// <param name="revision">Revision number of the scenario set containing the executed scenario.</param>
        /// <param name="startTime">Timestamp for when execution of scenario action started (milliseconds, LINE app time) (required).</param>
        /// <param name="endTime">Timestamp for when execution of scenario was completed (milliseconds, LINE app time) (required).</param>
        /// <param name="resultCode">Scenario execution completion status (required).</param>
        /// <param name="actionResults">Execution result of individual operations specified in action. Only included when things.result.resultCode is success..</param>
        /// <param name="bleNotificationPayload">Data contained in notification..</param>
        /// <param name="errorReason">Error reason..</param>
        public ScenarioResult(string scenarioId = default(string), int revision = default(int), long startTime = default(long), long endTime = default(long), string resultCode = default(string), List<ActionResult> actionResults = default(List<ActionResult>), string bleNotificationPayload = default(string), string errorReason = default(string))
        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            // to ensure "resultCode" is required (not null)
            if (resultCode == null)
            {
                throw new ArgumentNullException("resultCode is a required property for ScenarioResult and cannot be null");
            }
            this.ResultCode = resultCode;
            this.ScenarioId = scenarioId;
            this.Revision = revision;
            this.ActionResults = actionResults;
            this.BleNotificationPayload = bleNotificationPayload;
            this.ErrorReason = errorReason;
        }

        /// <summary>
        /// Scenario ID executed
        /// </summary>
        /// <value>Scenario ID executed</value>
        [DataMember(Name = "scenarioId", EmitDefaultValue = false)]
        public string ScenarioId { get; set; }

        /// <summary>
        /// Revision number of the scenario set containing the executed scenario
        /// </summary>
        /// <value>Revision number of the scenario set containing the executed scenario</value>
        [DataMember(Name = "revision", EmitDefaultValue = false)]
        public int Revision { get; set; }

        /// <summary>
        /// Timestamp for when execution of scenario action started (milliseconds, LINE app time)
        /// </summary>
        /// <value>Timestamp for when execution of scenario action started (milliseconds, LINE app time)</value>
        [DataMember(Name = "startTime", IsRequired = true, EmitDefaultValue = true)]
        public long StartTime { get; set; }

        /// <summary>
        /// Timestamp for when execution of scenario was completed (milliseconds, LINE app time)
        /// </summary>
        /// <value>Timestamp for when execution of scenario was completed (milliseconds, LINE app time)</value>
        [DataMember(Name = "endTime", IsRequired = true, EmitDefaultValue = true)]
        public long EndTime { get; set; }

        /// <summary>
        /// Scenario execution completion status
        /// </summary>
        /// <value>Scenario execution completion status</value>
        [DataMember(Name = "resultCode", IsRequired = true, EmitDefaultValue = true)]
        public string ResultCode { get; set; }

        /// <summary>
        /// Execution result of individual operations specified in action. Only included when things.result.resultCode is success.
        /// </summary>
        /// <value>Execution result of individual operations specified in action. Only included when things.result.resultCode is success.</value>
        [DataMember(Name = "actionResults", EmitDefaultValue = false)]
        public List<ActionResult> ActionResults { get; set; }

        /// <summary>
        /// Data contained in notification.
        /// </summary>
        /// <value>Data contained in notification.</value>
        [DataMember(Name = "bleNotificationPayload", EmitDefaultValue = false)]
        public string BleNotificationPayload { get; set; }

        /// <summary>
        /// Error reason.
        /// </summary>
        /// <value>Error reason.</value>
        [DataMember(Name = "errorReason", EmitDefaultValue = false)]
        public string ErrorReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScenarioResult {\n");
            sb.Append("  ScenarioId: ").Append(ScenarioId).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  ResultCode: ").Append(ResultCode).Append("\n");
            sb.Append("  ActionResults: ").Append(ActionResults).Append("\n");
            sb.Append("  BleNotificationPayload: ").Append(BleNotificationPayload).Append("\n");
            sb.Append("  ErrorReason: ").Append(ErrorReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScenarioResult);
        }

        /// <summary>
        /// Returns true if ScenarioResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ScenarioResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScenarioResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ScenarioId == input.ScenarioId ||
                    (this.ScenarioId != null &&
                    this.ScenarioId.Equals(input.ScenarioId))
                ) && 
                (
                    this.Revision == input.Revision ||
                    this.Revision.Equals(input.Revision)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    this.StartTime.Equals(input.StartTime)
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    this.EndTime.Equals(input.EndTime)
                ) && 
                (
                    this.ResultCode == input.ResultCode ||
                    (this.ResultCode != null &&
                    this.ResultCode.Equals(input.ResultCode))
                ) && 
                (
                    this.ActionResults == input.ActionResults ||
                    this.ActionResults != null &&
                    input.ActionResults != null &&
                    this.ActionResults.SequenceEqual(input.ActionResults)
                ) && 
                (
                    this.BleNotificationPayload == input.BleNotificationPayload ||
                    (this.BleNotificationPayload != null &&
                    this.BleNotificationPayload.Equals(input.BleNotificationPayload))
                ) && 
                (
                    this.ErrorReason == input.ErrorReason ||
                    (this.ErrorReason != null &&
                    this.ErrorReason.Equals(input.ErrorReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ScenarioId != null)
                {
                    hashCode = (hashCode * 59) + this.ScenarioId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Revision.GetHashCode();
                hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                if (this.ResultCode != null)
                {
                    hashCode = (hashCode * 59) + this.ResultCode.GetHashCode();
                }
                if (this.ActionResults != null)
                {
                    hashCode = (hashCode * 59) + this.ActionResults.GetHashCode();
                }
                if (this.BleNotificationPayload != null)
                {
                    hashCode = (hashCode * 59) + this.BleNotificationPayload.GetHashCode();
                }
                if (this.ErrorReason != null)
                {
                    hashCode = (hashCode * 59) + this.ErrorReason.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
