/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// BeaconContent
    /// </summary>
    [DataContract(Name = "BeaconContent")]
    public partial class BeaconContent : IEquatable<BeaconContent>, IValidatableObject
    {
        /// <summary>
        /// Type of beacon event.
        /// </summary>
        /// <value>Type of beacon event.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Enter for value: enter
            /// </summary>
            [EnumMember(Value = "enter")]
            Enter = 1,

            /// <summary>
            /// Enum Banner for value: banner
            /// </summary>
            [EnumMember(Value = "banner")]
            Banner = 2,

            /// <summary>
            /// Enum Stay for value: stay
            /// </summary>
            [EnumMember(Value = "stay")]
            Stay = 3
        }


        /// <summary>
        /// Type of beacon event.
        /// </summary>
        /// <value>Type of beacon event.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public TypeEnum Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeaconContent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BeaconContent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BeaconContent" /> class.
        /// </summary>
        /// <param name="hwid">Hardware ID of the beacon that was detected (required).</param>
        /// <param name="type">Type of beacon event. (required).</param>
        /// <param name="dm">Device message of beacon that was detected..</param>
        public BeaconContent(string hwid = default(string), TypeEnum type = default(TypeEnum), string dm = default(string))
        {
            // to ensure "hwid" is required (not null)
            if (hwid == null)
            {
                throw new ArgumentNullException("hwid is a required property for BeaconContent and cannot be null");
            }
            this.Hwid = hwid;
            this.Type = type;
            this.Dm = dm;
        }

        /// <summary>
        /// Hardware ID of the beacon that was detected
        /// </summary>
        /// <value>Hardware ID of the beacon that was detected</value>
        [DataMember(Name = "hwid", IsRequired = true, EmitDefaultValue = true)]
        public string Hwid { get; set; }

        /// <summary>
        /// Device message of beacon that was detected.
        /// </summary>
        /// <value>Device message of beacon that was detected.</value>
        [DataMember(Name = "dm", EmitDefaultValue = false)]
        public string Dm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BeaconContent {\n");
            sb.Append("  Hwid: ").Append(Hwid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Dm: ").Append(Dm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BeaconContent);
        }

        /// <summary>
        /// Returns true if BeaconContent instances are equal
        /// </summary>
        /// <param name="input">Instance of BeaconContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BeaconContent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Hwid == input.Hwid ||
                    (this.Hwid != null &&
                    this.Hwid.Equals(input.Hwid))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Dm == input.Dm ||
                    (this.Dm != null &&
                    this.Dm.Equals(input.Dm))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hwid != null)
                {
                    hashCode = (hashCode * 59) + this.Hwid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Dm != null)
                {
                    hashCode = (hashCode * 59) + this.Dm.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
