/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.Webhook.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.Webhook.Client.OpenAPIDateConverter;

namespace LineOpenApi.Webhook.Model
{
    /// <summary>
    /// Mentionee
    /// </summary>
    [DataContract(Name = "Mentionee")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(AllMentionee), "all")]
    [JsonSubtypes.KnownSubType(typeof(UserMentionee), "user")]
    public partial class Mentionee : IEquatable<Mentionee>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Mentionee" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Mentionee() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Mentionee" /> class.
        /// </summary>
        /// <param name="type">Mentioned target. (required).</param>
        /// <param name="index">Index position of the user mention for a character in text, with the first character being at position 0. (required).</param>
        /// <param name="length">The length of the text of the mentioned user. For a mention @example, 8 is the length. (required).</param>
        public Mentionee(string type = default(string), int index = default(int), int length = default(int))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for Mentionee and cannot be null");
            }
            this.Type = type;
            this.Index = index;
            this.Length = length;
        }

        /// <summary>
        /// Mentioned target.
        /// </summary>
        /// <value>Mentioned target.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Index position of the user mention for a character in text, with the first character being at position 0.
        /// </summary>
        /// <value>Index position of the user mention for a character in text, with the first character being at position 0.</value>
        [DataMember(Name = "index", IsRequired = true, EmitDefaultValue = true)]
        public int Index { get; set; }

        /// <summary>
        /// The length of the text of the mentioned user. For a mention @example, 8 is the length.
        /// </summary>
        /// <value>The length of the text of the mentioned user. For a mention @example, 8 is the length.</value>
        [DataMember(Name = "length", IsRequired = true, EmitDefaultValue = true)]
        public int Length { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Mentionee {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Mentionee);
        }

        /// <summary>
        /// Returns true if Mentionee instances are equal
        /// </summary>
        /// <param name="input">Instance of Mentionee to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Mentionee input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Length == input.Length ||
                    this.Length.Equals(input.Length)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Index.GetHashCode();
                hashCode = (hashCode * 59) + this.Length.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
