/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using LineOpenApi.MessagingApi.Client;
using LineOpenApi.MessagingApi.Api;
// uncomment below to import models
//using LineOpenApi.MessagingApi.Model;

namespace LineOpenApi.MessagingApi.Test.Api
{
    /// <summary>
    ///  Class for testing MessagingApiApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class MessagingApiApiTests : IDisposable
    {
        private MessagingApiApi instance;

        public MessagingApiApiTests()
        {
            instance = new MessagingApiApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of MessagingApiApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' MessagingApiApi
            //Assert.IsType<MessagingApiApi>(instance);
        }

        /// <summary>
        /// Test Broadcast
        /// </summary>
        [Fact]
        public void BroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //BroadcastRequest broadcastRequest = null;
            //Guid? xLineRetryKey = null;
            //var response = instance.Broadcast(broadcastRequest, xLineRetryKey);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test CancelDefaultRichMenu
        /// </summary>
        [Fact]
        public void CancelDefaultRichMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CancelDefaultRichMenu();
        }

        /// <summary>
        /// Test CreateRichMenu
        /// </summary>
        [Fact]
        public void CreateRichMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuRequest richMenuRequest = null;
            //var response = instance.CreateRichMenu(richMenuRequest);
            //Assert.IsType<RichMenuIdResponse>(response);
        }

        /// <summary>
        /// Test CreateRichMenuAlias
        /// </summary>
        [Fact]
        public void CreateRichMenuAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateRichMenuAliasRequest createRichMenuAliasRequest = null;
            //instance.CreateRichMenuAlias(createRichMenuAliasRequest);
        }

        /// <summary>
        /// Test DeleteRichMenu
        /// </summary>
        [Fact]
        public void DeleteRichMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuId = null;
            //instance.DeleteRichMenu(richMenuId);
        }

        /// <summary>
        /// Test DeleteRichMenuAlias
        /// </summary>
        [Fact]
        public void DeleteRichMenuAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuAliasId = null;
            //instance.DeleteRichMenuAlias(richMenuAliasId);
        }

        /// <summary>
        /// Test GetAggregationUnitNameList
        /// </summary>
        [Fact]
        public void GetAggregationUnitNameListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string limit = null;
            //string start = null;
            //var response = instance.GetAggregationUnitNameList(limit, start);
            //Assert.IsType<GetAggregationUnitNameListResponse>(response);
        }

        /// <summary>
        /// Test GetAggregationUnitUsage
        /// </summary>
        [Fact]
        public void GetAggregationUnitUsageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAggregationUnitUsage();
            //Assert.IsType<GetAggregationUnitUsageResponse>(response);
        }

        /// <summary>
        /// Test GetBotInfo
        /// </summary>
        [Fact]
        public void GetBotInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetBotInfo();
            //Assert.IsType<BotInfoResponse>(response);
        }

        /// <summary>
        /// Test GetDefaultRichMenuId
        /// </summary>
        [Fact]
        public void GetDefaultRichMenuIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetDefaultRichMenuId();
            //Assert.IsType<RichMenuIdResponse>(response);
        }

        /// <summary>
        /// Test GetFollowers
        /// </summary>
        [Fact]
        public void GetFollowersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string start = null;
            //int? limit = null;
            //var response = instance.GetFollowers(start, limit);
            //Assert.IsType<GetFollowersResponse>(response);
        }

        /// <summary>
        /// Test GetGroupMemberCount
        /// </summary>
        [Fact]
        public void GetGroupMemberCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetGroupMemberCount(groupId);
            //Assert.IsType<GroupMemberCountResponse>(response);
        }

        /// <summary>
        /// Test GetGroupMemberProfile
        /// </summary>
        [Fact]
        public void GetGroupMemberProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string userId = null;
            //var response = instance.GetGroupMemberProfile(groupId, userId);
            //Assert.IsType<GroupUserProfileResponse>(response);
        }

        /// <summary>
        /// Test GetGroupMembersIds
        /// </summary>
        [Fact]
        public void GetGroupMembersIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //string start = null;
            //var response = instance.GetGroupMembersIds(groupId, start);
            //Assert.IsType<MembersIdsResponse>(response);
        }

        /// <summary>
        /// Test GetGroupSummary
        /// </summary>
        [Fact]
        public void GetGroupSummaryTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //var response = instance.GetGroupSummary(groupId);
            //Assert.IsType<GroupSummaryResponse>(response);
        }

        /// <summary>
        /// Test GetJoinedMembershipUsers
        /// </summary>
        [Fact]
        public void GetJoinedMembershipUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int membershipId = null;
            //string start = null;
            //int? limit = null;
            //var response = instance.GetJoinedMembershipUsers(membershipId, start, limit);
            //Assert.IsType<GetJoinedMembershipUsersResponse>(response);
        }

        /// <summary>
        /// Test GetMembershipList
        /// </summary>
        [Fact]
        public void GetMembershipListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMembershipList();
            //Assert.IsType<MembershipListResponse>(response);
        }

        /// <summary>
        /// Test GetMembershipSubscription
        /// </summary>
        [Fact]
        public void GetMembershipSubscriptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetMembershipSubscription(userId);
            //Assert.IsType<GetMembershipSubscriptionResponse>(response);
        }

        /// <summary>
        /// Test GetMessageQuota
        /// </summary>
        [Fact]
        public void GetMessageQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMessageQuota();
            //Assert.IsType<MessageQuotaResponse>(response);
        }

        /// <summary>
        /// Test GetMessageQuotaConsumption
        /// </summary>
        [Fact]
        public void GetMessageQuotaConsumptionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetMessageQuotaConsumption();
            //Assert.IsType<QuotaConsumptionResponse>(response);
        }

        /// <summary>
        /// Test GetNarrowcastProgress
        /// </summary>
        [Fact]
        public void GetNarrowcastProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.GetNarrowcastProgress(requestId);
            //Assert.IsType<NarrowcastProgressResponse>(response);
        }

        /// <summary>
        /// Test GetNumberOfSentBroadcastMessages
        /// </summary>
        [Fact]
        public void GetNumberOfSentBroadcastMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetNumberOfSentBroadcastMessages(date);
            //Assert.IsType<NumberOfMessagesResponse>(response);
        }

        /// <summary>
        /// Test GetNumberOfSentMulticastMessages
        /// </summary>
        [Fact]
        public void GetNumberOfSentMulticastMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetNumberOfSentMulticastMessages(date);
            //Assert.IsType<NumberOfMessagesResponse>(response);
        }

        /// <summary>
        /// Test GetNumberOfSentPushMessages
        /// </summary>
        [Fact]
        public void GetNumberOfSentPushMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetNumberOfSentPushMessages(date);
            //Assert.IsType<NumberOfMessagesResponse>(response);
        }

        /// <summary>
        /// Test GetNumberOfSentReplyMessages
        /// </summary>
        [Fact]
        public void GetNumberOfSentReplyMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetNumberOfSentReplyMessages(date);
            //Assert.IsType<NumberOfMessagesResponse>(response);
        }

        /// <summary>
        /// Test GetPNPMessageStatistics
        /// </summary>
        [Fact]
        public void GetPNPMessageStatisticsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string date = null;
            //var response = instance.GetPNPMessageStatistics(date);
            //Assert.IsType<NumberOfMessagesResponse>(response);
        }

        /// <summary>
        /// Test GetProfile
        /// </summary>
        [Fact]
        public void GetProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetProfile(userId);
            //Assert.IsType<UserProfileResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenu
        /// </summary>
        [Fact]
        public void GetRichMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuId = null;
            //var response = instance.GetRichMenu(richMenuId);
            //Assert.IsType<RichMenuResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenuAlias
        /// </summary>
        [Fact]
        public void GetRichMenuAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuAliasId = null;
            //var response = instance.GetRichMenuAlias(richMenuAliasId);
            //Assert.IsType<RichMenuAliasResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenuAliasList
        /// </summary>
        [Fact]
        public void GetRichMenuAliasListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRichMenuAliasList();
            //Assert.IsType<RichMenuAliasListResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenuBatchProgress
        /// </summary>
        [Fact]
        public void GetRichMenuBatchProgressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string requestId = null;
            //var response = instance.GetRichMenuBatchProgress(requestId);
            //Assert.IsType<RichMenuBatchProgressResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenuIdOfUser
        /// </summary>
        [Fact]
        public void GetRichMenuIdOfUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.GetRichMenuIdOfUser(userId);
            //Assert.IsType<RichMenuIdResponse>(response);
        }

        /// <summary>
        /// Test GetRichMenuList
        /// </summary>
        [Fact]
        public void GetRichMenuListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetRichMenuList();
            //Assert.IsType<RichMenuListResponse>(response);
        }

        /// <summary>
        /// Test GetRoomMemberCount
        /// </summary>
        [Fact]
        public void GetRoomMemberCountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roomId = null;
            //var response = instance.GetRoomMemberCount(roomId);
            //Assert.IsType<RoomMemberCountResponse>(response);
        }

        /// <summary>
        /// Test GetRoomMemberProfile
        /// </summary>
        [Fact]
        public void GetRoomMemberProfileTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roomId = null;
            //string userId = null;
            //var response = instance.GetRoomMemberProfile(roomId, userId);
            //Assert.IsType<RoomUserProfileResponse>(response);
        }

        /// <summary>
        /// Test GetRoomMembersIds
        /// </summary>
        [Fact]
        public void GetRoomMembersIdsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roomId = null;
            //string start = null;
            //var response = instance.GetRoomMembersIds(roomId, start);
            //Assert.IsType<MembersIdsResponse>(response);
        }

        /// <summary>
        /// Test GetWebhookEndpoint
        /// </summary>
        [Fact]
        public void GetWebhookEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetWebhookEndpoint();
            //Assert.IsType<GetWebhookEndpointResponse>(response);
        }

        /// <summary>
        /// Test IssueLinkToken
        /// </summary>
        [Fact]
        public void IssueLinkTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.IssueLinkToken(userId);
            //Assert.IsType<IssueLinkTokenResponse>(response);
        }

        /// <summary>
        /// Test LeaveGroup
        /// </summary>
        [Fact]
        public void LeaveGroupTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string groupId = null;
            //instance.LeaveGroup(groupId);
        }

        /// <summary>
        /// Test LeaveRoom
        /// </summary>
        [Fact]
        public void LeaveRoomTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string roomId = null;
            //instance.LeaveRoom(roomId);
        }

        /// <summary>
        /// Test LinkRichMenuIdToUser
        /// </summary>
        [Fact]
        public void LinkRichMenuIdToUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string richMenuId = null;
            //instance.LinkRichMenuIdToUser(userId, richMenuId);
        }

        /// <summary>
        /// Test LinkRichMenuIdToUsers
        /// </summary>
        [Fact]
        public void LinkRichMenuIdToUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuBulkLinkRequest richMenuBulkLinkRequest = null;
            //instance.LinkRichMenuIdToUsers(richMenuBulkLinkRequest);
        }

        /// <summary>
        /// Test MarkMessagesAsRead
        /// </summary>
        [Fact]
        public void MarkMessagesAsReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MarkMessagesAsReadRequest markMessagesAsReadRequest = null;
            //instance.MarkMessagesAsRead(markMessagesAsReadRequest);
        }

        /// <summary>
        /// Test Multicast
        /// </summary>
        [Fact]
        public void MulticastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //MulticastRequest multicastRequest = null;
            //Guid? xLineRetryKey = null;
            //var response = instance.Multicast(multicastRequest, xLineRetryKey);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test Narrowcast
        /// </summary>
        [Fact]
        public void NarrowcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //NarrowcastRequest narrowcastRequest = null;
            //Guid? xLineRetryKey = null;
            //var response = instance.Narrowcast(narrowcastRequest, xLineRetryKey);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test PushMessage
        /// </summary>
        [Fact]
        public void PushMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PushMessageRequest pushMessageRequest = null;
            //Guid? xLineRetryKey = null;
            //var response = instance.PushMessage(pushMessageRequest, xLineRetryKey);
            //Assert.IsType<PushMessageResponse>(response);
        }

        /// <summary>
        /// Test PushMessagesByPhone
        /// </summary>
        [Fact]
        public void PushMessagesByPhoneTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //PnpMessagesRequest pnpMessagesRequest = null;
            //string xLineDeliveryTag = null;
            //instance.PushMessagesByPhone(pnpMessagesRequest, xLineDeliveryTag);
        }

        /// <summary>
        /// Test ReplyMessage
        /// </summary>
        [Fact]
        public void ReplyMessageTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ReplyMessageRequest replyMessageRequest = null;
            //var response = instance.ReplyMessage(replyMessageRequest);
            //Assert.IsType<ReplyMessageResponse>(response);
        }

        /// <summary>
        /// Test RichMenuBatch
        /// </summary>
        [Fact]
        public void RichMenuBatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuBatchRequest richMenuBatchRequest = null;
            //instance.RichMenuBatch(richMenuBatchRequest);
        }

        /// <summary>
        /// Test SetDefaultRichMenu
        /// </summary>
        [Fact]
        public void SetDefaultRichMenuTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuId = null;
            //instance.SetDefaultRichMenu(richMenuId);
        }

        /// <summary>
        /// Test SetWebhookEndpoint
        /// </summary>
        [Fact]
        public void SetWebhookEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //SetWebhookEndpointRequest setWebhookEndpointRequest = null;
            //instance.SetWebhookEndpoint(setWebhookEndpointRequest);
        }

        /// <summary>
        /// Test ShowLoadingAnimation
        /// </summary>
        [Fact]
        public void ShowLoadingAnimationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ShowLoadingAnimationRequest showLoadingAnimationRequest = null;
            //var response = instance.ShowLoadingAnimation(showLoadingAnimationRequest);
            //Assert.IsType<Object>(response);
        }

        /// <summary>
        /// Test TestWebhookEndpoint
        /// </summary>
        [Fact]
        public void TestWebhookEndpointTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //TestWebhookEndpointRequest testWebhookEndpointRequest = null;
            //var response = instance.TestWebhookEndpoint(testWebhookEndpointRequest);
            //Assert.IsType<TestWebhookEndpointResponse>(response);
        }

        /// <summary>
        /// Test UnlinkRichMenuIdFromUser
        /// </summary>
        [Fact]
        public void UnlinkRichMenuIdFromUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UnlinkRichMenuIdFromUser(userId);
        }

        /// <summary>
        /// Test UnlinkRichMenuIdFromUsers
        /// </summary>
        [Fact]
        public void UnlinkRichMenuIdFromUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest = null;
            //instance.UnlinkRichMenuIdFromUsers(richMenuBulkUnlinkRequest);
        }

        /// <summary>
        /// Test UpdateRichMenuAlias
        /// </summary>
        [Fact]
        public void UpdateRichMenuAliasTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string richMenuAliasId = null;
            //UpdateRichMenuAliasRequest updateRichMenuAliasRequest = null;
            //instance.UpdateRichMenuAlias(richMenuAliasId, updateRichMenuAliasRequest);
        }

        /// <summary>
        /// Test ValidateBroadcast
        /// </summary>
        [Fact]
        public void ValidateBroadcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateMessageRequest validateMessageRequest = null;
            //instance.ValidateBroadcast(validateMessageRequest);
        }

        /// <summary>
        /// Test ValidateMulticast
        /// </summary>
        [Fact]
        public void ValidateMulticastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateMessageRequest validateMessageRequest = null;
            //instance.ValidateMulticast(validateMessageRequest);
        }

        /// <summary>
        /// Test ValidateNarrowcast
        /// </summary>
        [Fact]
        public void ValidateNarrowcastTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateMessageRequest validateMessageRequest = null;
            //instance.ValidateNarrowcast(validateMessageRequest);
        }

        /// <summary>
        /// Test ValidatePush
        /// </summary>
        [Fact]
        public void ValidatePushTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateMessageRequest validateMessageRequest = null;
            //instance.ValidatePush(validateMessageRequest);
        }

        /// <summary>
        /// Test ValidateReply
        /// </summary>
        [Fact]
        public void ValidateReplyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //ValidateMessageRequest validateMessageRequest = null;
            //instance.ValidateReply(validateMessageRequest);
        }

        /// <summary>
        /// Test ValidateRichMenuBatchRequest
        /// </summary>
        [Fact]
        public void ValidateRichMenuBatchRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuBatchRequest richMenuBatchRequest = null;
            //instance.ValidateRichMenuBatchRequest(richMenuBatchRequest);
        }

        /// <summary>
        /// Test ValidateRichMenuObject
        /// </summary>
        [Fact]
        public void ValidateRichMenuObjectTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //RichMenuRequest richMenuRequest = null;
            //instance.ValidateRichMenuObject(richMenuRequest);
        }
    }
}
