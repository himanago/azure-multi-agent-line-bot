/*
 * Webhook Type Definition
 *
 * Webhook event definition of the LINE Messaging API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using LineOpenApi.Webhook.Model;
using LineOpenApi.Webhook.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace LineOpenApi.Webhook.Test.Model
{
    /// <summary>
    ///  Class for testing Event
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class EventTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for Event
        //private Event instance;

        public EventTests()
        {
            // TODO uncomment below to create an instance of Event
            //instance = new Event();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of Event
        /// </summary>
        [Fact]
        public void EventInstanceTest()
        {
            // TODO uncomment below to test "IsType" Event
            //Assert.IsType<Event>(instance);
        }

        /// <summary>
        /// Test deserialize a AccountLinkEvent from type Event
        /// </summary>
        [Fact]
        public void AccountLinkEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a AccountLinkEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new AccountLinkEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a ActivatedEvent from type Event
        /// </summary>
        [Fact]
        public void ActivatedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ActivatedEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new ActivatedEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a BeaconEvent from type Event
        /// </summary>
        [Fact]
        public void BeaconEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a BeaconEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new BeaconEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a BotResumedEvent from type Event
        /// </summary>
        [Fact]
        public void BotResumedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a BotResumedEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new BotResumedEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a BotSuspendedEvent from type Event
        /// </summary>
        [Fact]
        public void BotSuspendedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a BotSuspendedEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new BotSuspendedEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a DeactivatedEvent from type Event
        /// </summary>
        [Fact]
        public void DeactivatedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a DeactivatedEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new DeactivatedEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a FollowEvent from type Event
        /// </summary>
        [Fact]
        public void FollowEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a FollowEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new FollowEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a JoinEvent from type Event
        /// </summary>
        [Fact]
        public void JoinEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a JoinEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new JoinEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a LeaveEvent from type Event
        /// </summary>
        [Fact]
        public void LeaveEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a LeaveEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new LeaveEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a MemberJoinedEvent from type Event
        /// </summary>
        [Fact]
        public void MemberJoinedEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a MemberJoinedEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new MemberJoinedEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a MemberLeftEvent from type Event
        /// </summary>
        [Fact]
        public void MemberLeftEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a MemberLeftEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new MemberLeftEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a MembershipEvent from type Event
        /// </summary>
        [Fact]
        public void MembershipEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a MembershipEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new MembershipEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a MessageEvent from type Event
        /// </summary>
        [Fact]
        public void MessageEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a MessageEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new MessageEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a ModuleEvent from type Event
        /// </summary>
        [Fact]
        public void ModuleEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ModuleEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new ModuleEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a PnpDeliveryCompletionEvent from type Event
        /// </summary>
        [Fact]
        public void PnpDeliveryCompletionEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a PnpDeliveryCompletionEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new PnpDeliveryCompletionEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a PostbackEvent from type Event
        /// </summary>
        [Fact]
        public void PostbackEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a PostbackEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new PostbackEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a ThingsEvent from type Event
        /// </summary>
        [Fact]
        public void ThingsEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a ThingsEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new ThingsEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a UnfollowEvent from type Event
        /// </summary>
        [Fact]
        public void UnfollowEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a UnfollowEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new UnfollowEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a UnsendEvent from type Event
        /// </summary>
        [Fact]
        public void UnsendEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a UnsendEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new UnsendEvent().ToJson()));
        }

        /// <summary>
        /// Test deserialize a VideoPlayCompleteEvent from type Event
        /// </summary>
        [Fact]
        public void VideoPlayCompleteEventDeserializeFromEventTest()
        {
            // TODO uncomment below to test deserialize a VideoPlayCompleteEvent from type Event
            //Assert.IsType<Event>(JsonConvert.DeserializeObject<Event>(new VideoPlayCompleteEvent().ToJson()));
        }

        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Fact]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

        /// <summary>
        /// Test the property 'Source'
        /// </summary>
        [Fact]
        public void SourceTest()
        {
            // TODO unit test for the property 'Source'
        }

        /// <summary>
        /// Test the property 'Timestamp'
        /// </summary>
        [Fact]
        public void TimestampTest()
        {
            // TODO unit test for the property 'Timestamp'
        }

        /// <summary>
        /// Test the property 'Mode'
        /// </summary>
        [Fact]
        public void ModeTest()
        {
            // TODO unit test for the property 'Mode'
        }

        /// <summary>
        /// Test the property 'WebhookEventId'
        /// </summary>
        [Fact]
        public void WebhookEventIdTest()
        {
            // TODO unit test for the property 'WebhookEventId'
        }

        /// <summary>
        /// Test the property 'DeliveryContext'
        /// </summary>
        [Fact]
        public void DeliveryContextTest()
        {
            // TODO unit test for the property 'DeliveryContext'
        }
    }
}
