/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using LineOpenApi.MessagingApi.Client;
using LineOpenApi.MessagingApi.Model;

namespace LineOpenApi.MessagingApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>FileParameter</returns>
        FileParameter GetMessageContent(string messageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetMessageContentWithHttpInfo(string messageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <returns>FileParameter</returns>
        FileParameter GetMessageContentPreview(string messageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetMessageContentPreviewWithHttpInfo(string messageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>GetMessageContentTranscodingResponse</returns>
        GetMessageContentTranscodingResponse GetMessageContentTranscodingByMessageId(string messageId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>ApiResponse of GetMessageContentTranscodingResponse</returns>
        ApiResponse<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdWithHttpInfo(string messageId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <returns>FileParameter</returns>
        FileParameter GetRichMenuImage(string richMenuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <returns>ApiResponse of FileParameter</returns>
        ApiResponse<FileParameter> GetRichMenuImageWithHttpInfo(string richMenuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void SetRichMenuImage(string richMenuId, FileParameter body = default(FileParameter));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetRichMenuImageWithHttpInfo(string richMenuId, FileParameter body = default(FileParameter));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetMessageContentAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download image, video, and audio data sent from users.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetMessageContentWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetMessageContentPreviewAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a preview image of the image or video
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetMessageContentPreviewWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageContentTranscodingResponse</returns>
        System.Threading.Tasks.Task<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Verify the preparation status of a video or audio for getting
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageContentTranscodingResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMessageContentTranscodingResponse>> GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        System.Threading.Tasks.Task<FileParameter> GetRichMenuImageAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Download rich menu image.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileParameter>> GetRichMenuImageWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetRichMenuImageAsync(string richMenuId, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload rich menu image
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetRichMenuImageWithHttpInfoAsync(string richMenuId, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiBlobApi : IMessagingApiBlobApiSync, IMessagingApiBlobApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApiBlobApi : IDisposable, IMessagingApiBlobApi
    {
        private LineOpenApi.MessagingApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MessagingApiBlobApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MessagingApiBlobApi(string basePath)
        {
            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                new LineOpenApi.MessagingApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MessagingApiBlobApi(LineOpenApi.MessagingApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiBlobApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiBlobApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                new LineOpenApi.MessagingApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiBlobApi(HttpClient client, LineOpenApi.MessagingApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiBlobApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MessagingApiBlobApi(LineOpenApi.MessagingApi.Client.ISynchronousClient client, LineOpenApi.MessagingApi.Client.IAsynchronousClient asyncClient, LineOpenApi.MessagingApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LineOpenApi.MessagingApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetMessageContent(string messageId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = GetMessageContentWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> GetMessageContentWithHttpInfo(string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContent");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/v2/bot/message/{messageId}/content", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetMessageContentAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = await GetMessageContentWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download image, video, and audio data sent from users.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter>> GetMessageContentWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContent");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/v2/bot/message/{messageId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetMessageContentPreview(string messageId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = GetMessageContentPreviewWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> GetMessageContentPreviewWithHttpInfo(string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentPreview");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/v2/bot/message/{messageId}/content/preview", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentPreview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetMessageContentPreviewAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = await GetMessageContentPreviewWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a preview image of the image or video
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of image or video</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter>> GetMessageContentPreviewWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentPreview");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/v2/bot/message/{messageId}/content/preview", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentPreview", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>GetMessageContentTranscodingResponse</returns>
        public GetMessageContentTranscodingResponse GetMessageContentTranscodingByMessageId(string messageId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> localVarResponse = GetMessageContentTranscodingByMessageIdWithHttpInfo(messageId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <returns>ApiResponse of GetMessageContentTranscodingResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdWithHttpInfo(string messageId)
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentTranscodingByMessageId");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMessageContentTranscodingResponse>("/v2/bot/message/{messageId}/content/transcoding", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentTranscodingByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMessageContentTranscodingResponse</returns>
        public async System.Threading.Tasks.Task<GetMessageContentTranscodingResponse> GetMessageContentTranscodingByMessageIdAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse> localVarResponse = await GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(messageId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Verify the preparation status of a video or audio for getting
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="messageId">Message ID of video or audio</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMessageContentTranscodingResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetMessageContentTranscodingResponse>> GetMessageContentTranscodingByMessageIdWithHttpInfoAsync(string messageId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'messageId' is set
            if (messageId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'messageId' when calling MessagingApiBlobApi->GetMessageContentTranscodingByMessageId");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("messageId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(messageId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMessageContentTranscodingResponse>("/v2/bot/message/{messageId}/content/transcoding", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageContentTranscodingByMessageId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <returns>FileParameter</returns>
        public FileParameter GetRichMenuImage(string richMenuId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = GetRichMenuImageWithHttpInfo(richMenuId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <returns>ApiResponse of FileParameter</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> GetRichMenuImageWithHttpInfo(string richMenuId)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->GetRichMenuImage");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<FileParameter>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of FileParameter</returns>
        public async System.Threading.Tasks.Task<FileParameter> GetRichMenuImageAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter> localVarResponse = await GetRichMenuImageWithHttpInfoAsync(richMenuId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Download rich menu image.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of the rich menu with the image to be downloaded</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (FileParameter)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<FileParameter>> GetRichMenuImageWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->GetRichMenuImage");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "*/*"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<FileParameter>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void SetRichMenuImage(string richMenuId, FileParameter body = default(FileParameter))
        {
            SetRichMenuImageWithHttpInfo(richMenuId, body);
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> SetRichMenuImageWithHttpInfo(string richMenuId, FileParameter body = default(FileParameter))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->SetRichMenuImage");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRichMenuImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetRichMenuImageAsync(string richMenuId, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetRichMenuImageWithHttpInfoAsync(richMenuId, body, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Upload rich menu image
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">The ID of the rich menu to attach the image to</param>
        /// <param name="body"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> SetRichMenuImageWithHttpInfoAsync(string richMenuId, FileParameter body = default(FileParameter), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiBlobApi->SetRichMenuImage");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/{richMenuId}/content", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetRichMenuImage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
