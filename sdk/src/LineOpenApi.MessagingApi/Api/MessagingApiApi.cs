/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using LineOpenApi.MessagingApi.Client;
using LineOpenApi.MessagingApi.Model;

namespace LineOpenApi.MessagingApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple users at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        Object Broadcast(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple users at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> BroadcastWithHttpInfo(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        void CancelDefaultRichMenu();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CancelDefaultRichMenuWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>RichMenuIdResponse</returns>
        RichMenuIdResponse CreateRichMenu(RichMenuRequest richMenuRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        ApiResponse<RichMenuIdResponse> CreateRichMenuWithHttpInfo(RichMenuRequest richMenuRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <returns></returns>
        void CreateRichMenuAlias(CreateRichMenuAliasRequest createRichMenuAliasRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRichMenuAliasWithHttpInfo(CreateRichMenuAliasRequest createRichMenuAliasRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a rich menu.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        void DeleteRichMenu(string richMenuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a rich menu.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRichMenuWithHttpInfo(string richMenuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <returns></returns>
        void DeleteRichMenuAlias(string richMenuAliasId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRichMenuAliasWithHttpInfo(string richMenuAliasId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get name list of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <returns>GetAggregationUnitNameListResponse</returns>
        GetAggregationUnitNameListResponse GetAggregationUnitNameList(string limit = default(string), string start = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get name list of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <returns>ApiResponse of GetAggregationUnitNameListResponse</returns>
        ApiResponse<GetAggregationUnitNameListResponse> GetAggregationUnitNameListWithHttpInfo(string limit = default(string), string start = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetAggregationUnitUsageResponse</returns>
        GetAggregationUnitUsageResponse GetAggregationUnitUsage();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetAggregationUnitUsageResponse</returns>
        ApiResponse<GetAggregationUnitUsageResponse> GetAggregationUnitUsageWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get bot info
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BotInfoResponse</returns>
        BotInfoResponse GetBotInfo();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get bot info
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BotInfoResponse</returns>
        ApiResponse<BotInfoResponse> GetBotInfoWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the ID of the default rich menu set with the Messaging API.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuIdResponse</returns>
        RichMenuIdResponse GetDefaultRichMenuId();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the ID of the default rich menu set with the Messaging API.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        ApiResponse<RichMenuIdResponse> GetDefaultRichMenuIdWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of users who added your LINE Official Account as a friend
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <returns>GetFollowersResponse</returns>
        GetFollowersResponse GetFollowers(string start = default(string), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of users who added your LINE Official Account as a friend
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <returns>ApiResponse of GetFollowersResponse</returns>
        ApiResponse<GetFollowersResponse> GetFollowersWithHttpInfo(string start = default(string), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>GroupMemberCountResponse</returns>
        GroupMemberCountResponse GetGroupMemberCount(string groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of GroupMemberCountResponse</returns>
        ApiResponse<GroupMemberCountResponse> GetGroupMemberCountWithHttpInfo(string groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>GroupUserProfileResponse</returns>
        GroupUserProfileResponse GetGroupMemberProfile(string groupId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of GroupUserProfileResponse</returns>
        ApiResponse<GroupUserProfileResponse> GetGroupMemberProfileWithHttpInfo(string groupId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>MembersIdsResponse</returns>
        MembersIdsResponse GetGroupMembersIds(string groupId, string start = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>ApiResponse of MembersIdsResponse</returns>
        ApiResponse<MembersIdsResponse> GetGroupMembersIdsWithHttpInfo(string groupId, string start = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat summary
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>GroupSummaryResponse</returns>
        GroupSummaryResponse GetGroupSummary(string groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat summary
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of GroupSummaryResponse</returns>
        ApiResponse<GroupSummaryResponse> GetGroupSummaryWithHttpInfo(string groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of user IDs who joined the membership.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <returns>GetJoinedMembershipUsersResponse</returns>
        GetJoinedMembershipUsersResponse GetJoinedMembershipUsers(int membershipId, string start = default(string), int? limit = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of user IDs who joined the membership.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <returns>ApiResponse of GetJoinedMembershipUsersResponse</returns>
        ApiResponse<GetJoinedMembershipUsersResponse> GetJoinedMembershipUsersWithHttpInfo(int membershipId, string start = default(string), int? limit = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of memberships.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MembershipListResponse</returns>
        MembershipListResponse GetMembershipList();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of memberships.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MembershipListResponse</returns>
        ApiResponse<MembershipListResponse> GetMembershipListWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s membership subscription.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>GetMembershipSubscriptionResponse</returns>
        GetMembershipSubscriptionResponse GetMembershipSubscription(string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s membership subscription.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of GetMembershipSubscriptionResponse</returns>
        ApiResponse<GetMembershipSubscriptionResponse> GetMembershipSubscriptionWithHttpInfo(string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MessageQuotaResponse</returns>
        MessageQuotaResponse GetMessageQuota();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MessageQuotaResponse</returns>
        ApiResponse<MessageQuotaResponse> GetMessageQuotaWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the number of messages sent in the current month.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QuotaConsumptionResponse</returns>
        QuotaConsumptionResponse GetMessageQuotaConsumption();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the number of messages sent in the current month.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QuotaConsumptionResponse</returns>
        ApiResponse<QuotaConsumptionResponse> GetMessageQuotaConsumptionWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the status of a narrowcast message.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <returns>NarrowcastProgressResponse</returns>
        NarrowcastProgressResponse GetNarrowcastProgress(string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the status of a narrowcast message.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <returns>ApiResponse of NarrowcastProgressResponse</returns>
        ApiResponse<NarrowcastProgressResponse> GetNarrowcastProgressWithHttpInfo(string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent broadcast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        NumberOfMessagesResponse GetNumberOfSentBroadcastMessages(string date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent broadcast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        ApiResponse<NumberOfMessagesResponse> GetNumberOfSentBroadcastMessagesWithHttpInfo(string date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent multicast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        NumberOfMessagesResponse GetNumberOfSentMulticastMessages(string date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent multicast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        ApiResponse<NumberOfMessagesResponse> GetNumberOfSentMulticastMessagesWithHttpInfo(string date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent push messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        NumberOfMessagesResponse GetNumberOfSentPushMessages(string date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent push messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        ApiResponse<NumberOfMessagesResponse> GetNumberOfSentPushMessagesWithHttpInfo(string date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent reply messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        NumberOfMessagesResponse GetNumberOfSentReplyMessages(string date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent reply messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        ApiResponse<NumberOfMessagesResponse> GetNumberOfSentReplyMessagesWithHttpInfo(string date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent LINE notification messages　
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        NumberOfMessagesResponse GetPNPMessageStatistics(string date);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent LINE notification messages　
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        ApiResponse<NumberOfMessagesResponse> GetPNPMessageStatisticsWithHttpInfo(string date);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>UserProfileResponse</returns>
        UserProfileResponse GetProfile(string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of UserProfileResponse</returns>
        ApiResponse<UserProfileResponse> GetProfileWithHttpInfo(string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a rich menu via a rich menu ID.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>RichMenuResponse</returns>
        RichMenuResponse GetRichMenu(string richMenuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a rich menu via a rich menu ID.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of RichMenuResponse</returns>
        ApiResponse<RichMenuResponse> GetRichMenuWithHttpInfo(string richMenuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu alias information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <returns>RichMenuAliasResponse</returns>
        RichMenuAliasResponse GetRichMenuAlias(string richMenuAliasId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu alias information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <returns>ApiResponse of RichMenuAliasResponse</returns>
        ApiResponse<RichMenuAliasResponse> GetRichMenuAliasWithHttpInfo(string richMenuAliasId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuAliasListResponse</returns>
        RichMenuAliasListResponse GetRichMenuAliasList();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuAliasListResponse</returns>
        ApiResponse<RichMenuAliasListResponse> GetRichMenuAliasListWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the status of Replace or unlink a linked rich menus in batches.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <returns>RichMenuBatchProgressResponse</returns>
        RichMenuBatchProgressResponse GetRichMenuBatchProgress(string requestId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the status of Replace or unlink a linked rich menus in batches.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <returns>ApiResponse of RichMenuBatchProgressResponse</returns>
        ApiResponse<RichMenuBatchProgressResponse> GetRichMenuBatchProgressWithHttpInfo(string requestId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu ID of user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>RichMenuIdResponse</returns>
        RichMenuIdResponse GetRichMenuIdOfUser(string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu ID of user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        ApiResponse<RichMenuIdResponse> GetRichMenuIdOfUserWithHttpInfo(string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu list
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuListResponse</returns>
        RichMenuListResponse GetRichMenuList();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu list
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuListResponse</returns>
        ApiResponse<RichMenuListResponse> GetRichMenuListWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>RoomMemberCountResponse</returns>
        RoomMemberCountResponse GetRoomMemberCount(string roomId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>ApiResponse of RoomMemberCountResponse</returns>
        ApiResponse<RoomMemberCountResponse> GetRoomMemberCountWithHttpInfo(string roomId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>RoomUserProfileResponse</returns>
        RoomUserProfileResponse GetRoomMemberProfile(string roomId, string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of RoomUserProfileResponse</returns>
        ApiResponse<RoomUserProfileResponse> GetRoomMemberProfileWithHttpInfo(string roomId, string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>MembersIdsResponse</returns>
        MembersIdsResponse GetRoomMembersIds(string roomId, string start = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>ApiResponse of MembersIdsResponse</returns>
        ApiResponse<MembersIdsResponse> GetRoomMembersIdsWithHttpInfo(string roomId, string start = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook endpoint information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetWebhookEndpointResponse</returns>
        GetWebhookEndpointResponse GetWebhookEndpoint();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook endpoint information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetWebhookEndpointResponse</returns>
        ApiResponse<GetWebhookEndpointResponse> GetWebhookEndpointWithHttpInfo();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue link token
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <returns>IssueLinkTokenResponse</returns>
        IssueLinkTokenResponse IssueLinkToken(string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue link token
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <returns>ApiResponse of IssueLinkTokenResponse</returns>
        ApiResponse<IssueLinkTokenResponse> IssueLinkTokenWithHttpInfo(string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns></returns>
        void LeaveGroup(string groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveGroupWithHttpInfo(string groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns></returns>
        void LeaveRoom(string roomId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LeaveRoomWithHttpInfo(string roomId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to user.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        void LinkRichMenuIdToUser(string userId, string richMenuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to user.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LinkRichMenuIdToUserWithHttpInfo(string userId, string richMenuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <returns></returns>
        void LinkRichMenuIdToUsers(RichMenuBulkLinkRequest richMenuBulkLinkRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LinkRichMenuIdToUsersWithHttpInfo(RichMenuBulkLinkRequest richMenuBulkLinkRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark messages from users as read
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <returns></returns>
        void MarkMessagesAsRead(MarkMessagesAsReadRequest markMessagesAsReadRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark messages from users as read
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> MarkMessagesAsReadWithHttpInfo(MarkMessagesAsReadRequest markMessagesAsReadRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        Object Multicast(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> MulticastWithHttpInfo(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        Object Narrowcast(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> NarrowcastWithHttpInfo(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to a user, group chat, or multi-person chat at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>PushMessageResponse</returns>
        PushMessageResponse PushMessage(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to a user, group chat, or multi-person chat at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of PushMessageResponse</returns>
        ApiResponse<PushMessageResponse> PushMessageWithHttpInfo(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send LINE notification message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <returns></returns>
        void PushMessagesByPhone(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send LINE notification message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PushMessagesByPhoneWithHttpInfo(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <returns>ReplyMessageResponse</returns>
        ReplyMessageResponse ReplyMessage(ReplyMessageRequest replyMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <returns>ApiResponse of ReplyMessageResponse</returns>
        ApiResponse<ReplyMessageResponse> ReplyMessageWithHttpInfo(ReplyMessageRequest replyMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns></returns>
        void RichMenuBatch(RichMenuBatchRequest richMenuBatchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RichMenuBatchWithHttpInfo(RichMenuBatchRequest richMenuBatchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        void SetDefaultRichMenu(string richMenuId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetDefaultRichMenuWithHttpInfo(string richMenuId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set webhook endpoint URL
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <returns></returns>
        void SetWebhookEndpoint(SetWebhookEndpointRequest setWebhookEndpointRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set webhook endpoint URL
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SetWebhookEndpointWithHttpInfo(SetWebhookEndpointRequest setWebhookEndpointRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <returns>Object</returns>
        Object ShowLoadingAnimation(ShowLoadingAnimationRequest showLoadingAnimationRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> ShowLoadingAnimationWithHttpInfo(ShowLoadingAnimationRequest showLoadingAnimationRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test webhook endpoint
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <returns>TestWebhookEndpointResponse</returns>
        TestWebhookEndpointResponse TestWebhookEndpoint(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test webhook endpoint
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <returns>ApiResponse of TestWebhookEndpointResponse</returns>
        ApiResponse<TestWebhookEndpointResponse> TestWebhookEndpointWithHttpInfo(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menu from user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns></returns>
        void UnlinkRichMenuIdFromUser(string userId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menu from user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlinkRichMenuIdFromUserWithHttpInfo(string userId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menus from multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <returns></returns>
        void UnlinkRichMenuIdFromUsers(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menus from multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnlinkRichMenuIdFromUsersWithHttpInfo(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <returns></returns>
        void UpdateRichMenuAlias(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRichMenuAliasWithHttpInfo(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a broadcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        void ValidateBroadcast(ValidateMessageRequest validateMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a broadcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateBroadcastWithHttpInfo(ValidateMessageRequest validateMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a multicast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        void ValidateMulticast(ValidateMessageRequest validateMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a multicast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateMulticastWithHttpInfo(ValidateMessageRequest validateMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        void ValidateNarrowcast(ValidateMessageRequest validateMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateNarrowcastWithHttpInfo(ValidateMessageRequest validateMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a push message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        void ValidatePush(ValidateMessageRequest validateMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a push message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidatePushWithHttpInfo(ValidateMessageRequest validateMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        void ValidateReply(ValidateMessageRequest validateMessageRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateReplyWithHttpInfo(ValidateMessageRequest validateMessageRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns></returns>
        void ValidateRichMenuBatchRequest(RichMenuBatchRequest richMenuBatchRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateRichMenuBatchRequestWithHttpInfo(RichMenuBatchRequest richMenuBatchRequest);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate rich menu object
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns></returns>
        void ValidateRichMenuObject(RichMenuRequest richMenuRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate rich menu object
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ValidateRichMenuObjectWithHttpInfo(RichMenuRequest richMenuRequest);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple users at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> BroadcastAsync(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to multiple users at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BroadcastWithHttpInfoAsync(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CancelDefaultRichMenuAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancel default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CancelDefaultRichMenuWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        System.Threading.Tasks.Task<RichMenuIdResponse> CreateRichMenuAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuIdResponse>> CreateRichMenuWithHttpInfoAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRichMenuAliasAsync(CreateRichMenuAliasRequest createRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRichMenuAliasWithHttpInfoAsync(CreateRichMenuAliasRequest createRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a rich menu.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deletes a rich menu.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRichMenuAliasAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get name list of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAggregationUnitNameListResponse</returns>
        System.Threading.Tasks.Task<GetAggregationUnitNameListResponse> GetAggregationUnitNameListAsync(string limit = default(string), string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get name list of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAggregationUnitNameListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAggregationUnitNameListResponse>> GetAggregationUnitNameListWithHttpInfoAsync(string limit = default(string), string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAggregationUnitUsageResponse</returns>
        System.Threading.Tasks.Task<GetAggregationUnitUsageResponse> GetAggregationUnitUsageAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of units used this month
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAggregationUnitUsageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAggregationUnitUsageResponse>> GetAggregationUnitUsageWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get bot info
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BotInfoResponse</returns>
        System.Threading.Tasks.Task<BotInfoResponse> GetBotInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get bot info
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BotInfoResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BotInfoResponse>> GetBotInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the ID of the default rich menu set with the Messaging API.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        System.Threading.Tasks.Task<RichMenuIdResponse> GetDefaultRichMenuIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the ID of the default rich menu set with the Messaging API.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuIdResponse>> GetDefaultRichMenuIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of users who added your LINE Official Account as a friend
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFollowersResponse</returns>
        System.Threading.Tasks.Task<GetFollowersResponse> GetFollowersAsync(string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of users who added your LINE Official Account as a friend
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFollowersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetFollowersResponse>> GetFollowersWithHttpInfoAsync(string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMemberCountResponse</returns>
        System.Threading.Tasks.Task<GroupMemberCountResponse> GetGroupMemberCountAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMemberCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupMemberCountResponse>> GetGroupMemberCountWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserProfileResponse</returns>
        System.Threading.Tasks.Task<GroupUserProfileResponse> GetGroupMemberProfileAsync(string groupId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupUserProfileResponse>> GetGroupMemberProfileWithHttpInfoAsync(string groupId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersIdsResponse</returns>
        System.Threading.Tasks.Task<MembersIdsResponse> GetGroupMembersIdsAsync(string groupId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembersIdsResponse>> GetGroupMembersIdsWithHttpInfoAsync(string groupId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat summary
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupSummaryResponse</returns>
        System.Threading.Tasks.Task<GroupSummaryResponse> GetGroupSummaryAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get group chat summary
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupSummaryResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GroupSummaryResponse>> GetGroupSummaryWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of user IDs who joined the membership.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJoinedMembershipUsersResponse</returns>
        System.Threading.Tasks.Task<GetJoinedMembershipUsersResponse> GetJoinedMembershipUsersAsync(int membershipId, string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of user IDs who joined the membership.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJoinedMembershipUsersResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetJoinedMembershipUsersResponse>> GetJoinedMembershipUsersWithHttpInfoAsync(int membershipId, string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of memberships.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipListResponse</returns>
        System.Threading.Tasks.Task<MembershipListResponse> GetMembershipListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of memberships.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipListResponse>> GetMembershipListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s membership subscription.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMembershipSubscriptionResponse</returns>
        System.Threading.Tasks.Task<GetMembershipSubscriptionResponse> GetMembershipSubscriptionAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s membership subscription.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMembershipSubscriptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMembershipSubscriptionResponse>> GetMembershipSubscriptionWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageQuotaResponse</returns>
        System.Threading.Tasks.Task<MessageQuotaResponse> GetMessageQuotaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageQuotaResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MessageQuotaResponse>> GetMessageQuotaWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the number of messages sent in the current month.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotaConsumptionResponse</returns>
        System.Threading.Tasks.Task<QuotaConsumptionResponse> GetMessageQuotaConsumptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the number of messages sent in the current month.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotaConsumptionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QuotaConsumptionResponse>> GetMessageQuotaConsumptionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the status of a narrowcast message.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NarrowcastProgressResponse</returns>
        System.Threading.Tasks.Task<NarrowcastProgressResponse> GetNarrowcastProgressAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the status of a narrowcast message.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NarrowcastProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NarrowcastProgressResponse>> GetNarrowcastProgressWithHttpInfoAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent broadcast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentBroadcastMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent broadcast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentBroadcastMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent multicast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentMulticastMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent multicast messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentMulticastMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent push messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentPushMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent push messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentPushMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent reply messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentReplyMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent reply messages
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentReplyMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent LINE notification messages　
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        System.Threading.Tasks.Task<NumberOfMessagesResponse> GetPNPMessageStatisticsAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of sent LINE notification messages　
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NumberOfMessagesResponse>> GetPNPMessageStatisticsWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileResponse</returns>
        System.Threading.Tasks.Task<UserProfileResponse> GetProfileAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserProfileResponse>> GetProfileWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a rich menu via a rich menu ID.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuResponse</returns>
        System.Threading.Tasks.Task<RichMenuResponse> GetRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a rich menu via a rich menu ID.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuResponse>> GetRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu alias information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuAliasResponse</returns>
        System.Threading.Tasks.Task<RichMenuAliasResponse> GetRichMenuAliasAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu alias information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuAliasResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuAliasResponse>> GetRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuAliasListResponse</returns>
        System.Threading.Tasks.Task<RichMenuAliasListResponse> GetRichMenuAliasListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuAliasListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuAliasListResponse>> GetRichMenuAliasListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the status of Replace or unlink a linked rich menus in batches.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuBatchProgressResponse</returns>
        System.Threading.Tasks.Task<RichMenuBatchProgressResponse> GetRichMenuBatchProgressAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the status of Replace or unlink a linked rich menus in batches.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuBatchProgressResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuBatchProgressResponse>> GetRichMenuBatchProgressWithHttpInfoAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu ID of user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        System.Threading.Tasks.Task<RichMenuIdResponse> GetRichMenuIdOfUserAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu ID of user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuIdResponse>> GetRichMenuIdOfUserWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu list
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuListResponse</returns>
        System.Threading.Tasks.Task<RichMenuListResponse> GetRichMenuListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get rich menu list
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RichMenuListResponse>> GetRichMenuListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoomMemberCountResponse</returns>
        System.Threading.Tasks.Task<RoomMemberCountResponse> GetRoomMemberCountAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get number of users in a multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoomMemberCountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomMemberCountResponse>> GetRoomMemberCountWithHttpInfoAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoomUserProfileResponse</returns>
        System.Threading.Tasks.Task<RoomUserProfileResponse> GetRoomMemberProfileAsync(string roomId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member profile
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoomUserProfileResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoomUserProfileResponse>> GetRoomMemberProfileWithHttpInfoAsync(string roomId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersIdsResponse</returns>
        System.Threading.Tasks.Task<MembersIdsResponse> GetRoomMembersIdsAsync(string roomId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get multi-person chat member user IDs
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersIdsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembersIdsResponse>> GetRoomMembersIdsWithHttpInfoAsync(string roomId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook endpoint information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookEndpointResponse</returns>
        System.Threading.Tasks.Task<GetWebhookEndpointResponse> GetWebhookEndpointAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get webhook endpoint information
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetWebhookEndpointResponse>> GetWebhookEndpointWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue link token
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueLinkTokenResponse</returns>
        System.Threading.Tasks.Task<IssueLinkTokenResponse> IssueLinkTokenAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Issue link token
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueLinkTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<IssueLinkTokenResponse>> IssueLinkTokenWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveGroupAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave group chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveGroupWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LeaveRoomAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Leave multi-person chat
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LeaveRoomWithHttpInfoAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to user.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LinkRichMenuIdToUserAsync(string userId, string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to user.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinkRichMenuIdToUserWithHttpInfoAsync(string userId, string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LinkRichMenuIdToUsersAsync(RichMenuBulkLinkRequest richMenuBulkLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Link rich menu to multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LinkRichMenuIdToUsersWithHttpInfoAsync(RichMenuBulkLinkRequest richMenuBulkLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark messages from users as read
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task MarkMessagesAsReadAsync(MarkMessagesAsReadRequest markMessagesAsReadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Mark messages from users as read
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MarkMessagesAsReadWithHttpInfoAsync(MarkMessagesAsReadRequest markMessagesAsReadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> MulticastAsync(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> MulticastWithHttpInfoAsync(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> NarrowcastAsync(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NarrowcastWithHttpInfoAsync(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to a user, group chat, or multi-person chat at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushMessageResponse</returns>
        System.Threading.Tasks.Task<PushMessageResponse> PushMessageAsync(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Sends a message to a user, group chat, or multi-person chat at any time.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PushMessageResponse>> PushMessageWithHttpInfoAsync(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send LINE notification message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PushMessagesByPhoneAsync(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send LINE notification message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PushMessagesByPhoneWithHttpInfoAsync(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplyMessageResponse</returns>
        System.Threading.Tasks.Task<ReplyMessageResponse> ReplyMessageAsync(ReplyMessageRequest replyMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Send reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplyMessageResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ReplyMessageResponse>> ReplyMessageWithHttpInfoAsync(ReplyMessageRequest replyMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RichMenuBatchAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RichMenuBatchWithHttpInfoAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetDefaultRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set default rich menu
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetDefaultRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set webhook endpoint URL
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SetWebhookEndpointAsync(SetWebhookEndpointRequest setWebhookEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Set webhook endpoint URL
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SetWebhookEndpointWithHttpInfoAsync(SetWebhookEndpointRequest setWebhookEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> ShowLoadingAnimationAsync(ShowLoadingAnimationRequest showLoadingAnimationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ShowLoadingAnimationWithHttpInfoAsync(ShowLoadingAnimationRequest showLoadingAnimationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test webhook endpoint
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestWebhookEndpointResponse</returns>
        System.Threading.Tasks.Task<TestWebhookEndpointResponse> TestWebhookEndpointAsync(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Test webhook endpoint
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestWebhookEndpointResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TestWebhookEndpointResponse>> TestWebhookEndpointWithHttpInfoAsync(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menu from user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkRichMenuIdFromUserAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menu from user
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkRichMenuIdFromUserWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menus from multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnlinkRichMenuIdFromUsersAsync(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unlink rich menus from multiple users
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnlinkRichMenuIdFromUsersWithHttpInfoAsync(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRichMenuAliasAsync(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Update rich menu alias
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a broadcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateBroadcastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a broadcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateBroadcastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a multicast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateMulticastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a multicast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateMulticastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateNarrowcastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a narrowcast message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateNarrowcastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a push message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidatePushAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a push message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidatePushWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateReplyAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate message objects of a reply message
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateReplyWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateRichMenuBatchRequestAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateRichMenuBatchRequestWithHttpInfoAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate rich menu object
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ValidateRichMenuObjectAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Validate rich menu object
        /// </remarks>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ValidateRichMenuObjectWithHttpInfoAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMessagingApiApi : IMessagingApiApiSync, IMessagingApiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MessagingApiApi : IDisposable, IMessagingApiApi
    {
        private LineOpenApi.MessagingApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public MessagingApiApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public MessagingApiApi(string basePath)
        {
            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                new LineOpenApi.MessagingApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public MessagingApiApi(LineOpenApi.MessagingApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                new LineOpenApi.MessagingApi.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public MessagingApiApi(HttpClient client, LineOpenApi.MessagingApi.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = LineOpenApi.MessagingApi.Client.Configuration.MergeConfigurations(
                LineOpenApi.MessagingApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new LineOpenApi.MessagingApi.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MessagingApiApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public MessagingApiApi(LineOpenApi.MessagingApi.Client.ISynchronousClient client, LineOpenApi.MessagingApi.Client.IAsynchronousClient asyncClient, LineOpenApi.MessagingApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = LineOpenApi.MessagingApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public LineOpenApi.MessagingApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public LineOpenApi.MessagingApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Sends a message to multiple users at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        public Object Broadcast(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = BroadcastWithHttpInfo(broadcastRequest, xLineRetryKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a message to multiple users at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> BroadcastWithHttpInfo(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            // verify the required parameter 'broadcastRequest' is set
            if (broadcastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'broadcastRequest' when calling MessagingApiApi->Broadcast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = broadcastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/broadcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Broadcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a message to multiple users at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> BroadcastAsync(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = await BroadcastWithHttpInfoAsync(broadcastRequest, xLineRetryKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a message to multiple users at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="broadcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> BroadcastWithHttpInfoAsync(BroadcastRequest broadcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'broadcastRequest' is set
            if (broadcastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'broadcastRequest' when calling MessagingApiApi->Broadcast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = broadcastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/broadcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Broadcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns></returns>
        public void CancelDefaultRichMenu()
        {
            CancelDefaultRichMenuWithHttpInfo();
        }

        /// <summary>
        ///  Cancel default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> CancelDefaultRichMenuWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/bot/user/all/richmenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDefaultRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancel default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CancelDefaultRichMenuAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CancelDefaultRichMenuWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Cancel default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> CancelDefaultRichMenuWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/bot/user/all/richmenu", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CancelDefaultRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>RichMenuIdResponse</returns>
        public RichMenuIdResponse CreateRichMenu(RichMenuRequest richMenuRequest)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = CreateRichMenuWithHttpInfo(richMenuRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> CreateRichMenuWithHttpInfo(RichMenuRequest richMenuRequest)
        {
            // verify the required parameter 'richMenuRequest' is set
            if (richMenuRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuRequest' when calling MessagingApiApi->CreateRichMenu");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RichMenuIdResponse>("/v2/bot/richmenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuIdResponse> CreateRichMenuAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = await CreateRichMenuWithHttpInfoAsync(richMenuRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse>> CreateRichMenuWithHttpInfoAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuRequest' is set
            if (richMenuRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuRequest' when calling MessagingApiApi->CreateRichMenu");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<RichMenuIdResponse>("/v2/bot/richmenu", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <returns></returns>
        public void CreateRichMenuAlias(CreateRichMenuAliasRequest createRichMenuAliasRequest)
        {
            CreateRichMenuAliasWithHttpInfo(createRichMenuAliasRequest);
        }

        /// <summary>
        ///  Create rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> CreateRichMenuAliasWithHttpInfo(CreateRichMenuAliasRequest createRichMenuAliasRequest)
        {
            // verify the required parameter 'createRichMenuAliasRequest' is set
            if (createRichMenuAliasRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'createRichMenuAliasRequest' when calling MessagingApiApi->CreateRichMenuAlias");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createRichMenuAliasRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/alias", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRichMenuAliasAsync(CreateRichMenuAliasRequest createRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CreateRichMenuAliasWithHttpInfoAsync(createRichMenuAliasRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Create rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> CreateRichMenuAliasWithHttpInfoAsync(CreateRichMenuAliasRequest createRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createRichMenuAliasRequest' is set
            if (createRichMenuAliasRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'createRichMenuAliasRequest' when calling MessagingApiApi->CreateRichMenuAlias");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = createRichMenuAliasRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/alias", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a rich menu.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        public void DeleteRichMenu(string richMenuId)
        {
            DeleteRichMenuWithHttpInfo(richMenuId);
        }

        /// <summary>
        ///  Deletes a rich menu.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> DeleteRichMenuWithHttpInfo(string richMenuId)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->DeleteRichMenu");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/bot/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deletes a rich menu.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRichMenuWithHttpInfoAsync(richMenuId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Deletes a rich menu.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> DeleteRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->DeleteRichMenu");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/bot/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <returns></returns>
        public void DeleteRichMenuAlias(string richMenuAliasId)
        {
            DeleteRichMenuAliasWithHttpInfo(richMenuAliasId);
        }

        /// <summary>
        ///  Delete rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> DeleteRichMenuAliasWithHttpInfo(string richMenuAliasId)
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->DeleteRichMenuAlias");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRichMenuAliasAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteRichMenuAliasWithHttpInfoAsync(richMenuAliasId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">Rich menu alias ID that you want to delete.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> DeleteRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->DeleteRichMenuAlias");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get name list of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <returns>GetAggregationUnitNameListResponse</returns>
        public GetAggregationUnitNameListResponse GetAggregationUnitNameList(string limit = default(string), string start = default(string))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitNameListResponse> localVarResponse = GetAggregationUnitNameListWithHttpInfo(limit, start);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get name list of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <returns>ApiResponse of GetAggregationUnitNameListResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitNameListResponse> GetAggregationUnitNameListWithHttpInfo(string limit = default(string), string start = default(string))
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAggregationUnitNameListResponse>("/v2/bot/message/aggregation/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAggregationUnitNameList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get name list of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAggregationUnitNameListResponse</returns>
        public async System.Threading.Tasks.Task<GetAggregationUnitNameListResponse> GetAggregationUnitNameListAsync(string limit = default(string), string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitNameListResponse> localVarResponse = await GetAggregationUnitNameListWithHttpInfoAsync(limit, start, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get name list of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The maximum number of aggregation units you can get per request.  (optional)</param>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. If you can&#39;t get all the aggregation units in one request, include this parameter to get the remaining array.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAggregationUnitNameListResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitNameListResponse>> GetAggregationUnitNameListWithHttpInfoAsync(string limit = default(string), string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAggregationUnitNameListResponse>("/v2/bot/message/aggregation/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAggregationUnitNameList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetAggregationUnitUsageResponse</returns>
        public GetAggregationUnitUsageResponse GetAggregationUnitUsage()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitUsageResponse> localVarResponse = GetAggregationUnitUsageWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetAggregationUnitUsageResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitUsageResponse> GetAggregationUnitUsageWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAggregationUnitUsageResponse>("/v2/bot/message/aggregation/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAggregationUnitUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAggregationUnitUsageResponse</returns>
        public async System.Threading.Tasks.Task<GetAggregationUnitUsageResponse> GetAggregationUnitUsageAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitUsageResponse> localVarResponse = await GetAggregationUnitUsageWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of units used this month
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAggregationUnitUsageResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetAggregationUnitUsageResponse>> GetAggregationUnitUsageWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAggregationUnitUsageResponse>("/v2/bot/message/aggregation/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAggregationUnitUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get bot info
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>BotInfoResponse</returns>
        public BotInfoResponse GetBotInfo()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<BotInfoResponse> localVarResponse = GetBotInfoWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get bot info
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of BotInfoResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<BotInfoResponse> GetBotInfoWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<BotInfoResponse>("/v2/bot/info", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBotInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get bot info
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of BotInfoResponse</returns>
        public async System.Threading.Tasks.Task<BotInfoResponse> GetBotInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<BotInfoResponse> localVarResponse = await GetBotInfoWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get bot info
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (BotInfoResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<BotInfoResponse>> GetBotInfoWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<BotInfoResponse>("/v2/bot/info", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBotInfo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the ID of the default rich menu set with the Messaging API.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuIdResponse</returns>
        public RichMenuIdResponse GetDefaultRichMenuId()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = GetDefaultRichMenuIdWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the ID of the default rich menu set with the Messaging API.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> GetDefaultRichMenuIdWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuIdResponse>("/v2/bot/user/all/richmenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDefaultRichMenuId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the ID of the default rich menu set with the Messaging API.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuIdResponse> GetDefaultRichMenuIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = await GetDefaultRichMenuIdWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the ID of the default rich menu set with the Messaging API.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse>> GetDefaultRichMenuIdWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuIdResponse>("/v2/bot/user/all/richmenu", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDefaultRichMenuId", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of users who added your LINE Official Account as a friend
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <returns>GetFollowersResponse</returns>
        public GetFollowersResponse GetFollowers(string start = default(string), int? limit = default(int?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetFollowersResponse> localVarResponse = GetFollowersWithHttpInfo(start, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of users who added your LINE Official Account as a friend
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <returns>ApiResponse of GetFollowersResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetFollowersResponse> GetFollowersWithHttpInfo(string start = default(string), int? limit = default(int?))
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetFollowersResponse>("/v2/bot/followers/ids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of users who added your LINE Official Account as a friend
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetFollowersResponse</returns>
        public async System.Threading.Tasks.Task<GetFollowersResponse> GetFollowersAsync(string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetFollowersResponse> localVarResponse = await GetFollowersWithHttpInfoAsync(start, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of users who added your LINE Official Account as a friend
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="start">Value of the continuation token found in the next property of the JSON object returned in the response. Include this parameter to get the next array of user IDs.  (optional)</param>
        /// <param name="limit">The maximum number of user IDs to retrieve in a single request. (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetFollowersResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetFollowersResponse>> GetFollowersWithHttpInfoAsync(string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetFollowersResponse>("/v2/bot/followers/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetFollowers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of users in a group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>GroupMemberCountResponse</returns>
        public GroupMemberCountResponse GetGroupMemberCount(string groupId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupMemberCountResponse> localVarResponse = GetGroupMemberCountWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of users in a group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of GroupMemberCountResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GroupMemberCountResponse> GetGroupMemberCountWithHttpInfo(string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMemberCount");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupMemberCountResponse>("/v2/bot/group/{groupId}/members/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMemberCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of users in a group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupMemberCountResponse</returns>
        public async System.Threading.Tasks.Task<GroupMemberCountResponse> GetGroupMemberCountAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupMemberCountResponse> localVarResponse = await GetGroupMemberCountWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of users in a group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupMemberCountResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GroupMemberCountResponse>> GetGroupMemberCountWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMemberCount");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupMemberCountResponse>("/v2/bot/group/{groupId}/members/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMemberCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>GroupUserProfileResponse</returns>
        public GroupUserProfileResponse GetGroupMemberProfile(string groupId, string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupUserProfileResponse> localVarResponse = GetGroupMemberProfileWithHttpInfo(groupId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of GroupUserProfileResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GroupUserProfileResponse> GetGroupMemberProfileWithHttpInfo(string groupId, string userId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMemberProfile");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetGroupMemberProfile");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupUserProfileResponse>("/v2/bot/group/{groupId}/member/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMemberProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupUserProfileResponse</returns>
        public async System.Threading.Tasks.Task<GroupUserProfileResponse> GetGroupMemberProfileAsync(string groupId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupUserProfileResponse> localVarResponse = await GetGroupMemberProfileWithHttpInfoAsync(groupId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupUserProfileResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GroupUserProfileResponse>> GetGroupMemberProfileWithHttpInfoAsync(string groupId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMemberProfile");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetGroupMemberProfile");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupUserProfileResponse>("/v2/bot/group/{groupId}/member/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMemberProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>MembersIdsResponse</returns>
        public MembersIdsResponse GetGroupMembersIds(string groupId, string start = default(string))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> localVarResponse = GetGroupMembersIdsWithHttpInfo(groupId, start);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>ApiResponse of MembersIdsResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> GetGroupMembersIdsWithHttpInfo(string groupId, string start = default(string))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMembersIds");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MembersIdsResponse>("/v2/bot/group/{groupId}/members/ids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembersIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersIdsResponse</returns>
        public async System.Threading.Tasks.Task<MembersIdsResponse> GetGroupMembersIdsAsync(string groupId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> localVarResponse = await GetGroupMembersIdsWithHttpInfoAsync(groupId, start, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersIdsResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse>> GetGroupMembersIdsWithHttpInfoAsync(string groupId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupMembersIds");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MembersIdsResponse>("/v2/bot/group/{groupId}/members/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupMembersIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat summary
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>GroupSummaryResponse</returns>
        public GroupSummaryResponse GetGroupSummary(string groupId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupSummaryResponse> localVarResponse = GetGroupSummaryWithHttpInfo(groupId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat summary
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of GroupSummaryResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GroupSummaryResponse> GetGroupSummaryWithHttpInfo(string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupSummary");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GroupSummaryResponse>("/v2/bot/group/{groupId}/summary", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get group chat summary
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GroupSummaryResponse</returns>
        public async System.Threading.Tasks.Task<GroupSummaryResponse> GetGroupSummaryAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GroupSummaryResponse> localVarResponse = await GetGroupSummaryWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get group chat summary
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GroupSummaryResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GroupSummaryResponse>> GetGroupSummaryWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->GetGroupSummary");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GroupSummaryResponse>("/v2/bot/group/{groupId}/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetGroupSummary", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of user IDs who joined the membership.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <returns>GetJoinedMembershipUsersResponse</returns>
        public GetJoinedMembershipUsersResponse GetJoinedMembershipUsers(int membershipId, string start = default(string), int? limit = default(int?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetJoinedMembershipUsersResponse> localVarResponse = GetJoinedMembershipUsersWithHttpInfo(membershipId, start, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of user IDs who joined the membership.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <returns>ApiResponse of GetJoinedMembershipUsersResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetJoinedMembershipUsersResponse> GetJoinedMembershipUsersWithHttpInfo(int membershipId, string start = default(string), int? limit = default(int?))
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("membershipId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetJoinedMembershipUsersResponse>("/v2/bot/membership/{membershipId}/users/ids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJoinedMembershipUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of user IDs who joined the membership.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetJoinedMembershipUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetJoinedMembershipUsersResponse> GetJoinedMembershipUsersAsync(int membershipId, string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetJoinedMembershipUsersResponse> localVarResponse = await GetJoinedMembershipUsersWithHttpInfoAsync(membershipId, start, limit, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of user IDs who joined the membership.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="membershipId">Membership plan ID.</param>
        /// <param name="start">A continuation token to get next remaining membership user IDs. Returned only when there are remaining user IDs that weren&#39;t returned in the userIds property in the previous request. The continuation token expires in 24 hours (86,400 seconds).  (optional)</param>
        /// <param name="limit">The max number of items to return for this API call. The value is set to 300 by default, but the max acceptable value is 1000.  (optional, default to 300)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetJoinedMembershipUsersResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetJoinedMembershipUsersResponse>> GetJoinedMembershipUsersWithHttpInfoAsync(int membershipId, string start = default(string), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("membershipId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetJoinedMembershipUsersResponse>("/v2/bot/membership/{membershipId}/users/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetJoinedMembershipUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of memberships.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MembershipListResponse</returns>
        public MembershipListResponse GetMembershipList()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembershipListResponse> localVarResponse = GetMembershipListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of memberships.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MembershipListResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<MembershipListResponse> GetMembershipListWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MembershipListResponse>("/v2/bot/membership/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of memberships.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembershipListResponse</returns>
        public async System.Threading.Tasks.Task<MembershipListResponse> GetMembershipListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembershipListResponse> localVarResponse = await GetMembershipListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of memberships.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembershipListResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<MembershipListResponse>> GetMembershipListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MembershipListResponse>("/v2/bot/membership/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a user&#39;s membership subscription.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>GetMembershipSubscriptionResponse</returns>
        public GetMembershipSubscriptionResponse GetMembershipSubscription(string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetMembershipSubscriptionResponse> localVarResponse = GetMembershipSubscriptionWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a user&#39;s membership subscription.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of GetMembershipSubscriptionResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetMembershipSubscriptionResponse> GetMembershipSubscriptionWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetMembershipSubscription");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMembershipSubscriptionResponse>("/v2/bot/membership/subscription/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a user&#39;s membership subscription.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMembershipSubscriptionResponse</returns>
        public async System.Threading.Tasks.Task<GetMembershipSubscriptionResponse> GetMembershipSubscriptionAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetMembershipSubscriptionResponse> localVarResponse = await GetMembershipSubscriptionWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a user&#39;s membership subscription.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMembershipSubscriptionResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetMembershipSubscriptionResponse>> GetMembershipSubscriptionWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetMembershipSubscription");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetMembershipSubscriptionResponse>("/v2/bot/membership/subscription/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMembershipSubscription", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>MessageQuotaResponse</returns>
        public MessageQuotaResponse GetMessageQuota()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MessageQuotaResponse> localVarResponse = GetMessageQuotaWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of MessageQuotaResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<MessageQuotaResponse> GetMessageQuotaWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MessageQuotaResponse>("/v2/bot/message/quota", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageQuota", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MessageQuotaResponse</returns>
        public async System.Threading.Tasks.Task<MessageQuotaResponse> GetMessageQuotaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MessageQuotaResponse> localVarResponse = await GetMessageQuotaWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the target limit for sending messages in the current month. The total number of the free messages and the additional messages is returned.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MessageQuotaResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<MessageQuotaResponse>> GetMessageQuotaWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MessageQuotaResponse>("/v2/bot/message/quota", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageQuota", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the number of messages sent in the current month.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>QuotaConsumptionResponse</returns>
        public QuotaConsumptionResponse GetMessageQuotaConsumption()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<QuotaConsumptionResponse> localVarResponse = GetMessageQuotaConsumptionWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the number of messages sent in the current month.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of QuotaConsumptionResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<QuotaConsumptionResponse> GetMessageQuotaConsumptionWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<QuotaConsumptionResponse>("/v2/bot/message/quota/consumption", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageQuotaConsumption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the number of messages sent in the current month.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of QuotaConsumptionResponse</returns>
        public async System.Threading.Tasks.Task<QuotaConsumptionResponse> GetMessageQuotaConsumptionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<QuotaConsumptionResponse> localVarResponse = await GetMessageQuotaConsumptionWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the number of messages sent in the current month.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (QuotaConsumptionResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<QuotaConsumptionResponse>> GetMessageQuotaConsumptionWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<QuotaConsumptionResponse>("/v2/bot/message/quota/consumption", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMessageQuotaConsumption", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the status of a narrowcast message.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <returns>NarrowcastProgressResponse</returns>
        public NarrowcastProgressResponse GetNarrowcastProgress(string requestId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NarrowcastProgressResponse> localVarResponse = GetNarrowcastProgressWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the status of a narrowcast message.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <returns>ApiResponse of NarrowcastProgressResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NarrowcastProgressResponse> GetNarrowcastProgressWithHttpInfo(string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'requestId' when calling MessagingApiApi->GetNarrowcastProgress");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NarrowcastProgressResponse>("/v2/bot/message/progress/narrowcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNarrowcastProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the status of a narrowcast message.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NarrowcastProgressResponse</returns>
        public async System.Threading.Tasks.Task<NarrowcastProgressResponse> GetNarrowcastProgressAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NarrowcastProgressResponse> localVarResponse = await GetNarrowcastProgressWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the status of a narrowcast message.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">The narrowcast message&#39;s request ID. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NarrowcastProgressResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NarrowcastProgressResponse>> GetNarrowcastProgressWithHttpInfoAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'requestId' when calling MessagingApiApi->GetNarrowcastProgress");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NarrowcastProgressResponse>("/v2/bot/message/progress/narrowcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNarrowcastProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent broadcast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        public NumberOfMessagesResponse GetNumberOfSentBroadcastMessages(string date)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = GetNumberOfSentBroadcastMessagesWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent broadcast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> GetNumberOfSentBroadcastMessagesWithHttpInfo(string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentBroadcastMessages");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NumberOfMessagesResponse>("/v2/bot/message/delivery/broadcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentBroadcastMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent broadcast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        public async System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentBroadcastMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = await GetNumberOfSentBroadcastMessagesWithHttpInfoAsync(date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent broadcast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: yyyyMMdd (e.g. 20191231) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentBroadcastMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentBroadcastMessages");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NumberOfMessagesResponse>("/v2/bot/message/delivery/broadcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentBroadcastMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent multicast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        public NumberOfMessagesResponse GetNumberOfSentMulticastMessages(string date)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = GetNumberOfSentMulticastMessagesWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent multicast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> GetNumberOfSentMulticastMessagesWithHttpInfo(string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentMulticastMessages");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NumberOfMessagesResponse>("/v2/bot/message/delivery/multicast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentMulticastMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent multicast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        public async System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentMulticastMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = await GetNumberOfSentMulticastMessagesWithHttpInfoAsync(date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent multicast messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentMulticastMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentMulticastMessages");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NumberOfMessagesResponse>("/v2/bot/message/delivery/multicast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentMulticastMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent push messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        public NumberOfMessagesResponse GetNumberOfSentPushMessages(string date)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = GetNumberOfSentPushMessagesWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent push messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> GetNumberOfSentPushMessagesWithHttpInfo(string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentPushMessages");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NumberOfMessagesResponse>("/v2/bot/message/delivery/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentPushMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent push messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        public async System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentPushMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = await GetNumberOfSentPushMessagesWithHttpInfoAsync(date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent push messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentPushMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentPushMessages");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NumberOfMessagesResponse>("/v2/bot/message/delivery/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentPushMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent reply messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        public NumberOfMessagesResponse GetNumberOfSentReplyMessages(string date)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = GetNumberOfSentReplyMessagesWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent reply messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> GetNumberOfSentReplyMessagesWithHttpInfo(string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentReplyMessages");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NumberOfMessagesResponse>("/v2/bot/message/delivery/reply", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentReplyMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent reply messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        public async System.Threading.Tasks.Task<NumberOfMessagesResponse> GetNumberOfSentReplyMessagesAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = await GetNumberOfSentReplyMessagesWithHttpInfoAsync(date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent reply messages
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the messages were sent  Format: &#x60;yyyyMMdd&#x60; (e.g. &#x60;20191231&#x60;) Timezone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse>> GetNumberOfSentReplyMessagesWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetNumberOfSentReplyMessages");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NumberOfMessagesResponse>("/v2/bot/message/delivery/reply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetNumberOfSentReplyMessages", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent LINE notification messages　
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <returns>NumberOfMessagesResponse</returns>
        public NumberOfMessagesResponse GetPNPMessageStatistics(string date)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = GetPNPMessageStatisticsWithHttpInfo(date);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent LINE notification messages　
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <returns>ApiResponse of NumberOfMessagesResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> GetPNPMessageStatisticsWithHttpInfo(string date)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetPNPMessageStatistics");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NumberOfMessagesResponse>("/v2/bot/message/delivery/pnp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPNPMessageStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of sent LINE notification messages　
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NumberOfMessagesResponse</returns>
        public async System.Threading.Tasks.Task<NumberOfMessagesResponse> GetPNPMessageStatisticsAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse> localVarResponse = await GetPNPMessageStatisticsWithHttpInfoAsync(date, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of sent LINE notification messages　
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date the message was sent  Format: &#x60;yyyyMMdd&#x60; (Example:&#x60;20211231&#x60;) Time zone: UTC+9 </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NumberOfMessagesResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<NumberOfMessagesResponse>> GetPNPMessageStatisticsWithHttpInfoAsync(string date, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'date' when calling MessagingApiApi->GetPNPMessageStatistics");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "date", date));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<NumberOfMessagesResponse>("/v2/bot/message/delivery/pnp", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPNPMessageStatistics", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>UserProfileResponse</returns>
        public UserProfileResponse GetProfile(string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<UserProfileResponse> localVarResponse = GetProfileWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of UserProfileResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<UserProfileResponse> GetProfileWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetProfile");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserProfileResponse>("/v2/bot/profile/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserProfileResponse</returns>
        public async System.Threading.Tasks.Task<UserProfileResponse> GetProfileAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<UserProfileResponse> localVarResponse = await GetProfileWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserProfileResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<UserProfileResponse>> GetProfileWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetProfile");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserProfileResponse>("/v2/bot/profile/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a rich menu via a rich menu ID.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>RichMenuResponse</returns>
        public RichMenuResponse GetRichMenu(string richMenuId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuResponse> localVarResponse = GetRichMenuWithHttpInfo(richMenuId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a rich menu via a rich menu ID.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of RichMenuResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuResponse> GetRichMenuWithHttpInfo(string richMenuId)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->GetRichMenu");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuResponse>("/v2/bot/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a rich menu via a rich menu ID.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuResponse> GetRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuResponse> localVarResponse = await GetRichMenuWithHttpInfoAsync(richMenuId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a rich menu via a rich menu ID.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuResponse>> GetRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->GetRichMenu");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuResponse>("/v2/bot/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu alias information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <returns>RichMenuAliasResponse</returns>
        public RichMenuAliasResponse GetRichMenuAlias(string richMenuAliasId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasResponse> localVarResponse = GetRichMenuAliasWithHttpInfo(richMenuAliasId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu alias information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <returns>ApiResponse of RichMenuAliasResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasResponse> GetRichMenuAliasWithHttpInfo(string richMenuAliasId)
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->GetRichMenuAlias");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuAliasResponse>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu alias information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuAliasResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuAliasResponse> GetRichMenuAliasAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasResponse> localVarResponse = await GetRichMenuAliasWithHttpInfoAsync(richMenuAliasId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu alias information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID whose information you want to obtain.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuAliasResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasResponse>> GetRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->GetRichMenuAlias");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuAliasResponse>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuAliasListResponse</returns>
        public RichMenuAliasListResponse GetRichMenuAliasList()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasListResponse> localVarResponse = GetRichMenuAliasListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuAliasListResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasListResponse> GetRichMenuAliasListWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuAliasListResponse>("/v2/bot/richmenu/alias/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuAliasList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuAliasListResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuAliasListResponse> GetRichMenuAliasListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasListResponse> localVarResponse = await GetRichMenuAliasListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuAliasListResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuAliasListResponse>> GetRichMenuAliasListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuAliasListResponse>("/v2/bot/richmenu/alias/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuAliasList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the status of Replace or unlink a linked rich menus in batches.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <returns>RichMenuBatchProgressResponse</returns>
        public RichMenuBatchProgressResponse GetRichMenuBatchProgress(string requestId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuBatchProgressResponse> localVarResponse = GetRichMenuBatchProgressWithHttpInfo(requestId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the status of Replace or unlink a linked rich menus in batches.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <returns>ApiResponse of RichMenuBatchProgressResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuBatchProgressResponse> GetRichMenuBatchProgressWithHttpInfo(string requestId)
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'requestId' when calling MessagingApiApi->GetRichMenuBatchProgress");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuBatchProgressResponse>("/v2/bot/richmenu/progress/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuBatchProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the status of Replace or unlink a linked rich menus in batches.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuBatchProgressResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuBatchProgressResponse> GetRichMenuBatchProgressAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuBatchProgressResponse> localVarResponse = await GetRichMenuBatchProgressWithHttpInfoAsync(requestId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the status of Replace or unlink a linked rich menus in batches.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestId">A request ID used to batch control the rich menu linked to the user. Each Messaging API request has a request ID.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuBatchProgressResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuBatchProgressResponse>> GetRichMenuBatchProgressWithHttpInfoAsync(string requestId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestId' is set
            if (requestId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'requestId' when calling MessagingApiApi->GetRichMenuBatchProgress");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "requestId", requestId));

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuBatchProgressResponse>("/v2/bot/richmenu/progress/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuBatchProgress", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu ID of user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>RichMenuIdResponse</returns>
        public RichMenuIdResponse GetRichMenuIdOfUser(string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = GetRichMenuIdOfUserWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu ID of user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>ApiResponse of RichMenuIdResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> GetRichMenuIdOfUserWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetRichMenuIdOfUser");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuIdResponse>("/v2/bot/user/{userId}/richmenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuIdOfUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu ID of user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuIdResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuIdResponse> GetRichMenuIdOfUserAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse> localVarResponse = await GetRichMenuIdOfUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu ID of user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuIdResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuIdResponse>> GetRichMenuIdOfUserWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetRichMenuIdOfUser");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuIdResponse>("/v2/bot/user/{userId}/richmenu", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuIdOfUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu list
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>RichMenuListResponse</returns>
        public RichMenuListResponse GetRichMenuList()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuListResponse> localVarResponse = GetRichMenuListWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu list
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of RichMenuListResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuListResponse> GetRichMenuListWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RichMenuListResponse>("/v2/bot/richmenu/list", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get rich menu list
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RichMenuListResponse</returns>
        public async System.Threading.Tasks.Task<RichMenuListResponse> GetRichMenuListAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuListResponse> localVarResponse = await GetRichMenuListWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get rich menu list
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RichMenuListResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RichMenuListResponse>> GetRichMenuListWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RichMenuListResponse>("/v2/bot/richmenu/list", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRichMenuList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of users in a multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>RoomMemberCountResponse</returns>
        public RoomMemberCountResponse GetRoomMemberCount(string roomId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RoomMemberCountResponse> localVarResponse = GetRoomMemberCountWithHttpInfo(roomId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of users in a multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>ApiResponse of RoomMemberCountResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RoomMemberCountResponse> GetRoomMemberCountWithHttpInfo(string roomId)
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMemberCount");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoomMemberCountResponse>("/v2/bot/room/{roomId}/members/count", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMemberCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get number of users in a multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoomMemberCountResponse</returns>
        public async System.Threading.Tasks.Task<RoomMemberCountResponse> GetRoomMemberCountAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RoomMemberCountResponse> localVarResponse = await GetRoomMemberCountWithHttpInfoAsync(roomId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get number of users in a multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoomMemberCountResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RoomMemberCountResponse>> GetRoomMemberCountWithHttpInfoAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMemberCount");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoomMemberCountResponse>("/v2/bot/room/{roomId}/members/count", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMemberCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get multi-person chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>RoomUserProfileResponse</returns>
        public RoomUserProfileResponse GetRoomMemberProfile(string roomId, string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RoomUserProfileResponse> localVarResponse = GetRoomMemberProfileWithHttpInfo(roomId, userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get multi-person chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of RoomUserProfileResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<RoomUserProfileResponse> GetRoomMemberProfileWithHttpInfo(string roomId, string userId)
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMemberProfile");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetRoomMemberProfile");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoomUserProfileResponse>("/v2/bot/room/{roomId}/member/{userId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMemberProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get multi-person chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoomUserProfileResponse</returns>
        public async System.Threading.Tasks.Task<RoomUserProfileResponse> GetRoomMemberProfileAsync(string roomId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<RoomUserProfileResponse> localVarResponse = await GetRoomMemberProfileWithHttpInfoAsync(roomId, userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get multi-person chat member profile
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="userId">User ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoomUserProfileResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<RoomUserProfileResponse>> GetRoomMemberProfileWithHttpInfoAsync(string roomId, string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMemberProfile");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->GetRoomMemberProfile");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<RoomUserProfileResponse>("/v2/bot/room/{roomId}/member/{userId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMemberProfile", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get multi-person chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>MembersIdsResponse</returns>
        public MembersIdsResponse GetRoomMembersIds(string roomId, string start = default(string))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> localVarResponse = GetRoomMembersIdsWithHttpInfo(roomId, start);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get multi-person chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <returns>ApiResponse of MembersIdsResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> GetRoomMembersIdsWithHttpInfo(string roomId, string start = default(string))
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMembersIds");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<MembersIdsResponse>("/v2/bot/room/{roomId}/members/ids", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMembersIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get multi-person chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MembersIdsResponse</returns>
        public async System.Threading.Tasks.Task<MembersIdsResponse> GetRoomMembersIdsAsync(string roomId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse> localVarResponse = await GetRoomMembersIdsWithHttpInfoAsync(roomId, start, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get multi-person chat member user IDs
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="start">Value of the continuation token found in the &#x60;next&#x60; property of the JSON object returned in the response. Include this parameter to get the next array of user IDs for the members of the group.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MembersIdsResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<MembersIdsResponse>> GetRoomMembersIdsWithHttpInfoAsync(string roomId, string start = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->GetRoomMembersIds");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<MembersIdsResponse>("/v2/bot/room/{roomId}/members/ids", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoomMembersIds", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get webhook endpoint information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetWebhookEndpointResponse</returns>
        public GetWebhookEndpointResponse GetWebhookEndpoint()
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetWebhookEndpointResponse> localVarResponse = GetWebhookEndpointWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get webhook endpoint information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetWebhookEndpointResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<GetWebhookEndpointResponse> GetWebhookEndpointWithHttpInfo()
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetWebhookEndpointResponse>("/v2/bot/channel/webhook/endpoint", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get webhook endpoint information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetWebhookEndpointResponse</returns>
        public async System.Threading.Tasks.Task<GetWebhookEndpointResponse> GetWebhookEndpointAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<GetWebhookEndpointResponse> localVarResponse = await GetWebhookEndpointWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get webhook endpoint information
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetWebhookEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<GetWebhookEndpointResponse>> GetWebhookEndpointWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<GetWebhookEndpointResponse>("/v2/bot/channel/webhook/endpoint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Issue link token
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <returns>IssueLinkTokenResponse</returns>
        public IssueLinkTokenResponse IssueLinkToken(string userId)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<IssueLinkTokenResponse> localVarResponse = IssueLinkTokenWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Issue link token
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <returns>ApiResponse of IssueLinkTokenResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<IssueLinkTokenResponse> IssueLinkTokenWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->IssueLinkToken");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<IssueLinkTokenResponse>("/v2/bot/user/{userId}/linkToken", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueLinkToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Issue link token
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of IssueLinkTokenResponse</returns>
        public async System.Threading.Tasks.Task<IssueLinkTokenResponse> IssueLinkTokenAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<IssueLinkTokenResponse> localVarResponse = await IssueLinkTokenWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Issue link token
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID for the LINE account to be linked. Found in the &#x60;source&#x60; object of account link event objects. Do not use the LINE ID used in LINE. </param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (IssueLinkTokenResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<IssueLinkTokenResponse>> IssueLinkTokenWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->IssueLinkToken");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<IssueLinkTokenResponse>("/v2/bot/user/{userId}/linkToken", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("IssueLinkToken", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Leave group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns></returns>
        public void LeaveGroup(string groupId)
        {
            LeaveGroupWithHttpInfo(groupId);
        }

        /// <summary>
        ///  Leave group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> LeaveGroupWithHttpInfo(string groupId)
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->LeaveGroup");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/group/{groupId}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Leave group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveGroupAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LeaveGroupWithHttpInfoAsync(groupId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Leave group chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> LeaveGroupWithHttpInfoAsync(string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'groupId' when calling MessagingApiApi->LeaveGroup");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/group/{groupId}/leave", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Leave multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns></returns>
        public void LeaveRoom(string roomId)
        {
            LeaveRoomWithHttpInfo(roomId);
        }

        /// <summary>
        ///  Leave multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> LeaveRoomWithHttpInfo(string roomId)
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->LeaveRoom");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/room/{roomId}/leave", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Leave multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LeaveRoomAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LeaveRoomWithHttpInfoAsync(roomId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Leave multi-person chat
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="roomId">Room ID</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> LeaveRoomWithHttpInfoAsync(string roomId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'roomId' is set
            if (roomId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'roomId' when calling MessagingApiApi->LeaveRoom");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("roomId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(roomId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/room/{roomId}/leave", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LeaveRoom", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Link rich menu to user.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        public void LinkRichMenuIdToUser(string userId, string richMenuId)
        {
            LinkRichMenuIdToUserWithHttpInfo(userId, richMenuId);
        }

        /// <summary>
        ///  Link rich menu to user.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> LinkRichMenuIdToUserWithHttpInfo(string userId, string richMenuId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->LinkRichMenuIdToUser");

            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->LinkRichMenuIdToUser");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/user/{userId}/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRichMenuIdToUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Link rich menu to user.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LinkRichMenuIdToUserAsync(string userId, string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LinkRichMenuIdToUserWithHttpInfoAsync(userId, richMenuId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Link rich menu to user.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> LinkRichMenuIdToUserWithHttpInfoAsync(string userId, string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->LinkRichMenuIdToUser");

            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->LinkRichMenuIdToUser");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter
            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/user/{userId}/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRichMenuIdToUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Link rich menu to multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <returns></returns>
        public void LinkRichMenuIdToUsers(RichMenuBulkLinkRequest richMenuBulkLinkRequest)
        {
            LinkRichMenuIdToUsersWithHttpInfo(richMenuBulkLinkRequest);
        }

        /// <summary>
        ///  Link rich menu to multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> LinkRichMenuIdToUsersWithHttpInfo(RichMenuBulkLinkRequest richMenuBulkLinkRequest)
        {
            // verify the required parameter 'richMenuBulkLinkRequest' is set
            if (richMenuBulkLinkRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBulkLinkRequest' when calling MessagingApiApi->LinkRichMenuIdToUsers");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBulkLinkRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/bulk/link", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRichMenuIdToUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Link rich menu to multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LinkRichMenuIdToUsersAsync(RichMenuBulkLinkRequest richMenuBulkLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await LinkRichMenuIdToUsersWithHttpInfoAsync(richMenuBulkLinkRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Link rich menu to multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkLinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> LinkRichMenuIdToUsersWithHttpInfoAsync(RichMenuBulkLinkRequest richMenuBulkLinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuBulkLinkRequest' is set
            if (richMenuBulkLinkRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBulkLinkRequest' when calling MessagingApiApi->LinkRichMenuIdToUsers");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBulkLinkRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/bulk/link", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("LinkRichMenuIdToUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mark messages from users as read
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <returns></returns>
        public void MarkMessagesAsRead(MarkMessagesAsReadRequest markMessagesAsReadRequest)
        {
            MarkMessagesAsReadWithHttpInfo(markMessagesAsReadRequest);
        }

        /// <summary>
        ///  Mark messages from users as read
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> MarkMessagesAsReadWithHttpInfo(MarkMessagesAsReadRequest markMessagesAsReadRequest)
        {
            // verify the required parameter 'markMessagesAsReadRequest' is set
            if (markMessagesAsReadRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'markMessagesAsReadRequest' when calling MessagingApiApi->MarkMessagesAsRead");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = markMessagesAsReadRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/markAsRead", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkMessagesAsRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Mark messages from users as read
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task MarkMessagesAsReadAsync(MarkMessagesAsReadRequest markMessagesAsReadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await MarkMessagesAsReadWithHttpInfoAsync(markMessagesAsReadRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Mark messages from users as read
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="markMessagesAsReadRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> MarkMessagesAsReadWithHttpInfoAsync(MarkMessagesAsReadRequest markMessagesAsReadRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'markMessagesAsReadRequest' is set
            if (markMessagesAsReadRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'markMessagesAsReadRequest' when calling MessagingApiApi->MarkMessagesAsRead");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = markMessagesAsReadRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/markAsRead", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("MarkMessagesAsRead", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        public Object Multicast(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = MulticastWithHttpInfo(multicastRequest, xLineRetryKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> MulticastWithHttpInfo(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            // verify the required parameter 'multicastRequest' is set
            if (multicastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'multicastRequest' when calling MessagingApiApi->Multicast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = multicastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/multicast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Multicast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> MulticastAsync(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = await MulticastWithHttpInfoAsync(multicastRequest, xLineRetryKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  An API that efficiently sends the same message to multiple user IDs. You can&#39;t send messages to group chats or multi-person chats.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="multicastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> MulticastWithHttpInfoAsync(MulticastRequest multicastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'multicastRequest' is set
            if (multicastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'multicastRequest' when calling MessagingApiApi->Multicast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = multicastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/multicast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Multicast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>Object</returns>
        public Object Narrowcast(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = NarrowcastWithHttpInfo(narrowcastRequest, xLineRetryKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of Object</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> NarrowcastWithHttpInfo(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?))
        {
            // verify the required parameter 'narrowcastRequest' is set
            if (narrowcastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'narrowcastRequest' when calling MessagingApiApi->Narrowcast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = narrowcastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/narrowcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Narrowcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> NarrowcastAsync(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = await NarrowcastWithHttpInfoAsync(narrowcastRequest, xLineRetryKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="narrowcastRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> NarrowcastWithHttpInfoAsync(NarrowcastRequest narrowcastRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'narrowcastRequest' is set
            if (narrowcastRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'narrowcastRequest' when calling MessagingApiApi->Narrowcast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = narrowcastRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/narrowcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Narrowcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a message to a user, group chat, or multi-person chat at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>PushMessageResponse</returns>
        public PushMessageResponse PushMessage(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<PushMessageResponse> localVarResponse = PushMessageWithHttpInfo(pushMessageRequest, xLineRetryKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a message to a user, group chat, or multi-person chat at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <returns>ApiResponse of PushMessageResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<PushMessageResponse> PushMessageWithHttpInfo(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?))
        {
            // verify the required parameter 'pushMessageRequest' is set
            if (pushMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'pushMessageRequest' when calling MessagingApiApi->PushMessage");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = pushMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PushMessageResponse>("/v2/bot/message/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PushMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Sends a message to a user, group chat, or multi-person chat at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PushMessageResponse</returns>
        public async System.Threading.Tasks.Task<PushMessageResponse> PushMessageAsync(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<PushMessageResponse> localVarResponse = await PushMessageWithHttpInfoAsync(pushMessageRequest, xLineRetryKey, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Sends a message to a user, group chat, or multi-person chat at any time.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pushMessageRequest"></param>
        /// <param name="xLineRetryKey">Retry key. Specifies the UUID in hexadecimal format (e.g., &#x60;123e4567-e89b-12d3-a456-426614174000&#x60;) generated by any method. The retry key isn&#39;t generated by LINE. Each developer must generate their own retry key.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PushMessageResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<PushMessageResponse>> PushMessageWithHttpInfoAsync(PushMessageRequest pushMessageRequest, Guid? xLineRetryKey = default(Guid?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pushMessageRequest' is set
            if (pushMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'pushMessageRequest' when calling MessagingApiApi->PushMessage");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineRetryKey != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Retry-Key", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineRetryKey)); // header parameter
            }
            localVarRequestOptions.Data = pushMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<PushMessageResponse>("/v2/bot/message/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PushMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send LINE notification message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <returns></returns>
        public void PushMessagesByPhone(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string))
        {
            PushMessagesByPhoneWithHttpInfo(pnpMessagesRequest, xLineDeliveryTag);
        }

        /// <summary>
        ///  Send LINE notification message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> PushMessagesByPhoneWithHttpInfo(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string))
        {
            // verify the required parameter 'pnpMessagesRequest' is set
            if (pnpMessagesRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'pnpMessagesRequest' when calling MessagingApiApi->PushMessagesByPhone");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineDeliveryTag != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Delivery-Tag", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineDeliveryTag)); // header parameter
            }
            localVarRequestOptions.Data = pnpMessagesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/bot/pnp/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PushMessagesByPhone", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send LINE notification message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PushMessagesByPhoneAsync(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PushMessagesByPhoneWithHttpInfoAsync(pnpMessagesRequest, xLineDeliveryTag, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Send LINE notification message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pnpMessagesRequest"></param>
        /// <param name="xLineDeliveryTag">String returned in the delivery.data property of the delivery completion event via Webhook. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> PushMessagesByPhoneWithHttpInfoAsync(PnpMessagesRequest pnpMessagesRequest, string xLineDeliveryTag = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'pnpMessagesRequest' is set
            if (pnpMessagesRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'pnpMessagesRequest' when calling MessagingApiApi->PushMessagesByPhone");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (xLineDeliveryTag != null)
            {
                localVarRequestOptions.HeaderParameters.Add("X-Line-Delivery-Tag", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(xLineDeliveryTag)); // header parameter
            }
            localVarRequestOptions.Data = pnpMessagesRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/bot/pnp/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PushMessagesByPhone", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <returns>ReplyMessageResponse</returns>
        public ReplyMessageResponse ReplyMessage(ReplyMessageRequest replyMessageRequest)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<ReplyMessageResponse> localVarResponse = ReplyMessageWithHttpInfo(replyMessageRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <returns>ApiResponse of ReplyMessageResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<ReplyMessageResponse> ReplyMessageWithHttpInfo(ReplyMessageRequest replyMessageRequest)
        {
            // verify the required parameter 'replyMessageRequest' is set
            if (replyMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'replyMessageRequest' when calling MessagingApiApi->ReplyMessage");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = replyMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ReplyMessageResponse>("/v2/bot/message/reply", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Send reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ReplyMessageResponse</returns>
        public async System.Threading.Tasks.Task<ReplyMessageResponse> ReplyMessageAsync(ReplyMessageRequest replyMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<ReplyMessageResponse> localVarResponse = await ReplyMessageWithHttpInfoAsync(replyMessageRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Send reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="replyMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ReplyMessageResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<ReplyMessageResponse>> ReplyMessageWithHttpInfoAsync(ReplyMessageRequest replyMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'replyMessageRequest' is set
            if (replyMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'replyMessageRequest' when calling MessagingApiApi->ReplyMessage");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = replyMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<ReplyMessageResponse>("/v2/bot/message/reply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ReplyMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns></returns>
        public void RichMenuBatch(RichMenuBatchRequest richMenuBatchRequest)
        {
            RichMenuBatchWithHttpInfo(richMenuBatchRequest);
        }

        /// <summary>
        ///  You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> RichMenuBatchWithHttpInfo(RichMenuBatchRequest richMenuBatchRequest)
        {
            // verify the required parameter 'richMenuBatchRequest' is set
            if (richMenuBatchRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBatchRequest' when calling MessagingApiApi->RichMenuBatch");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBatchRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RichMenuBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RichMenuBatchAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await RichMenuBatchWithHttpInfoAsync(richMenuBatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  You can use this endpoint to batch control the rich menu linked to the users using the endpoint such as Link rich menu to user. The following operations are available:  1. Replace a rich menu with another rich menu for all users linked to a specific rich menu 2. Unlink a rich menu for all users linked to a specific rich menu 3. Unlink a rich menu for all users linked the rich menu 
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> RichMenuBatchWithHttpInfoAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuBatchRequest' is set
            if (richMenuBatchRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBatchRequest' when calling MessagingApiApi->RichMenuBatch");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBatchRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RichMenuBatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns></returns>
        public void SetDefaultRichMenu(string richMenuId)
        {
            SetDefaultRichMenuWithHttpInfo(richMenuId);
        }

        /// <summary>
        ///  Set default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> SetDefaultRichMenuWithHttpInfo(string richMenuId)
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->SetDefaultRichMenu");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/user/all/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDefaultRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetDefaultRichMenuAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetDefaultRichMenuWithHttpInfoAsync(richMenuId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Set default rich menu
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuId">ID of a rich menu</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> SetDefaultRichMenuWithHttpInfoAsync(string richMenuId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuId' is set
            if (richMenuId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuId' when calling MessagingApiApi->SetDefaultRichMenu");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/user/all/richmenu/{richMenuId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetDefaultRichMenu", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set webhook endpoint URL
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <returns></returns>
        public void SetWebhookEndpoint(SetWebhookEndpointRequest setWebhookEndpointRequest)
        {
            SetWebhookEndpointWithHttpInfo(setWebhookEndpointRequest);
        }

        /// <summary>
        ///  Set webhook endpoint URL
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> SetWebhookEndpointWithHttpInfo(SetWebhookEndpointRequest setWebhookEndpointRequest)
        {
            // verify the required parameter 'setWebhookEndpointRequest' is set
            if (setWebhookEndpointRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'setWebhookEndpointRequest' when calling MessagingApiApi->SetWebhookEndpoint");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setWebhookEndpointRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/bot/channel/webhook/endpoint", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Set webhook endpoint URL
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SetWebhookEndpointAsync(SetWebhookEndpointRequest setWebhookEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SetWebhookEndpointWithHttpInfoAsync(setWebhookEndpointRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Set webhook endpoint URL
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="setWebhookEndpointRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> SetWebhookEndpointWithHttpInfoAsync(SetWebhookEndpointRequest setWebhookEndpointRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'setWebhookEndpointRequest' is set
            if (setWebhookEndpointRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'setWebhookEndpointRequest' when calling MessagingApiApi->SetWebhookEndpoint");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = setWebhookEndpointRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/bot/channel/webhook/endpoint", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SetWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <returns>Object</returns>
        public Object ShowLoadingAnimation(ShowLoadingAnimationRequest showLoadingAnimationRequest)
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = ShowLoadingAnimationWithHttpInfo(showLoadingAnimationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <returns>ApiResponse of Object</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ShowLoadingAnimationWithHttpInfo(ShowLoadingAnimationRequest showLoadingAnimationRequest)
        {
            // verify the required parameter 'showLoadingAnimationRequest' is set
            if (showLoadingAnimationRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'showLoadingAnimationRequest' when calling MessagingApiApi->ShowLoadingAnimation");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = showLoadingAnimationRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/chat/loading/start", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowLoadingAnimation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> ShowLoadingAnimationAsync(ShowLoadingAnimationRequest showLoadingAnimationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<Object> localVarResponse = await ShowLoadingAnimationWithHttpInfoAsync(showLoadingAnimationRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Display a loading animation in one-on-one chats between users and LINE Official Accounts.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="showLoadingAnimationRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ShowLoadingAnimationWithHttpInfoAsync(ShowLoadingAnimationRequest showLoadingAnimationRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'showLoadingAnimationRequest' is set
            if (showLoadingAnimationRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'showLoadingAnimationRequest' when calling MessagingApiApi->ShowLoadingAnimation");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = showLoadingAnimationRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/chat/loading/start", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShowLoadingAnimation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Test webhook endpoint
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <returns>TestWebhookEndpointResponse</returns>
        public TestWebhookEndpointResponse TestWebhookEndpoint(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<TestWebhookEndpointResponse> localVarResponse = TestWebhookEndpointWithHttpInfo(testWebhookEndpointRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Test webhook endpoint
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <returns>ApiResponse of TestWebhookEndpointResponse</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<TestWebhookEndpointResponse> TestWebhookEndpointWithHttpInfo(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest))
        {
            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testWebhookEndpointRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TestWebhookEndpointResponse>("/v2/bot/channel/webhook/test", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Test webhook endpoint
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TestWebhookEndpointResponse</returns>
        public async System.Threading.Tasks.Task<TestWebhookEndpointResponse> TestWebhookEndpointAsync(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            LineOpenApi.MessagingApi.Client.ApiResponse<TestWebhookEndpointResponse> localVarResponse = await TestWebhookEndpointWithHttpInfoAsync(testWebhookEndpointRequest, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Test webhook endpoint
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="testWebhookEndpointRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TestWebhookEndpointResponse)</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<TestWebhookEndpointResponse>> TestWebhookEndpointWithHttpInfoAsync(TestWebhookEndpointRequest testWebhookEndpointRequest = default(TestWebhookEndpointRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = testWebhookEndpointRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<TestWebhookEndpointResponse>("/v2/bot/channel/webhook/test", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestWebhookEndpoint", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unlink rich menu from user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns></returns>
        public void UnlinkRichMenuIdFromUser(string userId)
        {
            UnlinkRichMenuIdFromUserWithHttpInfo(userId);
        }

        /// <summary>
        ///  Unlink rich menu from user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> UnlinkRichMenuIdFromUserWithHttpInfo(string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->UnlinkRichMenuIdFromUser");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/bot/user/{userId}/richmenu", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkRichMenuIdFromUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unlink rich menu from user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkRichMenuIdFromUserAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnlinkRichMenuIdFromUserWithHttpInfoAsync(userId, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Unlink rich menu from user
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> UnlinkRichMenuIdFromUserWithHttpInfoAsync(string userId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'userId' when calling MessagingApiApi->UnlinkRichMenuIdFromUser");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("userId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(userId)); // path parameter

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/bot/user/{userId}/richmenu", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkRichMenuIdFromUser", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unlink rich menus from multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <returns></returns>
        public void UnlinkRichMenuIdFromUsers(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest)
        {
            UnlinkRichMenuIdFromUsersWithHttpInfo(richMenuBulkUnlinkRequest);
        }

        /// <summary>
        ///  Unlink rich menus from multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> UnlinkRichMenuIdFromUsersWithHttpInfo(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest)
        {
            // verify the required parameter 'richMenuBulkUnlinkRequest' is set
            if (richMenuBulkUnlinkRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBulkUnlinkRequest' when calling MessagingApiApi->UnlinkRichMenuIdFromUsers");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBulkUnlinkRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/bulk/unlink", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkRichMenuIdFromUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unlink rich menus from multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnlinkRichMenuIdFromUsersAsync(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnlinkRichMenuIdFromUsersWithHttpInfoAsync(richMenuBulkUnlinkRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Unlink rich menus from multiple users
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBulkUnlinkRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> UnlinkRichMenuIdFromUsersWithHttpInfoAsync(RichMenuBulkUnlinkRequest richMenuBulkUnlinkRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuBulkUnlinkRequest' is set
            if (richMenuBulkUnlinkRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBulkUnlinkRequest' when calling MessagingApiApi->UnlinkRichMenuIdFromUsers");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBulkUnlinkRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/bulk/unlink", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnlinkRichMenuIdFromUsers", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <returns></returns>
        public void UpdateRichMenuAlias(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest)
        {
            UpdateRichMenuAliasWithHttpInfo(richMenuAliasId, updateRichMenuAliasRequest);
        }

        /// <summary>
        ///  Update rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> UpdateRichMenuAliasWithHttpInfo(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest)
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->UpdateRichMenuAlias");

            // verify the required parameter 'updateRichMenuAliasRequest' is set
            if (updateRichMenuAliasRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'updateRichMenuAliasRequest' when calling MessagingApiApi->UpdateRichMenuAlias");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter
            localVarRequestOptions.Data = updateRichMenuAliasRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Update rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRichMenuAliasAsync(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UpdateRichMenuAliasWithHttpInfoAsync(richMenuAliasId, updateRichMenuAliasRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Update rich menu alias
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuAliasId">The rich menu alias ID you want to update.</param>
        /// <param name="updateRichMenuAliasRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> UpdateRichMenuAliasWithHttpInfoAsync(string richMenuAliasId, UpdateRichMenuAliasRequest updateRichMenuAliasRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuAliasId' is set
            if (richMenuAliasId == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuAliasId' when calling MessagingApiApi->UpdateRichMenuAlias");

            // verify the required parameter 'updateRichMenuAliasRequest' is set
            if (updateRichMenuAliasRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'updateRichMenuAliasRequest' when calling MessagingApiApi->UpdateRichMenuAlias");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("richMenuAliasId", LineOpenApi.MessagingApi.Client.ClientUtils.ParameterToString(richMenuAliasId)); // path parameter
            localVarRequestOptions.Data = updateRichMenuAliasRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/alias/{richMenuAliasId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateRichMenuAlias", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a broadcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        public void ValidateBroadcast(ValidateMessageRequest validateMessageRequest)
        {
            ValidateBroadcastWithHttpInfo(validateMessageRequest);
        }

        /// <summary>
        ///  Validate message objects of a broadcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateBroadcastWithHttpInfo(ValidateMessageRequest validateMessageRequest)
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateBroadcast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/validate/broadcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateBroadcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a broadcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateBroadcastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateBroadcastWithHttpInfoAsync(validateMessageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate message objects of a broadcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateBroadcastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateBroadcast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/validate/broadcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateBroadcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a multicast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        public void ValidateMulticast(ValidateMessageRequest validateMessageRequest)
        {
            ValidateMulticastWithHttpInfo(validateMessageRequest);
        }

        /// <summary>
        ///  Validate message objects of a multicast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateMulticastWithHttpInfo(ValidateMessageRequest validateMessageRequest)
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateMulticast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/validate/multicast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateMulticast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a multicast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateMulticastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateMulticastWithHttpInfoAsync(validateMessageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate message objects of a multicast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateMulticastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateMulticast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/validate/multicast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateMulticast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        public void ValidateNarrowcast(ValidateMessageRequest validateMessageRequest)
        {
            ValidateNarrowcastWithHttpInfo(validateMessageRequest);
        }

        /// <summary>
        ///  Validate message objects of a narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateNarrowcastWithHttpInfo(ValidateMessageRequest validateMessageRequest)
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateNarrowcast");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/validate/narrowcast", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateNarrowcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateNarrowcastAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateNarrowcastWithHttpInfoAsync(validateMessageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate message objects of a narrowcast message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateNarrowcastWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateNarrowcast");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/validate/narrowcast", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateNarrowcast", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a push message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        public void ValidatePush(ValidateMessageRequest validateMessageRequest)
        {
            ValidatePushWithHttpInfo(validateMessageRequest);
        }

        /// <summary>
        ///  Validate message objects of a push message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidatePushWithHttpInfo(ValidateMessageRequest validateMessageRequest)
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidatePush");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/validate/push", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a push message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidatePushAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidatePushWithHttpInfoAsync(validateMessageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate message objects of a push message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidatePushWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidatePush");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/validate/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidatePush", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns></returns>
        public void ValidateReply(ValidateMessageRequest validateMessageRequest)
        {
            ValidateReplyWithHttpInfo(validateMessageRequest);
        }

        /// <summary>
        ///  Validate message objects of a reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateReplyWithHttpInfo(ValidateMessageRequest validateMessageRequest)
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateReply");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/message/validate/reply", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateReply", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate message objects of a reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateReplyAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateReplyWithHttpInfoAsync(validateMessageRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate message objects of a reply message
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateMessageRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateReplyWithHttpInfoAsync(ValidateMessageRequest validateMessageRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateMessageRequest' is set
            if (validateMessageRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'validateMessageRequest' when calling MessagingApiApi->ValidateReply");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = validateMessageRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/message/validate/reply", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateReply", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns></returns>
        public void ValidateRichMenuBatchRequest(RichMenuBatchRequest richMenuBatchRequest)
        {
            ValidateRichMenuBatchRequestWithHttpInfo(richMenuBatchRequest);
        }

        /// <summary>
        ///  Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateRichMenuBatchRequestWithHttpInfo(RichMenuBatchRequest richMenuBatchRequest)
        {
            // verify the required parameter 'richMenuBatchRequest' is set
            if (richMenuBatchRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBatchRequest' when calling MessagingApiApi->ValidateRichMenuBatchRequest");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBatchRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/validate/batch", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateRichMenuBatchRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateRichMenuBatchRequestAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateRichMenuBatchRequestWithHttpInfoAsync(richMenuBatchRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate a request body of the Replace or unlink the linked rich menus in batches endpoint.
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuBatchRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateRichMenuBatchRequestWithHttpInfoAsync(RichMenuBatchRequest richMenuBatchRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuBatchRequest' is set
            if (richMenuBatchRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuBatchRequest' when calling MessagingApiApi->ValidateRichMenuBatchRequest");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuBatchRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/validate/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateRichMenuBatchRequest", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate rich menu object
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns></returns>
        public void ValidateRichMenuObject(RichMenuRequest richMenuRequest)
        {
            ValidateRichMenuObjectWithHttpInfo(richMenuRequest);
        }

        /// <summary>
        ///  Validate rich menu object
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public LineOpenApi.MessagingApi.Client.ApiResponse<Object> ValidateRichMenuObjectWithHttpInfo(RichMenuRequest richMenuRequest)
        {
            // verify the required parameter 'richMenuRequest' is set
            if (richMenuRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuRequest' when calling MessagingApiApi->ValidateRichMenuObject");

            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/bot/richmenu/validate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateRichMenuObject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Validate rich menu object
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ValidateRichMenuObjectAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ValidateRichMenuObjectWithHttpInfoAsync(richMenuRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Validate rich menu object
        /// </summary>
        /// <exception cref="LineOpenApi.MessagingApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="richMenuRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<LineOpenApi.MessagingApi.Client.ApiResponse<Object>> ValidateRichMenuObjectWithHttpInfoAsync(RichMenuRequest richMenuRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'richMenuRequest' is set
            if (richMenuRequest == null)
                throw new LineOpenApi.MessagingApi.Client.ApiException(400, "Missing required parameter 'richMenuRequest' when calling MessagingApiApi->ValidateRichMenuObject");


            LineOpenApi.MessagingApi.Client.RequestOptions localVarRequestOptions = new LineOpenApi.MessagingApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };


            var localVarContentType = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = LineOpenApi.MessagingApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = richMenuRequest;

            // authentication (Bearer) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/bot/richmenu/validate", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateRichMenuObject", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
