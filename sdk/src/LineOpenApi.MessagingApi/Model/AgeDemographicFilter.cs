/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// AgeDemographicFilter
    /// </summary>
    [DataContract(Name = "AgeDemographicFilter")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class AgeDemographicFilter : DemographicFilter, IEquatable<AgeDemographicFilter>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Gte
        /// </summary>
        [DataMember(Name = "gte", EmitDefaultValue = false)]
        public AgeDemographic? Gte { get; set; }

        /// <summary>
        /// Gets or Sets Lt
        /// </summary>
        [DataMember(Name = "lt", EmitDefaultValue = false)]
        public AgeDemographic? Lt { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AgeDemographicFilter" /> class.
        /// </summary>
        /// <param name="gte">gte.</param>
        /// <param name="lt">lt.</param>
        /// <param name="type">Type of demographic filter (default to &quot;AgeDemographicFilter&quot;).</param>
        public AgeDemographicFilter(AgeDemographic? gte = default(AgeDemographic?), AgeDemographic? lt = default(AgeDemographic?), string type = @"AgeDemographicFilter") : base(type)
        {
            this.Gte = gte;
            this.Lt = lt;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AgeDemographicFilter {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Gte: ").Append(Gte).Append("\n");
            sb.Append("  Lt: ").Append(Lt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AgeDemographicFilter);
        }

        /// <summary>
        /// Returns true if AgeDemographicFilter instances are equal
        /// </summary>
        /// <param name="input">Instance of AgeDemographicFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AgeDemographicFilter input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Gte == input.Gte ||
                    this.Gte.Equals(input.Gte)
                ) && base.Equals(input) && 
                (
                    this.Lt == input.Lt ||
                    this.Lt.Equals(input.Lt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Gte.GetHashCode();
                hashCode = (hashCode * 59) + this.Lt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
