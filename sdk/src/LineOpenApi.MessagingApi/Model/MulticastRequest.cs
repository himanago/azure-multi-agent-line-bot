/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// MulticastRequest
    /// </summary>
    [DataContract(Name = "MulticastRequest")]
    public partial class MulticastRequest : IEquatable<MulticastRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MulticastRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MulticastRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MulticastRequest" /> class.
        /// </summary>
        /// <param name="messages">Messages to send (required).</param>
        /// <param name="to">Array of user IDs. Use userId values which are returned in webhook event objects. Do not use LINE IDs found on LINE. (required).</param>
        /// <param name="notificationDisabled">&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false.  (default to false).</param>
        /// <param name="customAggregationUnits">Name of aggregation unit. Case-sensitive..</param>
        public MulticastRequest(List<Message> messages = default(List<Message>), List<string> to = default(List<string>), bool notificationDisabled = false, List<string> customAggregationUnits = default(List<string>))
        {
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for MulticastRequest and cannot be null");
            }
            this.Messages = messages;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for MulticastRequest and cannot be null");
            }
            this.To = to;
            this.NotificationDisabled = notificationDisabled;
            this.CustomAggregationUnits = customAggregationUnits;
        }

        /// <summary>
        /// Messages to send
        /// </summary>
        /// <value>Messages to send</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Array of user IDs. Use userId values which are returned in webhook event objects. Do not use LINE IDs found on LINE.
        /// </summary>
        /// <value>Array of user IDs. Use userId values which are returned in webhook event objects. Do not use LINE IDs found on LINE.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public List<string> To { get; set; }

        /// <summary>
        /// &#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. 
        /// </summary>
        /// <value>&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. </value>
        [DataMember(Name = "notificationDisabled", EmitDefaultValue = true)]
        public bool NotificationDisabled { get; set; }

        /// <summary>
        /// Name of aggregation unit. Case-sensitive.
        /// </summary>
        /// <value>Name of aggregation unit. Case-sensitive.</value>
        [DataMember(Name = "customAggregationUnits", EmitDefaultValue = false)]
        public List<string> CustomAggregationUnits { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MulticastRequest {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  NotificationDisabled: ").Append(NotificationDisabled).Append("\n");
            sb.Append("  CustomAggregationUnits: ").Append(CustomAggregationUnits).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MulticastRequest);
        }

        /// <summary>
        /// Returns true if MulticastRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of MulticastRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MulticastRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.To == input.To ||
                    this.To != null &&
                    input.To != null &&
                    this.To.SequenceEqual(input.To)
                ) && 
                (
                    this.NotificationDisabled == input.NotificationDisabled ||
                    this.NotificationDisabled.Equals(input.NotificationDisabled)
                ) && 
                (
                    this.CustomAggregationUnits == input.CustomAggregationUnits ||
                    this.CustomAggregationUnits != null &&
                    input.CustomAggregationUnits != null &&
                    this.CustomAggregationUnits.SequenceEqual(input.CustomAggregationUnits)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Messages != null)
                {
                    hashCode = (hashCode * 59) + this.Messages.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotificationDisabled.GetHashCode();
                if (this.CustomAggregationUnits != null)
                {
                    hashCode = (hashCode * 59) + this.CustomAggregationUnits.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
