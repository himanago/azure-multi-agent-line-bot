/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexVideo
    /// </summary>
    [DataContract(Name = "FlexVideo")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexVideo : FlexComponent, IEquatable<FlexVideo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexVideo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexVideo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexVideo" /> class.
        /// </summary>
        /// <param name="url">url (required).</param>
        /// <param name="previewUrl">previewUrl (required).</param>
        /// <param name="altContent">altContent (required).</param>
        /// <param name="aspectRatio">aspectRatio.</param>
        /// <param name="action">action.</param>
        /// <param name="type">type (required) (default to &quot;FlexVideo&quot;).</param>
        public FlexVideo(string url = default(string), string previewUrl = default(string), FlexComponent altContent = default(FlexComponent), string aspectRatio = default(string), Action action = default(Action), string type = @"FlexVideo") : base(type)
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new ArgumentNullException("url is a required property for FlexVideo and cannot be null");
            }
            this.Url = url;
            // to ensure "previewUrl" is required (not null)
            if (previewUrl == null)
            {
                throw new ArgumentNullException("previewUrl is a required property for FlexVideo and cannot be null");
            }
            this.PreviewUrl = previewUrl;
            // to ensure "altContent" is required (not null)
            if (altContent == null)
            {
                throw new ArgumentNullException("altContent is a required property for FlexVideo and cannot be null");
            }
            this.AltContent = altContent;
            this.AspectRatio = aspectRatio;
            this.Action = action;
        }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets PreviewUrl
        /// </summary>
        [DataMember(Name = "previewUrl", IsRequired = true, EmitDefaultValue = true)]
        public string PreviewUrl { get; set; }

        /// <summary>
        /// Gets or Sets AltContent
        /// </summary>
        [DataMember(Name = "altContent", IsRequired = true, EmitDefaultValue = true)]
        public FlexComponent AltContent { get; set; }

        /// <summary>
        /// Gets or Sets AspectRatio
        /// </summary>
        [DataMember(Name = "aspectRatio", EmitDefaultValue = false)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexVideo {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  PreviewUrl: ").Append(PreviewUrl).Append("\n");
            sb.Append("  AltContent: ").Append(AltContent).Append("\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexVideo);
        }

        /// <summary>
        /// Returns true if FlexVideo instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexVideo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexVideo input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && base.Equals(input) && 
                (
                    this.PreviewUrl == input.PreviewUrl ||
                    (this.PreviewUrl != null &&
                    this.PreviewUrl.Equals(input.PreviewUrl))
                ) && base.Equals(input) && 
                (
                    this.AltContent == input.AltContent ||
                    (this.AltContent != null &&
                    this.AltContent.Equals(input.AltContent))
                ) && base.Equals(input) && 
                (
                    this.AspectRatio == input.AspectRatio ||
                    (this.AspectRatio != null &&
                    this.AspectRatio.Equals(input.AspectRatio))
                ) && base.Equals(input) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Url != null)
                {
                    hashCode = (hashCode * 59) + this.Url.GetHashCode();
                }
                if (this.PreviewUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PreviewUrl.GetHashCode();
                }
                if (this.AltContent != null)
                {
                    hashCode = (hashCode * 59) + this.AltContent.GetHashCode();
                }
                if (this.AspectRatio != null)
                {
                    hashCode = (hashCode * 59) + this.AspectRatio.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
