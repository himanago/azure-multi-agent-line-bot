/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// ShowLoadingAnimationRequest
    /// </summary>
    [DataContract(Name = "ShowLoadingAnimationRequest")]
    public partial class ShowLoadingAnimationRequest : IEquatable<ShowLoadingAnimationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowLoadingAnimationRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShowLoadingAnimationRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowLoadingAnimationRequest" /> class.
        /// </summary>
        /// <param name="chatId">User ID of the target user for whom the loading animation is to be displayed. (required).</param>
        /// <param name="loadingSeconds">The number of seconds to display the loading indicator. It must be a multiple of 5. The maximum value is 60 seconds. .</param>
        public ShowLoadingAnimationRequest(string chatId = default(string), int loadingSeconds = default(int))
        {
            // to ensure "chatId" is required (not null)
            if (chatId == null)
            {
                throw new ArgumentNullException("chatId is a required property for ShowLoadingAnimationRequest and cannot be null");
            }
            this.ChatId = chatId;
            this.LoadingSeconds = loadingSeconds;
        }

        /// <summary>
        /// User ID of the target user for whom the loading animation is to be displayed.
        /// </summary>
        /// <value>User ID of the target user for whom the loading animation is to be displayed.</value>
        [DataMember(Name = "chatId", IsRequired = true, EmitDefaultValue = true)]
        public string ChatId { get; set; }

        /// <summary>
        /// The number of seconds to display the loading indicator. It must be a multiple of 5. The maximum value is 60 seconds. 
        /// </summary>
        /// <value>The number of seconds to display the loading indicator. It must be a multiple of 5. The maximum value is 60 seconds. </value>
        [DataMember(Name = "loadingSeconds", EmitDefaultValue = false)]
        public int LoadingSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowLoadingAnimationRequest {\n");
            sb.Append("  ChatId: ").Append(ChatId).Append("\n");
            sb.Append("  LoadingSeconds: ").Append(LoadingSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShowLoadingAnimationRequest);
        }

        /// <summary>
        /// Returns true if ShowLoadingAnimationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ShowLoadingAnimationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShowLoadingAnimationRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ChatId == input.ChatId ||
                    (this.ChatId != null &&
                    this.ChatId.Equals(input.ChatId))
                ) && 
                (
                    this.LoadingSeconds == input.LoadingSeconds ||
                    this.LoadingSeconds.Equals(input.LoadingSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChatId != null)
                {
                    hashCode = (hashCode * 59) + this.ChatId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LoadingSeconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // LoadingSeconds (int) maximum
            if (this.LoadingSeconds > (int)60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadingSeconds, must be a value less than or equal to 60.", new [] { "LoadingSeconds" });
            }

            // LoadingSeconds (int) minimum
            if (this.LoadingSeconds < (int)5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoadingSeconds, must be a value greater than or equal to 5.", new [] { "LoadingSeconds" });
            }

            yield break;
        }
    }

}
