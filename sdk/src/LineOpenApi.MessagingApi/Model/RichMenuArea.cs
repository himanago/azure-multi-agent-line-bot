/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Rich menu area
    /// </summary>
    [DataContract(Name = "RichMenuArea")]
    public partial class RichMenuArea : IEquatable<RichMenuArea>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuArea" /> class.
        /// </summary>
        /// <param name="bounds">bounds.</param>
        /// <param name="action">action.</param>
        public RichMenuArea(RichMenuBounds bounds = default(RichMenuBounds), Action action = default(Action))
        {
            this.Bounds = bounds;
            this.Action = action;
        }

        /// <summary>
        /// Gets or Sets Bounds
        /// </summary>
        [DataMember(Name = "bounds", EmitDefaultValue = false)]
        public RichMenuBounds Bounds { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuArea {\n");
            sb.Append("  Bounds: ").Append(Bounds).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuArea);
        }

        /// <summary>
        /// Returns true if RichMenuArea instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuArea to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuArea input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bounds == input.Bounds ||
                    (this.Bounds != null &&
                    this.Bounds.Equals(input.Bounds))
                ) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bounds != null)
                {
                    hashCode = (hashCode * 59) + this.Bounds.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
