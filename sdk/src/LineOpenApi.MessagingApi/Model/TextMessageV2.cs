/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// TextMessageV2
    /// </summary>
    [DataContract(Name = "TextMessageV2")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class TextMessageV2 : Message, IEquatable<TextMessageV2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextMessageV2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TextMessageV2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TextMessageV2" /> class.
        /// </summary>
        /// <param name="text">text (required).</param>
        /// <param name="substitution">A mapping that specifies substitutions for parts enclosed in {} within the &#x60;text&#x60; field..</param>
        /// <param name="quoteToken">Quote token of the message you want to quote..</param>
        /// <param name="type">Type of message (required) (default to &quot;TextMessageV2&quot;).</param>
        /// <param name="quickReply">quickReply.</param>
        /// <param name="sender">sender.</param>
        public TextMessageV2(string text = default(string), Dictionary<string, SubstitutionObject> substitution = default(Dictionary<string, SubstitutionObject>), string quoteToken = default(string), string type = @"TextMessageV2", QuickReply quickReply = default(QuickReply), Sender sender = default(Sender)) : base(type, quickReply, sender)
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new ArgumentNullException("text is a required property for TextMessageV2 and cannot be null");
            }
            this.Text = text;
            this.Substitution = substitution;
            this.QuoteToken = quoteToken;
        }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name = "text", IsRequired = true, EmitDefaultValue = true)]
        public string Text { get; set; }

        /// <summary>
        /// A mapping that specifies substitutions for parts enclosed in {} within the &#x60;text&#x60; field.
        /// </summary>
        /// <value>A mapping that specifies substitutions for parts enclosed in {} within the &#x60;text&#x60; field.</value>
        [DataMember(Name = "substitution", EmitDefaultValue = false)]
        public Dictionary<string, SubstitutionObject> Substitution { get; set; }

        /// <summary>
        /// Quote token of the message you want to quote.
        /// </summary>
        /// <value>Quote token of the message you want to quote.</value>
        [DataMember(Name = "quoteToken", EmitDefaultValue = false)]
        public string QuoteToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TextMessageV2 {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Substitution: ").Append(Substitution).Append("\n");
            sb.Append("  QuoteToken: ").Append(QuoteToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextMessageV2);
        }

        /// <summary>
        /// Returns true if TextMessageV2 instances are equal
        /// </summary>
        /// <param name="input">Instance of TextMessageV2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextMessageV2 input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && base.Equals(input) && 
                (
                    this.Substitution == input.Substitution ||
                    this.Substitution != null &&
                    input.Substitution != null &&
                    this.Substitution.SequenceEqual(input.Substitution)
                ) && base.Equals(input) && 
                (
                    this.QuoteToken == input.QuoteToken ||
                    (this.QuoteToken != null &&
                    this.QuoteToken.Equals(input.QuoteToken))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Text != null)
                {
                    hashCode = (hashCode * 59) + this.Text.GetHashCode();
                }
                if (this.Substitution != null)
                {
                    hashCode = (hashCode * 59) + this.Substitution.GetHashCode();
                }
                if (this.QuoteToken != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteToken.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
