/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Change icon and display name
    /// </summary>
    [DataContract(Name = "Sender")]
    public partial class Sender : IEquatable<Sender>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Sender" /> class.
        /// </summary>
        /// <param name="name">Display name. Certain words such as &#x60;LINE&#x60; may not be used..</param>
        /// <param name="iconUrl">URL of the image to display as an icon when sending a message.</param>
        public Sender(string name = default(string), string iconUrl = default(string))
        {
            this.Name = name;
            this.IconUrl = iconUrl;
        }

        /// <summary>
        /// Display name. Certain words such as &#x60;LINE&#x60; may not be used.
        /// </summary>
        /// <value>Display name. Certain words such as &#x60;LINE&#x60; may not be used.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// URL of the image to display as an icon when sending a message
        /// </summary>
        /// <value>URL of the image to display as an icon when sending a message</value>
        [DataMember(Name = "iconUrl", EmitDefaultValue = false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Sender {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Sender);
        }

        /// <summary>
        /// Returns true if Sender instances are equal
        /// </summary>
        /// <param name="input">Instance of Sender to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Sender input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.IconUrl != null)
                {
                    hashCode = (hashCode * 59) + this.IconUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 20.", new [] { "Name" });
            }

            // IconUrl (string) maxLength
            if (this.IconUrl != null && this.IconUrl.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IconUrl, length must be less than 2000.", new [] { "IconUrl" });
            }

            yield break;
        }
    }

}
