/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexBubbleStyles
    /// </summary>
    [DataContract(Name = "FlexBubbleStyles")]
    public partial class FlexBubbleStyles : IEquatable<FlexBubbleStyles>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBubbleStyles" /> class.
        /// </summary>
        /// <param name="header">header.</param>
        /// <param name="hero">hero.</param>
        /// <param name="body">body.</param>
        /// <param name="footer">footer.</param>
        public FlexBubbleStyles(FlexBlockStyle header = default(FlexBlockStyle), FlexBlockStyle hero = default(FlexBlockStyle), FlexBlockStyle body = default(FlexBlockStyle), FlexBlockStyle footer = default(FlexBlockStyle))
        {
            this.Header = header;
            this.Hero = hero;
            this.Body = body;
            this.Footer = footer;
        }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = false)]
        public FlexBlockStyle Header { get; set; }

        /// <summary>
        /// Gets or Sets Hero
        /// </summary>
        [DataMember(Name = "hero", EmitDefaultValue = false)]
        public FlexBlockStyle Hero { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public FlexBlockStyle Body { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name = "footer", EmitDefaultValue = false)]
        public FlexBlockStyle Footer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexBubbleStyles {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Hero: ").Append(Hero).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexBubbleStyles);
        }

        /// <summary>
        /// Returns true if FlexBubbleStyles instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexBubbleStyles to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBubbleStyles input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.Hero == input.Hero ||
                    (this.Hero != null &&
                    this.Hero.Equals(input.Hero))
                ) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.Hero != null)
                {
                    hashCode = (hashCode * 59) + this.Hero.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.Footer != null)
                {
                    hashCode = (hashCode * 59) + this.Footer.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
