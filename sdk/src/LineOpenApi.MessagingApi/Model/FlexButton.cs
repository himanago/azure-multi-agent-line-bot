/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexButton
    /// </summary>
    [DataContract(Name = "FlexButton")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexButton : FlexComponent, IEquatable<FlexButton>, IValidatableObject
    {
        /// <summary>
        /// Defines Style
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StyleEnum
        {
            /// <summary>
            /// Enum Primary for value: primary
            /// </summary>
            [EnumMember(Value = "primary")]
            Primary = 1,

            /// <summary>
            /// Enum Secondary for value: secondary
            /// </summary>
            [EnumMember(Value = "secondary")]
            Secondary = 2,

            /// <summary>
            /// Enum Link for value: link
            /// </summary>
            [EnumMember(Value = "link")]
            Link = 3
        }


        /// <summary>
        /// Gets or Sets Style
        /// </summary>
        [DataMember(Name = "style", EmitDefaultValue = false)]
        public StyleEnum? Style { get; set; }
        /// <summary>
        /// Defines Gravity
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GravityEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 2,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 3
        }


        /// <summary>
        /// Gets or Sets Gravity
        /// </summary>
        [DataMember(Name = "gravity", EmitDefaultValue = false)]
        public GravityEnum? Gravity { get; set; }
        /// <summary>
        /// Defines Position
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum Relative for value: relative
            /// </summary>
            [EnumMember(Value = "relative")]
            Relative = 1,

            /// <summary>
            /// Enum Absolute for value: absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            Absolute = 2
        }


        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public PositionEnum? Position { get; set; }
        /// <summary>
        /// Defines Height
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HeightEnum
        {
            /// <summary>
            /// Enum Md for value: md
            /// </summary>
            [EnumMember(Value = "md")]
            Md = 1,

            /// <summary>
            /// Enum Sm for value: sm
            /// </summary>
            [EnumMember(Value = "sm")]
            Sm = 2
        }


        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public HeightEnum? Height { get; set; }
        /// <summary>
        /// Defines AdjustMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AdjustModeEnum
        {
            /// <summary>
            /// Enum ShrinkToFit for value: shrink-to-fit
            /// </summary>
            [EnumMember(Value = "shrink-to-fit")]
            ShrinkToFit = 1
        }


        /// <summary>
        /// Gets or Sets AdjustMode
        /// </summary>
        [DataMember(Name = "adjustMode", EmitDefaultValue = false)]
        public AdjustModeEnum? AdjustMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexButton" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexButton() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexButton" /> class.
        /// </summary>
        /// <param name="flex">flex.</param>
        /// <param name="color">color.</param>
        /// <param name="style">style.</param>
        /// <param name="action">action (required).</param>
        /// <param name="gravity">gravity.</param>
        /// <param name="margin">margin.</param>
        /// <param name="position">position.</param>
        /// <param name="offsetTop">offsetTop.</param>
        /// <param name="offsetBottom">offsetBottom.</param>
        /// <param name="offsetStart">offsetStart.</param>
        /// <param name="offsetEnd">offsetEnd.</param>
        /// <param name="height">height.</param>
        /// <param name="adjustMode">adjustMode.</param>
        /// <param name="scaling">scaling.</param>
        /// <param name="type">type (required) (default to &quot;FlexButton&quot;).</param>
        public FlexButton(int flex = default(int), string color = default(string), StyleEnum? style = default(StyleEnum?), Action action = default(Action), GravityEnum? gravity = default(GravityEnum?), string margin = default(string), PositionEnum? position = default(PositionEnum?), string offsetTop = default(string), string offsetBottom = default(string), string offsetStart = default(string), string offsetEnd = default(string), HeightEnum? height = default(HeightEnum?), AdjustModeEnum? adjustMode = default(AdjustModeEnum?), bool scaling = default(bool), string type = @"FlexButton") : base(type)
        {
            // to ensure "action" is required (not null)
            if (action == null)
            {
                throw new ArgumentNullException("action is a required property for FlexButton and cannot be null");
            }
            this.Action = action;
            this.Flex = flex;
            this.Color = color;
            this.Style = style;
            this.Gravity = gravity;
            this.Margin = margin;
            this.Position = position;
            this.OffsetTop = offsetTop;
            this.OffsetBottom = offsetBottom;
            this.OffsetStart = offsetStart;
            this.OffsetEnd = offsetEnd;
            this.Height = height;
            this.AdjustMode = adjustMode;
            this.Scaling = scaling;
        }

        /// <summary>
        /// Gets or Sets Flex
        /// </summary>
        [DataMember(Name = "flex", EmitDefaultValue = false)]
        public int Flex { get; set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name = "color", EmitDefaultValue = false)]
        public string Color { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public Action Action { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name = "margin", EmitDefaultValue = false)]
        public string Margin { get; set; }

        /// <summary>
        /// Gets or Sets OffsetTop
        /// </summary>
        [DataMember(Name = "offsetTop", EmitDefaultValue = false)]
        public string OffsetTop { get; set; }

        /// <summary>
        /// Gets or Sets OffsetBottom
        /// </summary>
        [DataMember(Name = "offsetBottom", EmitDefaultValue = false)]
        public string OffsetBottom { get; set; }

        /// <summary>
        /// Gets or Sets OffsetStart
        /// </summary>
        [DataMember(Name = "offsetStart", EmitDefaultValue = false)]
        public string OffsetStart { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEnd
        /// </summary>
        [DataMember(Name = "offsetEnd", EmitDefaultValue = false)]
        public string OffsetEnd { get; set; }

        /// <summary>
        /// Gets or Sets Scaling
        /// </summary>
        [DataMember(Name = "scaling", EmitDefaultValue = true)]
        public bool Scaling { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexButton {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Flex: ").Append(Flex).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Gravity: ").Append(Gravity).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  OffsetTop: ").Append(OffsetTop).Append("\n");
            sb.Append("  OffsetBottom: ").Append(OffsetBottom).Append("\n");
            sb.Append("  OffsetStart: ").Append(OffsetStart).Append("\n");
            sb.Append("  OffsetEnd: ").Append(OffsetEnd).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  AdjustMode: ").Append(AdjustMode).Append("\n");
            sb.Append("  Scaling: ").Append(Scaling).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexButton);
        }

        /// <summary>
        /// Returns true if FlexButton instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexButton to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexButton input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Flex == input.Flex ||
                    this.Flex.Equals(input.Flex)
                ) && base.Equals(input) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && base.Equals(input) && 
                (
                    this.Style == input.Style ||
                    this.Style.Equals(input.Style)
                ) && base.Equals(input) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && base.Equals(input) && 
                (
                    this.Gravity == input.Gravity ||
                    this.Gravity.Equals(input.Gravity)
                ) && base.Equals(input) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && base.Equals(input) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && base.Equals(input) && 
                (
                    this.OffsetTop == input.OffsetTop ||
                    (this.OffsetTop != null &&
                    this.OffsetTop.Equals(input.OffsetTop))
                ) && base.Equals(input) && 
                (
                    this.OffsetBottom == input.OffsetBottom ||
                    (this.OffsetBottom != null &&
                    this.OffsetBottom.Equals(input.OffsetBottom))
                ) && base.Equals(input) && 
                (
                    this.OffsetStart == input.OffsetStart ||
                    (this.OffsetStart != null &&
                    this.OffsetStart.Equals(input.OffsetStart))
                ) && base.Equals(input) && 
                (
                    this.OffsetEnd == input.OffsetEnd ||
                    (this.OffsetEnd != null &&
                    this.OffsetEnd.Equals(input.OffsetEnd))
                ) && base.Equals(input) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && base.Equals(input) && 
                (
                    this.AdjustMode == input.AdjustMode ||
                    this.AdjustMode.Equals(input.AdjustMode)
                ) && base.Equals(input) && 
                (
                    this.Scaling == input.Scaling ||
                    this.Scaling.Equals(input.Scaling)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Flex.GetHashCode();
                if (this.Color != null)
                {
                    hashCode = (hashCode * 59) + this.Color.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Style.GetHashCode();
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Gravity.GetHashCode();
                if (this.Margin != null)
                {
                    hashCode = (hashCode * 59) + this.Margin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.OffsetTop != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetTop.GetHashCode();
                }
                if (this.OffsetBottom != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetBottom.GetHashCode();
                }
                if (this.OffsetStart != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetStart.GetHashCode();
                }
                if (this.OffsetEnd != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetEnd.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.AdjustMode.GetHashCode();
                hashCode = (hashCode * 59) + this.Scaling.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
