/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// RichMenuSwitchAction
    /// </summary>
    [DataContract(Name = "RichMenuSwitchAction")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class RichMenuSwitchAction : Action, IEquatable<RichMenuSwitchAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuSwitchAction" /> class.
        /// </summary>
        /// <param name="data">data.</param>
        /// <param name="richMenuAliasId">richMenuAliasId.</param>
        /// <param name="type">Type of action (default to &quot;RichMenuSwitchAction&quot;).</param>
        /// <param name="label">Label for the action..</param>
        public RichMenuSwitchAction(string data = default(string), string richMenuAliasId = default(string), string type = @"RichMenuSwitchAction", string label = default(string)) : base(type, label)
        {
            this.Data = data;
            this.RichMenuAliasId = richMenuAliasId;
        }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// Gets or Sets RichMenuAliasId
        /// </summary>
        [DataMember(Name = "richMenuAliasId", EmitDefaultValue = false)]
        public string RichMenuAliasId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuSwitchAction {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  RichMenuAliasId: ").Append(RichMenuAliasId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuSwitchAction);
        }

        /// <summary>
        /// Returns true if RichMenuSwitchAction instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuSwitchAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuSwitchAction input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && base.Equals(input) && 
                (
                    this.RichMenuAliasId == input.RichMenuAliasId ||
                    (this.RichMenuAliasId != null &&
                    this.RichMenuAliasId.Equals(input.RichMenuAliasId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.RichMenuAliasId != null)
                {
                    hashCode = (hashCode * 59) + this.RichMenuAliasId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            // Data (string) maxLength
            if (this.Data != null && this.Data.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Data, length must be less than 300.", new [] { "Data" });
            }

            // Data (string) minLength
            if (this.Data != null && this.Data.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Data, length must be greater than 0.", new [] { "Data" });
            }

            // RichMenuAliasId (string) maxLength
            if (this.RichMenuAliasId != null && this.RichMenuAliasId.Length > 32)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RichMenuAliasId, length must be less than 32.", new [] { "RichMenuAliasId" });
            }

            // RichMenuAliasId (string) minLength
            if (this.RichMenuAliasId != null && this.RichMenuAliasId.Length < 0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RichMenuAliasId, length must be greater than 0.", new [] { "RichMenuAliasId" });
            }

            yield break;
        }
    }

}
