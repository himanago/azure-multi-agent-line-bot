/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Object containing user membership subscription information.
    /// </summary>
    [DataContract(Name = "SubscribedMembershipUser")]
    public partial class SubscribedMembershipUser : IEquatable<SubscribedMembershipUser>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribedMembershipUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscribedMembershipUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribedMembershipUser" /> class.
        /// </summary>
        /// <param name="membershipNo">The user&#39;s member number in the membership plan. (required).</param>
        /// <param name="joinedTime">UNIX timestamp at which the user subscribed to the membership. (required).</param>
        /// <param name="nextBillingDate">Next payment date for membership plan. - Format: yyyy-MM-dd (e.g. 2024-02-08) - Timezone: UTC+9  (required).</param>
        /// <param name="totalSubscriptionMonths">The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted. (required).</param>
        public SubscribedMembershipUser(int membershipNo = default(int), int joinedTime = default(int), string nextBillingDate = default(string), int totalSubscriptionMonths = default(int))
        {
            this.MembershipNo = membershipNo;
            this.JoinedTime = joinedTime;
            // to ensure "nextBillingDate" is required (not null)
            if (nextBillingDate == null)
            {
                throw new ArgumentNullException("nextBillingDate is a required property for SubscribedMembershipUser and cannot be null");
            }
            this.NextBillingDate = nextBillingDate;
            this.TotalSubscriptionMonths = totalSubscriptionMonths;
        }

        /// <summary>
        /// The user&#39;s member number in the membership plan.
        /// </summary>
        /// <value>The user&#39;s member number in the membership plan.</value>
        [DataMember(Name = "membershipNo", IsRequired = true, EmitDefaultValue = true)]
        public int MembershipNo { get; set; }

        /// <summary>
        /// UNIX timestamp at which the user subscribed to the membership.
        /// </summary>
        /// <value>UNIX timestamp at which the user subscribed to the membership.</value>
        [DataMember(Name = "joinedTime", IsRequired = true, EmitDefaultValue = true)]
        public int JoinedTime { get; set; }

        /// <summary>
        /// Next payment date for membership plan. - Format: yyyy-MM-dd (e.g. 2024-02-08) - Timezone: UTC+9 
        /// </summary>
        /// <value>Next payment date for membership plan. - Format: yyyy-MM-dd (e.g. 2024-02-08) - Timezone: UTC+9 </value>
        [DataMember(Name = "nextBillingDate", IsRequired = true, EmitDefaultValue = true)]
        public string NextBillingDate { get; set; }

        /// <summary>
        /// The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.
        /// </summary>
        /// <value>The period of time in months that the user has been subscribed to a membership plan. If a user previously canceled and then re-subscribed to the same membership plan, only the period after the re-subscription will be counted.</value>
        [DataMember(Name = "totalSubscriptionMonths", IsRequired = true, EmitDefaultValue = true)]
        public int TotalSubscriptionMonths { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscribedMembershipUser {\n");
            sb.Append("  MembershipNo: ").Append(MembershipNo).Append("\n");
            sb.Append("  JoinedTime: ").Append(JoinedTime).Append("\n");
            sb.Append("  NextBillingDate: ").Append(NextBillingDate).Append("\n");
            sb.Append("  TotalSubscriptionMonths: ").Append(TotalSubscriptionMonths).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscribedMembershipUser);
        }

        /// <summary>
        /// Returns true if SubscribedMembershipUser instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscribedMembershipUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribedMembershipUser input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MembershipNo == input.MembershipNo ||
                    this.MembershipNo.Equals(input.MembershipNo)
                ) && 
                (
                    this.JoinedTime == input.JoinedTime ||
                    this.JoinedTime.Equals(input.JoinedTime)
                ) && 
                (
                    this.NextBillingDate == input.NextBillingDate ||
                    (this.NextBillingDate != null &&
                    this.NextBillingDate.Equals(input.NextBillingDate))
                ) && 
                (
                    this.TotalSubscriptionMonths == input.TotalSubscriptionMonths ||
                    this.TotalSubscriptionMonths.Equals(input.TotalSubscriptionMonths)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MembershipNo.GetHashCode();
                hashCode = (hashCode * 59) + this.JoinedTime.GetHashCode();
                if (this.NextBillingDate != null)
                {
                    hashCode = (hashCode * 59) + this.NextBillingDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TotalSubscriptionMonths.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
