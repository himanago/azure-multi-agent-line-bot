/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// RichMenuBatchRequest
    /// </summary>
    [DataContract(Name = "RichMenuBatchRequest")]
    public partial class RichMenuBatchRequest : IEquatable<RichMenuBatchRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBatchRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RichMenuBatchRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBatchRequest" /> class.
        /// </summary>
        /// <param name="operations">Array of Rich menu operation object... (required).</param>
        /// <param name="resumeRequestKey">Key for retry. Key value is a string matching the regular expression pattern.</param>
        public RichMenuBatchRequest(List<RichMenuBatchOperation> operations = default(List<RichMenuBatchOperation>), string resumeRequestKey = default(string))
        {
            // to ensure "operations" is required (not null)
            if (operations == null)
            {
                throw new ArgumentNullException("operations is a required property for RichMenuBatchRequest and cannot be null");
            }
            this.Operations = operations;
            this.ResumeRequestKey = resumeRequestKey;
        }

        /// <summary>
        /// Array of Rich menu operation object...
        /// </summary>
        /// <value>Array of Rich menu operation object...</value>
        [DataMember(Name = "operations", IsRequired = true, EmitDefaultValue = true)]
        public List<RichMenuBatchOperation> Operations { get; set; }

        /// <summary>
        /// Key for retry. Key value is a string matching the regular expression pattern
        /// </summary>
        /// <value>Key for retry. Key value is a string matching the regular expression pattern</value>
        [DataMember(Name = "resumeRequestKey", EmitDefaultValue = false)]
        public string ResumeRequestKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuBatchRequest {\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  ResumeRequestKey: ").Append(ResumeRequestKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuBatchRequest);
        }

        /// <summary>
        /// Returns true if RichMenuBatchRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuBatchRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuBatchRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Operations == input.Operations ||
                    this.Operations != null &&
                    input.Operations != null &&
                    this.Operations.SequenceEqual(input.Operations)
                ) && 
                (
                    this.ResumeRequestKey == input.ResumeRequestKey ||
                    (this.ResumeRequestKey != null &&
                    this.ResumeRequestKey.Equals(input.ResumeRequestKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Operations != null)
                {
                    hashCode = (hashCode * 59) + this.Operations.GetHashCode();
                }
                if (this.ResumeRequestKey != null)
                {
                    hashCode = (hashCode * 59) + this.ResumeRequestKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ResumeRequestKey (string) maxLength
            if (this.ResumeRequestKey != null && this.ResumeRequestKey.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResumeRequestKey, length must be less than 100.", new [] { "ResumeRequestKey" });
            }

            // ResumeRequestKey (string) minLength
            if (this.ResumeRequestKey != null && this.ResumeRequestKey.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResumeRequestKey, length must be greater than 1.", new [] { "ResumeRequestKey" });
            }

            if (this.ResumeRequestKey != null) {
                // ResumeRequestKey (string) pattern
                Regex regexResumeRequestKey = new Regex(@"^[a-zA-Z0-9_-]{1,100}$", RegexOptions.CultureInvariant);
                if (!regexResumeRequestKey.Match(this.ResumeRequestKey).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ResumeRequestKey, must match a pattern of " + regexResumeRequestKey, new [] { "ResumeRequestKey" });
                }
            }

            yield break;
        }
    }

}
