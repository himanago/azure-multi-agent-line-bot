/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Rich menu operation object represents the batch operation to the rich menu linked to the user.
    /// </summary>
    [DataContract(Name = "RichMenuBatchOperation")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [JsonSubtypes.KnownSubType(typeof(RichMenuBatchLinkOperation), "link")]
    [JsonSubtypes.KnownSubType(typeof(RichMenuBatchUnlinkOperation), "unlink")]
    [JsonSubtypes.KnownSubType(typeof(RichMenuBatchUnlinkAllOperation), "unlinkAll")]
    public partial class RichMenuBatchOperation : IEquatable<RichMenuBatchOperation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBatchOperation" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RichMenuBatchOperation() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBatchOperation" /> class.
        /// </summary>
        /// <param name="type">The type of operation to the rich menu linked to the user. One of link, unlink, or unlinkAll. (required).</param>
        public RichMenuBatchOperation(string type = default(string))
        {
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for RichMenuBatchOperation and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The type of operation to the rich menu linked to the user. One of link, unlink, or unlinkAll.
        /// </summary>
        /// <value>The type of operation to the rich menu linked to the user. One of link, unlink, or unlinkAll.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuBatchOperation {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuBatchOperation);
        }

        /// <summary>
        /// Returns true if RichMenuBatchOperation instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuBatchOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuBatchOperation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
