/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// GroupSummaryResponse
    /// </summary>
    [DataContract(Name = "GroupSummaryResponse")]
    public partial class GroupSummaryResponse : IEquatable<GroupSummaryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupSummaryResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GroupSummaryResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupSummaryResponse" /> class.
        /// </summary>
        /// <param name="groupId">Group ID (required).</param>
        /// <param name="groupName">Group name (required).</param>
        /// <param name="pictureUrl">Group icon URL. Not included in the response if the user doesn&#39;t set a group profile icon..</param>
        public GroupSummaryResponse(string groupId = default(string), string groupName = default(string), string pictureUrl = default(string))
        {
            // to ensure "groupId" is required (not null)
            if (groupId == null)
            {
                throw new ArgumentNullException("groupId is a required property for GroupSummaryResponse and cannot be null");
            }
            this.GroupId = groupId;
            // to ensure "groupName" is required (not null)
            if (groupName == null)
            {
                throw new ArgumentNullException("groupName is a required property for GroupSummaryResponse and cannot be null");
            }
            this.GroupName = groupName;
            this.PictureUrl = pictureUrl;
        }

        /// <summary>
        /// Group ID
        /// </summary>
        /// <value>Group ID</value>
        [DataMember(Name = "groupId", IsRequired = true, EmitDefaultValue = true)]
        public string GroupId { get; set; }

        /// <summary>
        /// Group name
        /// </summary>
        /// <value>Group name</value>
        [DataMember(Name = "groupName", IsRequired = true, EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        /// Group icon URL. Not included in the response if the user doesn&#39;t set a group profile icon.
        /// </summary>
        /// <value>Group icon URL. Not included in the response if the user doesn&#39;t set a group profile icon.</value>
        [DataMember(Name = "pictureUrl", EmitDefaultValue = false)]
        public string PictureUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GroupSummaryResponse {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  PictureUrl: ").Append(PictureUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupSummaryResponse);
        }

        /// <summary>
        /// Returns true if GroupSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupSummaryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.PictureUrl == input.PictureUrl ||
                    (this.PictureUrl != null &&
                    this.PictureUrl.Equals(input.PictureUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.GroupName != null)
                {
                    hashCode = (hashCode * 59) + this.GroupName.GetHashCode();
                }
                if (this.PictureUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PictureUrl.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
