/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexBox
    /// </summary>
    [DataContract(Name = "FlexBox")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexBox : FlexComponent, IEquatable<FlexBox>, IValidatableObject
    {
        /// <summary>
        /// Defines Layout
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LayoutEnum
        {
            /// <summary>
            /// Enum Horizontal for value: horizontal
            /// </summary>
            [EnumMember(Value = "horizontal")]
            Horizontal = 1,

            /// <summary>
            /// Enum Vertical for value: vertical
            /// </summary>
            [EnumMember(Value = "vertical")]
            Vertical = 2,

            /// <summary>
            /// Enum Baseline for value: baseline
            /// </summary>
            [EnumMember(Value = "baseline")]
            Baseline = 3
        }


        /// <summary>
        /// Gets or Sets Layout
        /// </summary>
        [DataMember(Name = "layout", IsRequired = true, EmitDefaultValue = true)]
        public LayoutEnum Layout { get; set; }
        /// <summary>
        /// Defines Position
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PositionEnum
        {
            /// <summary>
            /// Enum Relative for value: relative
            /// </summary>
            [EnumMember(Value = "relative")]
            Relative = 1,

            /// <summary>
            /// Enum Absolute for value: absolute
            /// </summary>
            [EnumMember(Value = "absolute")]
            Absolute = 2
        }


        /// <summary>
        /// Gets or Sets Position
        /// </summary>
        [DataMember(Name = "position", EmitDefaultValue = false)]
        public PositionEnum? Position { get; set; }
        /// <summary>
        /// Defines JustifyContent
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum JustifyContentEnum
        {
            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 1,

            /// <summary>
            /// Enum FlexStart for value: flex-start
            /// </summary>
            [EnumMember(Value = "flex-start")]
            FlexStart = 2,

            /// <summary>
            /// Enum FlexEnd for value: flex-end
            /// </summary>
            [EnumMember(Value = "flex-end")]
            FlexEnd = 3,

            /// <summary>
            /// Enum SpaceBetween for value: space-between
            /// </summary>
            [EnumMember(Value = "space-between")]
            SpaceBetween = 4,

            /// <summary>
            /// Enum SpaceAround for value: space-around
            /// </summary>
            [EnumMember(Value = "space-around")]
            SpaceAround = 5,

            /// <summary>
            /// Enum SpaceEvenly for value: space-evenly
            /// </summary>
            [EnumMember(Value = "space-evenly")]
            SpaceEvenly = 6
        }


        /// <summary>
        /// Gets or Sets JustifyContent
        /// </summary>
        [DataMember(Name = "justifyContent", EmitDefaultValue = false)]
        public JustifyContentEnum? JustifyContent { get; set; }
        /// <summary>
        /// Defines AlignItems
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AlignItemsEnum
        {
            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 1,

            /// <summary>
            /// Enum FlexStart for value: flex-start
            /// </summary>
            [EnumMember(Value = "flex-start")]
            FlexStart = 2,

            /// <summary>
            /// Enum FlexEnd for value: flex-end
            /// </summary>
            [EnumMember(Value = "flex-end")]
            FlexEnd = 3
        }


        /// <summary>
        /// Gets or Sets AlignItems
        /// </summary>
        [DataMember(Name = "alignItems", EmitDefaultValue = false)]
        public AlignItemsEnum? AlignItems { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBox" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexBox() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBox" /> class.
        /// </summary>
        /// <param name="layout">layout (required).</param>
        /// <param name="flex">flex.</param>
        /// <param name="contents">contents (required).</param>
        /// <param name="spacing">spacing.</param>
        /// <param name="margin">margin.</param>
        /// <param name="position">position.</param>
        /// <param name="offsetTop">offsetTop.</param>
        /// <param name="offsetBottom">offsetBottom.</param>
        /// <param name="offsetStart">offsetStart.</param>
        /// <param name="offsetEnd">offsetEnd.</param>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="borderColor">borderColor.</param>
        /// <param name="borderWidth">borderWidth.</param>
        /// <param name="cornerRadius">cornerRadius.</param>
        /// <param name="width">width.</param>
        /// <param name="maxWidth">maxWidth.</param>
        /// <param name="height">height.</param>
        /// <param name="maxHeight">maxHeight.</param>
        /// <param name="paddingAll">paddingAll.</param>
        /// <param name="paddingTop">paddingTop.</param>
        /// <param name="paddingBottom">paddingBottom.</param>
        /// <param name="paddingStart">paddingStart.</param>
        /// <param name="paddingEnd">paddingEnd.</param>
        /// <param name="action">action.</param>
        /// <param name="justifyContent">justifyContent.</param>
        /// <param name="alignItems">alignItems.</param>
        /// <param name="background">background.</param>
        /// <param name="type">type (required) (default to &quot;FlexBox&quot;).</param>
        public FlexBox(LayoutEnum layout = default(LayoutEnum), int flex = default(int), List<FlexComponent> contents = default(List<FlexComponent>), string spacing = default(string), string margin = default(string), PositionEnum? position = default(PositionEnum?), string offsetTop = default(string), string offsetBottom = default(string), string offsetStart = default(string), string offsetEnd = default(string), string backgroundColor = default(string), string borderColor = default(string), string borderWidth = default(string), string cornerRadius = default(string), string width = default(string), string maxWidth = default(string), string height = default(string), string maxHeight = default(string), string paddingAll = default(string), string paddingTop = default(string), string paddingBottom = default(string), string paddingStart = default(string), string paddingEnd = default(string), Action action = default(Action), JustifyContentEnum? justifyContent = default(JustifyContentEnum?), AlignItemsEnum? alignItems = default(AlignItemsEnum?), FlexBoxBackground background = default(FlexBoxBackground), string type = @"FlexBox") : base(type)
        {
            this.Layout = layout;
            // to ensure "contents" is required (not null)
            if (contents == null)
            {
                throw new ArgumentNullException("contents is a required property for FlexBox and cannot be null");
            }
            this.Contents = contents;
            this.Flex = flex;
            this.Spacing = spacing;
            this.Margin = margin;
            this.Position = position;
            this.OffsetTop = offsetTop;
            this.OffsetBottom = offsetBottom;
            this.OffsetStart = offsetStart;
            this.OffsetEnd = offsetEnd;
            this.BackgroundColor = backgroundColor;
            this.BorderColor = borderColor;
            this.BorderWidth = borderWidth;
            this.CornerRadius = cornerRadius;
            this.Width = width;
            this.MaxWidth = maxWidth;
            this.Height = height;
            this.MaxHeight = maxHeight;
            this.PaddingAll = paddingAll;
            this.PaddingTop = paddingTop;
            this.PaddingBottom = paddingBottom;
            this.PaddingStart = paddingStart;
            this.PaddingEnd = paddingEnd;
            this.Action = action;
            this.JustifyContent = justifyContent;
            this.AlignItems = alignItems;
            this.Background = background;
        }

        /// <summary>
        /// Gets or Sets Flex
        /// </summary>
        [DataMember(Name = "flex", EmitDefaultValue = false)]
        public int Flex { get; set; }

        /// <summary>
        /// Gets or Sets Contents
        /// </summary>
        [DataMember(Name = "contents", IsRequired = true, EmitDefaultValue = true)]
        public List<FlexComponent> Contents { get; set; }

        /// <summary>
        /// Gets or Sets Spacing
        /// </summary>
        [DataMember(Name = "spacing", EmitDefaultValue = false)]
        public string Spacing { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name = "margin", EmitDefaultValue = false)]
        public string Margin { get; set; }

        /// <summary>
        /// Gets or Sets OffsetTop
        /// </summary>
        [DataMember(Name = "offsetTop", EmitDefaultValue = false)]
        public string OffsetTop { get; set; }

        /// <summary>
        /// Gets or Sets OffsetBottom
        /// </summary>
        [DataMember(Name = "offsetBottom", EmitDefaultValue = false)]
        public string OffsetBottom { get; set; }

        /// <summary>
        /// Gets or Sets OffsetStart
        /// </summary>
        [DataMember(Name = "offsetStart", EmitDefaultValue = false)]
        public string OffsetStart { get; set; }

        /// <summary>
        /// Gets or Sets OffsetEnd
        /// </summary>
        [DataMember(Name = "offsetEnd", EmitDefaultValue = false)]
        public string OffsetEnd { get; set; }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets BorderColor
        /// </summary>
        [DataMember(Name = "borderColor", EmitDefaultValue = false)]
        public string BorderColor { get; set; }

        /// <summary>
        /// Gets or Sets BorderWidth
        /// </summary>
        [DataMember(Name = "borderWidth", EmitDefaultValue = false)]
        public string BorderWidth { get; set; }

        /// <summary>
        /// Gets or Sets CornerRadius
        /// </summary>
        [DataMember(Name = "cornerRadius", EmitDefaultValue = false)]
        public string CornerRadius { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public string Width { get; set; }

        /// <summary>
        /// Gets or Sets MaxWidth
        /// </summary>
        [DataMember(Name = "maxWidth", EmitDefaultValue = false)]
        public string MaxWidth { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets MaxHeight
        /// </summary>
        [DataMember(Name = "maxHeight", EmitDefaultValue = false)]
        public string MaxHeight { get; set; }

        /// <summary>
        /// Gets or Sets PaddingAll
        /// </summary>
        [DataMember(Name = "paddingAll", EmitDefaultValue = false)]
        public string PaddingAll { get; set; }

        /// <summary>
        /// Gets or Sets PaddingTop
        /// </summary>
        [DataMember(Name = "paddingTop", EmitDefaultValue = false)]
        public string PaddingTop { get; set; }

        /// <summary>
        /// Gets or Sets PaddingBottom
        /// </summary>
        [DataMember(Name = "paddingBottom", EmitDefaultValue = false)]
        public string PaddingBottom { get; set; }

        /// <summary>
        /// Gets or Sets PaddingStart
        /// </summary>
        [DataMember(Name = "paddingStart", EmitDefaultValue = false)]
        public string PaddingStart { get; set; }

        /// <summary>
        /// Gets or Sets PaddingEnd
        /// </summary>
        [DataMember(Name = "paddingEnd", EmitDefaultValue = false)]
        public string PaddingEnd { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// Gets or Sets Background
        /// </summary>
        [DataMember(Name = "background", EmitDefaultValue = false)]
        public FlexBoxBackground Background { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexBox {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Flex: ").Append(Flex).Append("\n");
            sb.Append("  Contents: ").Append(Contents).Append("\n");
            sb.Append("  Spacing: ").Append(Spacing).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("  OffsetTop: ").Append(OffsetTop).Append("\n");
            sb.Append("  OffsetBottom: ").Append(OffsetBottom).Append("\n");
            sb.Append("  OffsetStart: ").Append(OffsetStart).Append("\n");
            sb.Append("  OffsetEnd: ").Append(OffsetEnd).Append("\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  CornerRadius: ").Append(CornerRadius).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  MaxWidth: ").Append(MaxWidth).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  MaxHeight: ").Append(MaxHeight).Append("\n");
            sb.Append("  PaddingAll: ").Append(PaddingAll).Append("\n");
            sb.Append("  PaddingTop: ").Append(PaddingTop).Append("\n");
            sb.Append("  PaddingBottom: ").Append(PaddingBottom).Append("\n");
            sb.Append("  PaddingStart: ").Append(PaddingStart).Append("\n");
            sb.Append("  PaddingEnd: ").Append(PaddingEnd).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  JustifyContent: ").Append(JustifyContent).Append("\n");
            sb.Append("  AlignItems: ").Append(AlignItems).Append("\n");
            sb.Append("  Background: ").Append(Background).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexBox);
        }

        /// <summary>
        /// Returns true if FlexBox instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexBox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBox input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Layout == input.Layout ||
                    this.Layout.Equals(input.Layout)
                ) && base.Equals(input) && 
                (
                    this.Flex == input.Flex ||
                    this.Flex.Equals(input.Flex)
                ) && base.Equals(input) && 
                (
                    this.Contents == input.Contents ||
                    this.Contents != null &&
                    input.Contents != null &&
                    this.Contents.SequenceEqual(input.Contents)
                ) && base.Equals(input) && 
                (
                    this.Spacing == input.Spacing ||
                    (this.Spacing != null &&
                    this.Spacing.Equals(input.Spacing))
                ) && base.Equals(input) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && base.Equals(input) && 
                (
                    this.Position == input.Position ||
                    this.Position.Equals(input.Position)
                ) && base.Equals(input) && 
                (
                    this.OffsetTop == input.OffsetTop ||
                    (this.OffsetTop != null &&
                    this.OffsetTop.Equals(input.OffsetTop))
                ) && base.Equals(input) && 
                (
                    this.OffsetBottom == input.OffsetBottom ||
                    (this.OffsetBottom != null &&
                    this.OffsetBottom.Equals(input.OffsetBottom))
                ) && base.Equals(input) && 
                (
                    this.OffsetStart == input.OffsetStart ||
                    (this.OffsetStart != null &&
                    this.OffsetStart.Equals(input.OffsetStart))
                ) && base.Equals(input) && 
                (
                    this.OffsetEnd == input.OffsetEnd ||
                    (this.OffsetEnd != null &&
                    this.OffsetEnd.Equals(input.OffsetEnd))
                ) && base.Equals(input) && 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && base.Equals(input) && 
                (
                    this.BorderColor == input.BorderColor ||
                    (this.BorderColor != null &&
                    this.BorderColor.Equals(input.BorderColor))
                ) && base.Equals(input) && 
                (
                    this.BorderWidth == input.BorderWidth ||
                    (this.BorderWidth != null &&
                    this.BorderWidth.Equals(input.BorderWidth))
                ) && base.Equals(input) && 
                (
                    this.CornerRadius == input.CornerRadius ||
                    (this.CornerRadius != null &&
                    this.CornerRadius.Equals(input.CornerRadius))
                ) && base.Equals(input) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && base.Equals(input) && 
                (
                    this.MaxWidth == input.MaxWidth ||
                    (this.MaxWidth != null &&
                    this.MaxWidth.Equals(input.MaxWidth))
                ) && base.Equals(input) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && base.Equals(input) && 
                (
                    this.MaxHeight == input.MaxHeight ||
                    (this.MaxHeight != null &&
                    this.MaxHeight.Equals(input.MaxHeight))
                ) && base.Equals(input) && 
                (
                    this.PaddingAll == input.PaddingAll ||
                    (this.PaddingAll != null &&
                    this.PaddingAll.Equals(input.PaddingAll))
                ) && base.Equals(input) && 
                (
                    this.PaddingTop == input.PaddingTop ||
                    (this.PaddingTop != null &&
                    this.PaddingTop.Equals(input.PaddingTop))
                ) && base.Equals(input) && 
                (
                    this.PaddingBottom == input.PaddingBottom ||
                    (this.PaddingBottom != null &&
                    this.PaddingBottom.Equals(input.PaddingBottom))
                ) && base.Equals(input) && 
                (
                    this.PaddingStart == input.PaddingStart ||
                    (this.PaddingStart != null &&
                    this.PaddingStart.Equals(input.PaddingStart))
                ) && base.Equals(input) && 
                (
                    this.PaddingEnd == input.PaddingEnd ||
                    (this.PaddingEnd != null &&
                    this.PaddingEnd.Equals(input.PaddingEnd))
                ) && base.Equals(input) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && base.Equals(input) && 
                (
                    this.JustifyContent == input.JustifyContent ||
                    this.JustifyContent.Equals(input.JustifyContent)
                ) && base.Equals(input) && 
                (
                    this.AlignItems == input.AlignItems ||
                    this.AlignItems.Equals(input.AlignItems)
                ) && base.Equals(input) && 
                (
                    this.Background == input.Background ||
                    (this.Background != null &&
                    this.Background.Equals(input.Background))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Layout.GetHashCode();
                hashCode = (hashCode * 59) + this.Flex.GetHashCode();
                if (this.Contents != null)
                {
                    hashCode = (hashCode * 59) + this.Contents.GetHashCode();
                }
                if (this.Spacing != null)
                {
                    hashCode = (hashCode * 59) + this.Spacing.GetHashCode();
                }
                if (this.Margin != null)
                {
                    hashCode = (hashCode * 59) + this.Margin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Position.GetHashCode();
                if (this.OffsetTop != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetTop.GetHashCode();
                }
                if (this.OffsetBottom != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetBottom.GetHashCode();
                }
                if (this.OffsetStart != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetStart.GetHashCode();
                }
                if (this.OffsetEnd != null)
                {
                    hashCode = (hashCode * 59) + this.OffsetEnd.GetHashCode();
                }
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                if (this.BorderColor != null)
                {
                    hashCode = (hashCode * 59) + this.BorderColor.GetHashCode();
                }
                if (this.BorderWidth != null)
                {
                    hashCode = (hashCode * 59) + this.BorderWidth.GetHashCode();
                }
                if (this.CornerRadius != null)
                {
                    hashCode = (hashCode * 59) + this.CornerRadius.GetHashCode();
                }
                if (this.Width != null)
                {
                    hashCode = (hashCode * 59) + this.Width.GetHashCode();
                }
                if (this.MaxWidth != null)
                {
                    hashCode = (hashCode * 59) + this.MaxWidth.GetHashCode();
                }
                if (this.Height != null)
                {
                    hashCode = (hashCode * 59) + this.Height.GetHashCode();
                }
                if (this.MaxHeight != null)
                {
                    hashCode = (hashCode * 59) + this.MaxHeight.GetHashCode();
                }
                if (this.PaddingAll != null)
                {
                    hashCode = (hashCode * 59) + this.PaddingAll.GetHashCode();
                }
                if (this.PaddingTop != null)
                {
                    hashCode = (hashCode * 59) + this.PaddingTop.GetHashCode();
                }
                if (this.PaddingBottom != null)
                {
                    hashCode = (hashCode * 59) + this.PaddingBottom.GetHashCode();
                }
                if (this.PaddingStart != null)
                {
                    hashCode = (hashCode * 59) + this.PaddingStart.GetHashCode();
                }
                if (this.PaddingEnd != null)
                {
                    hashCode = (hashCode * 59) + this.PaddingEnd.GetHashCode();
                }
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.JustifyContent.GetHashCode();
                hashCode = (hashCode * 59) + this.AlignItems.GetHashCode();
                if (this.Background != null)
                {
                    hashCode = (hashCode * 59) + this.Background.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
