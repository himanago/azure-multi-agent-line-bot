/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// TestWebhookEndpointResponse
    /// </summary>
    [DataContract(Name = "TestWebhookEndpointResponse")]
    public partial class TestWebhookEndpointResponse : IEquatable<TestWebhookEndpointResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TestWebhookEndpointResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TestWebhookEndpointResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TestWebhookEndpointResponse" /> class.
        /// </summary>
        /// <param name="success">Result of the communication from the LINE platform to the webhook URL..</param>
        /// <param name="timestamp">Time of the event in milliseconds. Even in the case of a redelivered webhook, it represents the time the event occurred, not the time it was redelivered.  (required).</param>
        /// <param name="statusCode">The HTTP status code. If the webhook response isn&#39;t received, the status code is set to zero or a negative number. (required).</param>
        /// <param name="reason">Reason for the response. (required).</param>
        /// <param name="detail">Details of the response. (required).</param>
        public TestWebhookEndpointResponse(bool success = default(bool), DateTime timestamp = default(DateTime), int statusCode = default(int), string reason = default(string), string detail = default(string))
        {
            this.Timestamp = timestamp;
            this.StatusCode = statusCode;
            // to ensure "reason" is required (not null)
            if (reason == null)
            {
                throw new ArgumentNullException("reason is a required property for TestWebhookEndpointResponse and cannot be null");
            }
            this.Reason = reason;
            // to ensure "detail" is required (not null)
            if (detail == null)
            {
                throw new ArgumentNullException("detail is a required property for TestWebhookEndpointResponse and cannot be null");
            }
            this.Detail = detail;
            this.Success = success;
        }

        /// <summary>
        /// Result of the communication from the LINE platform to the webhook URL.
        /// </summary>
        /// <value>Result of the communication from the LINE platform to the webhook URL.</value>
        [DataMember(Name = "success", EmitDefaultValue = true)]
        public bool Success { get; set; }

        /// <summary>
        /// Time of the event in milliseconds. Even in the case of a redelivered webhook, it represents the time the event occurred, not the time it was redelivered. 
        /// </summary>
        /// <value>Time of the event in milliseconds. Even in the case of a redelivered webhook, it represents the time the event occurred, not the time it was redelivered. </value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// The HTTP status code. If the webhook response isn&#39;t received, the status code is set to zero or a negative number.
        /// </summary>
        /// <value>The HTTP status code. If the webhook response isn&#39;t received, the status code is set to zero or a negative number.</value>
        [DataMember(Name = "statusCode", IsRequired = true, EmitDefaultValue = true)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Reason for the response.
        /// </summary>
        /// <value>Reason for the response.</value>
        [DataMember(Name = "reason", IsRequired = true, EmitDefaultValue = true)]
        public string Reason { get; set; }

        /// <summary>
        /// Details of the response.
        /// </summary>
        /// <value>Details of the response.</value>
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public string Detail { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TestWebhookEndpointResponse {\n");
            sb.Append("  Success: ").Append(Success).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Detail: ").Append(Detail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TestWebhookEndpointResponse);
        }

        /// <summary>
        /// Returns true if TestWebhookEndpointResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of TestWebhookEndpointResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TestWebhookEndpointResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Success == input.Success ||
                    this.Success.Equals(input.Success)
                ) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) && 
                (
                    this.StatusCode == input.StatusCode ||
                    this.StatusCode.Equals(input.StatusCode)
                ) && 
                (
                    this.Reason == input.Reason ||
                    (this.Reason != null &&
                    this.Reason.Equals(input.Reason))
                ) && 
                (
                    this.Detail == input.Detail ||
                    (this.Detail != null &&
                    this.Detail.Equals(input.Detail))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Success.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                if (this.Reason != null)
                {
                    hashCode = (hashCode * 59) + this.Reason.GetHashCode();
                }
                if (this.Detail != null)
                {
                    hashCode = (hashCode * 59) + this.Detail.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
