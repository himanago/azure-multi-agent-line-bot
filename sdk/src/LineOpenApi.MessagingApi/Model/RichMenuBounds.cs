/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Rich menu bounds
    /// </summary>
    [DataContract(Name = "RichMenuBounds")]
    public partial class RichMenuBounds : IEquatable<RichMenuBounds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBounds" /> class.
        /// </summary>
        /// <param name="x">Horizontal position relative to the top-left corner of the area..</param>
        /// <param name="y">Vertical position relative to the top-left corner of the area..</param>
        /// <param name="width">Width of the area..</param>
        /// <param name="height">Height of the area..</param>
        public RichMenuBounds(long x = default(long), long y = default(long), long width = default(long), long height = default(long))
        {
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }

        /// <summary>
        /// Horizontal position relative to the top-left corner of the area.
        /// </summary>
        /// <value>Horizontal position relative to the top-left corner of the area.</value>
        [DataMember(Name = "x", EmitDefaultValue = false)]
        public long X { get; set; }

        /// <summary>
        /// Vertical position relative to the top-left corner of the area.
        /// </summary>
        /// <value>Vertical position relative to the top-left corner of the area.</value>
        [DataMember(Name = "y", EmitDefaultValue = false)]
        public long Y { get; set; }

        /// <summary>
        /// Width of the area.
        /// </summary>
        /// <value>Width of the area.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public long Width { get; set; }

        /// <summary>
        /// Height of the area.
        /// </summary>
        /// <value>Height of the area.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public long Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuBounds {\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuBounds);
        }

        /// <summary>
        /// Returns true if RichMenuBounds instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuBounds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuBounds input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.X == input.X ||
                    this.X.Equals(input.X)
                ) && 
                (
                    this.Y == input.Y ||
                    this.Y.Equals(input.Y)
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.X.GetHashCode();
                hashCode = (hashCode * 59) + this.Y.GetHashCode();
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // X (long) maximum
            if (this.X > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value less than or equal to 2147483647.", new [] { "X" });
            }

            // X (long) minimum
            if (this.X < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for X, must be a value greater than or equal to 0.", new [] { "X" });
            }

            // Y (long) maximum
            if (this.Y > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value less than or equal to 2147483647.", new [] { "Y" });
            }

            // Y (long) minimum
            if (this.Y < (long)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Y, must be a value greater than or equal to 0.", new [] { "Y" });
            }

            // Width (long) maximum
            if (this.Width > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value less than or equal to 2147483647.", new [] { "Width" });
            }

            // Width (long) minimum
            if (this.Width < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Width, must be a value greater than or equal to 1.", new [] { "Width" });
            }

            // Height (long) maximum
            if (this.Height > (long)2147483647)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value less than or equal to 2147483647.", new [] { "Height" });
            }

            // Height (long) minimum
            if (this.Height < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Height, must be a value greater than or equal to 1.", new [] { "Height" });
            }

            yield break;
        }
    }

}
