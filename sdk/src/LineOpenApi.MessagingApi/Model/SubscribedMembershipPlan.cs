/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// Object containing information about the membership plan.
    /// </summary>
    [DataContract(Name = "SubscribedMembershipPlan")]
    public partial class SubscribedMembershipPlan : IEquatable<SubscribedMembershipPlan>, IValidatableObject
    {
        /// <summary>
        /// The currency of membership.price.
        /// </summary>
        /// <value>The currency of membership.price.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CurrencyEnum
        {
            /// <summary>
            /// Enum JPY for value: JPY
            /// </summary>
            [EnumMember(Value = "JPY")]
            JPY = 1,

            /// <summary>
            /// Enum TWD for value: TWD
            /// </summary>
            [EnumMember(Value = "TWD")]
            TWD = 2,

            /// <summary>
            /// Enum THB for value: THB
            /// </summary>
            [EnumMember(Value = "THB")]
            THB = 3
        }


        /// <summary>
        /// The currency of membership.price.
        /// </summary>
        /// <value>The currency of membership.price.</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public CurrencyEnum Currency { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribedMembershipPlan" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SubscribedMembershipPlan() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SubscribedMembershipPlan" /> class.
        /// </summary>
        /// <param name="membershipId">Membership plan ID. (required).</param>
        /// <param name="title">Membership plan name. (required).</param>
        /// <param name="description">Membership plan description. (required).</param>
        /// <param name="benefits">List of membership plan perks. (required).</param>
        /// <param name="price">Monthly fee for membership plan. (e.g. 1500.00) (required).</param>
        /// <param name="currency">The currency of membership.price. (required).</param>
        public SubscribedMembershipPlan(int membershipId = default(int), string title = default(string), string description = default(string), List<string> benefits = default(List<string>), double price = default(double), CurrencyEnum currency = default(CurrencyEnum))
        {
            this.MembershipId = membershipId;
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new ArgumentNullException("title is a required property for SubscribedMembershipPlan and cannot be null");
            }
            this.Title = title;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for SubscribedMembershipPlan and cannot be null");
            }
            this.Description = description;
            // to ensure "benefits" is required (not null)
            if (benefits == null)
            {
                throw new ArgumentNullException("benefits is a required property for SubscribedMembershipPlan and cannot be null");
            }
            this.Benefits = benefits;
            this.Price = price;
            this.Currency = currency;
        }

        /// <summary>
        /// Membership plan ID.
        /// </summary>
        /// <value>Membership plan ID.</value>
        [DataMember(Name = "membershipId", IsRequired = true, EmitDefaultValue = true)]
        public int MembershipId { get; set; }

        /// <summary>
        /// Membership plan name.
        /// </summary>
        /// <value>Membership plan name.</value>
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Membership plan description.
        /// </summary>
        /// <value>Membership plan description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// List of membership plan perks.
        /// </summary>
        /// <value>List of membership plan perks.</value>
        [DataMember(Name = "benefits", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Benefits { get; set; }

        /// <summary>
        /// Monthly fee for membership plan. (e.g. 1500.00)
        /// </summary>
        /// <value>Monthly fee for membership plan. (e.g. 1500.00)</value>
        /// <example>500.0</example>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public double Price { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubscribedMembershipPlan {\n");
            sb.Append("  MembershipId: ").Append(MembershipId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Benefits: ").Append(Benefits).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubscribedMembershipPlan);
        }

        /// <summary>
        /// Returns true if SubscribedMembershipPlan instances are equal
        /// </summary>
        /// <param name="input">Instance of SubscribedMembershipPlan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubscribedMembershipPlan input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MembershipId == input.MembershipId ||
                    this.MembershipId.Equals(input.MembershipId)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Benefits == input.Benefits ||
                    this.Benefits != null &&
                    input.Benefits != null &&
                    this.Benefits.SequenceEqual(input.Benefits)
                ) && 
                (
                    this.Price == input.Price ||
                    this.Price.Equals(input.Price)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MembershipId.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Benefits != null)
                {
                    hashCode = (hashCode * 59) + this.Benefits.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Price.GetHashCode();
                hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
