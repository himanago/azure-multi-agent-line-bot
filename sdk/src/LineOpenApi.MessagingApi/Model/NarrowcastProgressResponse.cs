/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// NarrowcastProgressResponse
    /// </summary>
    [DataContract(Name = "NarrowcastProgressResponse")]
    public partial class NarrowcastProgressResponse : IEquatable<NarrowcastProgressResponse>, IValidatableObject
    {
        /// <summary>
        /// The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. 
        /// </summary>
        /// <value>The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PhaseEnum
        {
            /// <summary>
            /// Enum Waiting for value: waiting
            /// </summary>
            [EnumMember(Value = "waiting")]
            Waiting = 1,

            /// <summary>
            /// Enum Sending for value: sending
            /// </summary>
            [EnumMember(Value = "sending")]
            Sending = 2,

            /// <summary>
            /// Enum Succeeded for value: succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            Succeeded = 3,

            /// <summary>
            /// Enum Failed for value: failed
            /// </summary>
            [EnumMember(Value = "failed")]
            Failed = 4
        }


        /// <summary>
        /// The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. 
        /// </summary>
        /// <value>The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure. </value>
        [DataMember(Name = "phase", IsRequired = true, EmitDefaultValue = true)]
        public PhaseEnum Phase { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="NarrowcastProgressResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NarrowcastProgressResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NarrowcastProgressResponse" /> class.
        /// </summary>
        /// <param name="phase">The current status. One of:  &#x60;waiting&#x60;: Messages are not yet ready to be sent. They are currently being filtered or processed in some way. &#x60;sending&#x60;: Messages are currently being sent. &#x60;succeeded&#x60;: Messages were sent successfully. This may not mean the messages were successfully received. &#x60;failed&#x60;: Messages failed to be sent. Use the failedDescription property to find the cause of the failure.  (required).</param>
        /// <param name="successCount">The number of users who successfully received the message..</param>
        /// <param name="failureCount">The number of users who failed to send the message..</param>
        /// <param name="targetCount">The number of intended recipients of the message..</param>
        /// <param name="failedDescription">The reason the message failed to be sent. This is only included with a &#x60;phase&#x60; property value of &#x60;failed&#x60;..</param>
        /// <param name="errorCode">Error summary. This is only included with a phase property value of failed. One of:  &#x60;1&#x60;: An internal error occurred. &#x60;2&#x60;: An error occurred because there weren&#39;t enough recipients. &#x60;3&#x60;: A conflict error of requests occurs because a request that has already been accepted is retried. &#x60;4&#x60;: An audience of less than 50 recipients is included as a condition of sending. .</param>
        /// <param name="acceptedTime">Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC  (required).</param>
        /// <param name="completedTime">Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC .</param>
        public NarrowcastProgressResponse(PhaseEnum phase = default(PhaseEnum), long successCount = default(long), long failureCount = default(long), long targetCount = default(long), string failedDescription = default(string), long errorCode = default(long), DateTime acceptedTime = default(DateTime), DateTime completedTime = default(DateTime))
        {
            this.Phase = phase;
            this.AcceptedTime = acceptedTime;
            this.SuccessCount = successCount;
            this.FailureCount = failureCount;
            this.TargetCount = targetCount;
            this.FailedDescription = failedDescription;
            this.ErrorCode = errorCode;
            this.CompletedTime = completedTime;
        }

        /// <summary>
        /// The number of users who successfully received the message.
        /// </summary>
        /// <value>The number of users who successfully received the message.</value>
        [DataMember(Name = "successCount", EmitDefaultValue = false)]
        public long SuccessCount { get; set; }

        /// <summary>
        /// The number of users who failed to send the message.
        /// </summary>
        /// <value>The number of users who failed to send the message.</value>
        [DataMember(Name = "failureCount", EmitDefaultValue = false)]
        public long FailureCount { get; set; }

        /// <summary>
        /// The number of intended recipients of the message.
        /// </summary>
        /// <value>The number of intended recipients of the message.</value>
        [DataMember(Name = "targetCount", EmitDefaultValue = false)]
        public long TargetCount { get; set; }

        /// <summary>
        /// The reason the message failed to be sent. This is only included with a &#x60;phase&#x60; property value of &#x60;failed&#x60;.
        /// </summary>
        /// <value>The reason the message failed to be sent. This is only included with a &#x60;phase&#x60; property value of &#x60;failed&#x60;.</value>
        [DataMember(Name = "failedDescription", EmitDefaultValue = false)]
        public string FailedDescription { get; set; }

        /// <summary>
        /// Error summary. This is only included with a phase property value of failed. One of:  &#x60;1&#x60;: An internal error occurred. &#x60;2&#x60;: An error occurred because there weren&#39;t enough recipients. &#x60;3&#x60;: A conflict error of requests occurs because a request that has already been accepted is retried. &#x60;4&#x60;: An audience of less than 50 recipients is included as a condition of sending. 
        /// </summary>
        /// <value>Error summary. This is only included with a phase property value of failed. One of:  &#x60;1&#x60;: An internal error occurred. &#x60;2&#x60;: An error occurred because there weren&#39;t enough recipients. &#x60;3&#x60;: A conflict error of requests occurs because a request that has already been accepted is retried. &#x60;4&#x60;: An audience of less than 50 recipients is included as a condition of sending. </value>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public long ErrorCode { get; set; }

        /// <summary>
        /// Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC 
        /// </summary>
        /// <value>Narrowcast message request accepted time in milliseconds.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC </value>
        [DataMember(Name = "acceptedTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime AcceptedTime { get; set; }

        /// <summary>
        /// Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC 
        /// </summary>
        /// <value>Processing of narrowcast message request completion time in milliseconds. Returned when the phase property is succeeded or failed.  Format: ISO 8601 (e.g. 2020-12-03T10:15:30.121Z) Timezone: UTC </value>
        [DataMember(Name = "completedTime", EmitDefaultValue = false)]
        public DateTime CompletedTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NarrowcastProgressResponse {\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  FailureCount: ").Append(FailureCount).Append("\n");
            sb.Append("  TargetCount: ").Append(TargetCount).Append("\n");
            sb.Append("  FailedDescription: ").Append(FailedDescription).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  AcceptedTime: ").Append(AcceptedTime).Append("\n");
            sb.Append("  CompletedTime: ").Append(CompletedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NarrowcastProgressResponse);
        }

        /// <summary>
        /// Returns true if NarrowcastProgressResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of NarrowcastProgressResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NarrowcastProgressResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Phase == input.Phase ||
                    this.Phase.Equals(input.Phase)
                ) && 
                (
                    this.SuccessCount == input.SuccessCount ||
                    this.SuccessCount.Equals(input.SuccessCount)
                ) && 
                (
                    this.FailureCount == input.FailureCount ||
                    this.FailureCount.Equals(input.FailureCount)
                ) && 
                (
                    this.TargetCount == input.TargetCount ||
                    this.TargetCount.Equals(input.TargetCount)
                ) && 
                (
                    this.FailedDescription == input.FailedDescription ||
                    (this.FailedDescription != null &&
                    this.FailedDescription.Equals(input.FailedDescription))
                ) && 
                (
                    this.ErrorCode == input.ErrorCode ||
                    this.ErrorCode.Equals(input.ErrorCode)
                ) && 
                (
                    this.AcceptedTime == input.AcceptedTime ||
                    (this.AcceptedTime != null &&
                    this.AcceptedTime.Equals(input.AcceptedTime))
                ) && 
                (
                    this.CompletedTime == input.CompletedTime ||
                    (this.CompletedTime != null &&
                    this.CompletedTime.Equals(input.CompletedTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Phase.GetHashCode();
                hashCode = (hashCode * 59) + this.SuccessCount.GetHashCode();
                hashCode = (hashCode * 59) + this.FailureCount.GetHashCode();
                hashCode = (hashCode * 59) + this.TargetCount.GetHashCode();
                if (this.FailedDescription != null)
                {
                    hashCode = (hashCode * 59) + this.FailedDescription.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ErrorCode.GetHashCode();
                if (this.AcceptedTime != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptedTime.GetHashCode();
                }
                if (this.CompletedTime != null)
                {
                    hashCode = (hashCode * 59) + this.CompletedTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
