/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// RichMenuResponse
    /// </summary>
    [DataContract(Name = "RichMenuResponse")]
    public partial class RichMenuResponse : IEquatable<RichMenuResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RichMenuResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuResponse" /> class.
        /// </summary>
        /// <param name="richMenuId">ID of a rich menu (required).</param>
        /// <param name="size">size (required).</param>
        /// <param name="selected">&#x60;true&#x60; to display the rich menu by default. Otherwise, &#x60;false&#x60;. (required).</param>
        /// <param name="name">Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users. (required).</param>
        /// <param name="chatBarText">Text displayed in the chat bar (required).</param>
        /// <param name="areas">Array of area objects which define the coordinates and size of tappable areas (required).</param>
        public RichMenuResponse(string richMenuId = default(string), RichMenuSize size = default(RichMenuSize), bool selected = default(bool), string name = default(string), string chatBarText = default(string), List<RichMenuArea> areas = default(List<RichMenuArea>))
        {
            // to ensure "richMenuId" is required (not null)
            if (richMenuId == null)
            {
                throw new ArgumentNullException("richMenuId is a required property for RichMenuResponse and cannot be null");
            }
            this.RichMenuId = richMenuId;
            // to ensure "size" is required (not null)
            if (size == null)
            {
                throw new ArgumentNullException("size is a required property for RichMenuResponse and cannot be null");
            }
            this.Size = size;
            this.Selected = selected;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RichMenuResponse and cannot be null");
            }
            this.Name = name;
            // to ensure "chatBarText" is required (not null)
            if (chatBarText == null)
            {
                throw new ArgumentNullException("chatBarText is a required property for RichMenuResponse and cannot be null");
            }
            this.ChatBarText = chatBarText;
            // to ensure "areas" is required (not null)
            if (areas == null)
            {
                throw new ArgumentNullException("areas is a required property for RichMenuResponse and cannot be null");
            }
            this.Areas = areas;
        }

        /// <summary>
        /// ID of a rich menu
        /// </summary>
        /// <value>ID of a rich menu</value>
        [DataMember(Name = "richMenuId", IsRequired = true, EmitDefaultValue = true)]
        public string RichMenuId { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", IsRequired = true, EmitDefaultValue = true)]
        public RichMenuSize Size { get; set; }

        /// <summary>
        /// &#x60;true&#x60; to display the rich menu by default. Otherwise, &#x60;false&#x60;.
        /// </summary>
        /// <value>&#x60;true&#x60; to display the rich menu by default. Otherwise, &#x60;false&#x60;.</value>
        [DataMember(Name = "selected", IsRequired = true, EmitDefaultValue = true)]
        public bool Selected { get; set; }

        /// <summary>
        /// Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.
        /// </summary>
        /// <value>Name of the rich menu. This value can be used to help manage your rich menus and is not displayed to users.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Text displayed in the chat bar
        /// </summary>
        /// <value>Text displayed in the chat bar</value>
        [DataMember(Name = "chatBarText", IsRequired = true, EmitDefaultValue = true)]
        public string ChatBarText { get; set; }

        /// <summary>
        /// Array of area objects which define the coordinates and size of tappable areas
        /// </summary>
        /// <value>Array of area objects which define the coordinates and size of tappable areas</value>
        [DataMember(Name = "areas", IsRequired = true, EmitDefaultValue = true)]
        public List<RichMenuArea> Areas { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuResponse {\n");
            sb.Append("  RichMenuId: ").Append(RichMenuId).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Selected: ").Append(Selected).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ChatBarText: ").Append(ChatBarText).Append("\n");
            sb.Append("  Areas: ").Append(Areas).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuResponse);
        }

        /// <summary>
        /// Returns true if RichMenuResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RichMenuId == input.RichMenuId ||
                    (this.RichMenuId != null &&
                    this.RichMenuId.Equals(input.RichMenuId))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Selected == input.Selected ||
                    this.Selected.Equals(input.Selected)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ChatBarText == input.ChatBarText ||
                    (this.ChatBarText != null &&
                    this.ChatBarText.Equals(input.ChatBarText))
                ) && 
                (
                    this.Areas == input.Areas ||
                    this.Areas != null &&
                    input.Areas != null &&
                    this.Areas.SequenceEqual(input.Areas)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RichMenuId != null)
                {
                    hashCode = (hashCode * 59) + this.RichMenuId.GetHashCode();
                }
                if (this.Size != null)
                {
                    hashCode = (hashCode * 59) + this.Size.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Selected.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.ChatBarText != null)
                {
                    hashCode = (hashCode * 59) + this.ChatBarText.GetHashCode();
                }
                if (this.Areas != null)
                {
                    hashCode = (hashCode * 59) + this.Areas.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 300)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 300.", new [] { "Name" });
            }

            // ChatBarText (string) maxLength
            if (this.ChatBarText != null && this.ChatBarText.Length > 14)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ChatBarText, length must be less than 14.", new [] { "ChatBarText" });
            }

            yield break;
        }
    }

}
