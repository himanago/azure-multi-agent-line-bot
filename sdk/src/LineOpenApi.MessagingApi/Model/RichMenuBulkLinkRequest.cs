/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// RichMenuBulkLinkRequest
    /// </summary>
    [DataContract(Name = "RichMenuBulkLinkRequest")]
    public partial class RichMenuBulkLinkRequest : IEquatable<RichMenuBulkLinkRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBulkLinkRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RichMenuBulkLinkRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RichMenuBulkLinkRequest" /> class.
        /// </summary>
        /// <param name="richMenuId">ID of a rich menu (required).</param>
        /// <param name="userIds">Array of user IDs. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE. (required).</param>
        public RichMenuBulkLinkRequest(string richMenuId = default(string), List<string> userIds = default(List<string>))
        {
            // to ensure "richMenuId" is required (not null)
            if (richMenuId == null)
            {
                throw new ArgumentNullException("richMenuId is a required property for RichMenuBulkLinkRequest and cannot be null");
            }
            this.RichMenuId = richMenuId;
            // to ensure "userIds" is required (not null)
            if (userIds == null)
            {
                throw new ArgumentNullException("userIds is a required property for RichMenuBulkLinkRequest and cannot be null");
            }
            this.UserIds = userIds;
        }

        /// <summary>
        /// ID of a rich menu
        /// </summary>
        /// <value>ID of a rich menu</value>
        [DataMember(Name = "richMenuId", IsRequired = true, EmitDefaultValue = true)]
        public string RichMenuId { get; set; }

        /// <summary>
        /// Array of user IDs. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.
        /// </summary>
        /// <value>Array of user IDs. Found in the &#x60;source&#x60; object of webhook event objects. Do not use the LINE ID used in LINE.</value>
        [DataMember(Name = "userIds", IsRequired = true, EmitDefaultValue = true)]
        public List<string> UserIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RichMenuBulkLinkRequest {\n");
            sb.Append("  RichMenuId: ").Append(RichMenuId).Append("\n");
            sb.Append("  UserIds: ").Append(UserIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RichMenuBulkLinkRequest);
        }

        /// <summary>
        /// Returns true if RichMenuBulkLinkRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RichMenuBulkLinkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RichMenuBulkLinkRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RichMenuId == input.RichMenuId ||
                    (this.RichMenuId != null &&
                    this.RichMenuId.Equals(input.RichMenuId))
                ) && 
                (
                    this.UserIds == input.UserIds ||
                    this.UserIds != null &&
                    input.UserIds != null &&
                    this.UserIds.SequenceEqual(input.UserIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RichMenuId != null)
                {
                    hashCode = (hashCode * 59) + this.RichMenuId.GetHashCode();
                }
                if (this.UserIds != null)
                {
                    hashCode = (hashCode * 59) + this.UserIds.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
