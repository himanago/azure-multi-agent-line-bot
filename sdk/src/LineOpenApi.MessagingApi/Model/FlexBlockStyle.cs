/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexBlockStyle
    /// </summary>
    [DataContract(Name = "FlexBlockStyle")]
    public partial class FlexBlockStyle : IEquatable<FlexBlockStyle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBlockStyle" /> class.
        /// </summary>
        /// <param name="backgroundColor">backgroundColor.</param>
        /// <param name="separator">separator.</param>
        /// <param name="separatorColor">separatorColor.</param>
        public FlexBlockStyle(string backgroundColor = default(string), bool separator = default(bool), string separatorColor = default(string))
        {
            this.BackgroundColor = backgroundColor;
            this.Separator = separator;
            this.SeparatorColor = separatorColor;
        }

        /// <summary>
        /// Gets or Sets BackgroundColor
        /// </summary>
        [DataMember(Name = "backgroundColor", EmitDefaultValue = false)]
        public string BackgroundColor { get; set; }

        /// <summary>
        /// Gets or Sets Separator
        /// </summary>
        [DataMember(Name = "separator", EmitDefaultValue = true)]
        public bool Separator { get; set; }

        /// <summary>
        /// Gets or Sets SeparatorColor
        /// </summary>
        [DataMember(Name = "separatorColor", EmitDefaultValue = false)]
        public string SeparatorColor { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexBlockStyle {\n");
            sb.Append("  BackgroundColor: ").Append(BackgroundColor).Append("\n");
            sb.Append("  Separator: ").Append(Separator).Append("\n");
            sb.Append("  SeparatorColor: ").Append(SeparatorColor).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexBlockStyle);
        }

        /// <summary>
        /// Returns true if FlexBlockStyle instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexBlockStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBlockStyle input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BackgroundColor == input.BackgroundColor ||
                    (this.BackgroundColor != null &&
                    this.BackgroundColor.Equals(input.BackgroundColor))
                ) && 
                (
                    this.Separator == input.Separator ||
                    this.Separator.Equals(input.Separator)
                ) && 
                (
                    this.SeparatorColor == input.SeparatorColor ||
                    (this.SeparatorColor != null &&
                    this.SeparatorColor.Equals(input.SeparatorColor))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BackgroundColor != null)
                {
                    hashCode = (hashCode * 59) + this.BackgroundColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Separator.GetHashCode();
                if (this.SeparatorColor != null)
                {
                    hashCode = (hashCode * 59) + this.SeparatorColor.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
