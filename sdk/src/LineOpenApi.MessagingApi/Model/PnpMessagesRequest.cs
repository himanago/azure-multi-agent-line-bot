/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// PnpMessagesRequest
    /// </summary>
    [DataContract(Name = "PnpMessagesRequest")]
    public partial class PnpMessagesRequest : IEquatable<PnpMessagesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PnpMessagesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PnpMessagesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PnpMessagesRequest" /> class.
        /// </summary>
        /// <param name="messages">Message to be sent. (required).</param>
        /// <param name="to">Message destination. Specify a phone number that has been normalized to E.164 format and hashed with SHA256. (required).</param>
        /// <param name="notificationDisabled">&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false.  (default to false).</param>
        public PnpMessagesRequest(List<Message> messages = default(List<Message>), string to = default(string), bool notificationDisabled = false)
        {
            // to ensure "messages" is required (not null)
            if (messages == null)
            {
                throw new ArgumentNullException("messages is a required property for PnpMessagesRequest and cannot be null");
            }
            this.Messages = messages;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for PnpMessagesRequest and cannot be null");
            }
            this.To = to;
            this.NotificationDisabled = notificationDisabled;
        }

        /// <summary>
        /// Message to be sent.
        /// </summary>
        /// <value>Message to be sent.</value>
        [DataMember(Name = "messages", IsRequired = true, EmitDefaultValue = true)]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Message destination. Specify a phone number that has been normalized to E.164 format and hashed with SHA256.
        /// </summary>
        /// <value>Message destination. Specify a phone number that has been normalized to E.164 format and hashed with SHA256.</value>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public string To { get; set; }

        /// <summary>
        /// &#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. 
        /// </summary>
        /// <value>&#x60;true&#x60;: The user doesn’t receive a push notification when a message is sent. &#x60;false&#x60;: The user receives a push notification when the message is sent (unless they have disabled push notifications in LINE and/or their device). The default value is false. </value>
        [DataMember(Name = "notificationDisabled", EmitDefaultValue = true)]
        public bool NotificationDisabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PnpMessagesRequest {\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  NotificationDisabled: ").Append(NotificationDisabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PnpMessagesRequest);
        }

        /// <summary>
        /// Returns true if PnpMessagesRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of PnpMessagesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PnpMessagesRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Messages == input.Messages ||
                    this.Messages != null &&
                    input.Messages != null &&
                    this.Messages.SequenceEqual(input.Messages)
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.NotificationDisabled == input.NotificationDisabled ||
                    this.NotificationDisabled.Equals(input.NotificationDisabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Messages != null)
                {
                    hashCode = (hashCode * 59) + this.Messages.GetHashCode();
                }
                if (this.To != null)
                {
                    hashCode = (hashCode * 59) + this.To.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NotificationDisabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
