/*
 * LINE Messaging API
 *
 * This document describes LINE Messaging API.
 *
 * The version of the OpenAPI document: 0.0.1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using FileParameter = LineOpenApi.MessagingApi.Client.FileParameter;
using OpenAPIDateConverter = LineOpenApi.MessagingApi.Client.OpenAPIDateConverter;

namespace LineOpenApi.MessagingApi.Model
{
    /// <summary>
    /// FlexBubble
    /// </summary>
    [DataContract(Name = "FlexBubble")]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    public partial class FlexBubble : FlexContainer, IEquatable<FlexBubble>, IValidatableObject
    {
        /// <summary>
        /// Defines Direction
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DirectionEnum
        {
            /// <summary>
            /// Enum Ltr for value: ltr
            /// </summary>
            [EnumMember(Value = "ltr")]
            Ltr = 1,

            /// <summary>
            /// Enum Rtl for value: rtl
            /// </summary>
            [EnumMember(Value = "rtl")]
            Rtl = 2
        }


        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name = "direction", EmitDefaultValue = false)]
        public DirectionEnum? Direction { get; set; }
        /// <summary>
        /// Defines Size
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SizeEnum
        {
            /// <summary>
            /// Enum Nano for value: nano
            /// </summary>
            [EnumMember(Value = "nano")]
            Nano = 1,

            /// <summary>
            /// Enum Micro for value: micro
            /// </summary>
            [EnumMember(Value = "micro")]
            Micro = 2,

            /// <summary>
            /// Enum Deca for value: deca
            /// </summary>
            [EnumMember(Value = "deca")]
            Deca = 3,

            /// <summary>
            /// Enum Hecto for value: hecto
            /// </summary>
            [EnumMember(Value = "hecto")]
            Hecto = 4,

            /// <summary>
            /// Enum Kilo for value: kilo
            /// </summary>
            [EnumMember(Value = "kilo")]
            Kilo = 5,

            /// <summary>
            /// Enum Mega for value: mega
            /// </summary>
            [EnumMember(Value = "mega")]
            Mega = 6,

            /// <summary>
            /// Enum Giga for value: giga
            /// </summary>
            [EnumMember(Value = "giga")]
            Giga = 7
        }


        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public SizeEnum? Size { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBubble" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FlexBubble() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FlexBubble" /> class.
        /// </summary>
        /// <param name="direction">direction.</param>
        /// <param name="styles">styles.</param>
        /// <param name="header">header.</param>
        /// <param name="hero">hero.</param>
        /// <param name="body">body.</param>
        /// <param name="footer">footer.</param>
        /// <param name="size">size.</param>
        /// <param name="action">action.</param>
        /// <param name="type">type (required) (default to &quot;FlexBubble&quot;).</param>
        public FlexBubble(DirectionEnum? direction = default(DirectionEnum?), FlexBubbleStyles styles = default(FlexBubbleStyles), FlexBox header = default(FlexBox), FlexComponent hero = default(FlexComponent), FlexBox body = default(FlexBox), FlexBox footer = default(FlexBox), SizeEnum? size = default(SizeEnum?), Action action = default(Action), string type = @"FlexBubble") : base(type)
        {
            this.Direction = direction;
            this.Styles = styles;
            this.Header = header;
            this.Hero = hero;
            this.Body = body;
            this.Footer = footer;
            this.Size = size;
            this.Action = action;
        }

        /// <summary>
        /// Gets or Sets Styles
        /// </summary>
        [DataMember(Name = "styles", EmitDefaultValue = false)]
        public FlexBubbleStyles Styles { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name = "header", EmitDefaultValue = false)]
        public FlexBox Header { get; set; }

        /// <summary>
        /// Gets or Sets Hero
        /// </summary>
        [DataMember(Name = "hero", EmitDefaultValue = false)]
        public FlexComponent Hero { get; set; }

        /// <summary>
        /// Gets or Sets Body
        /// </summary>
        [DataMember(Name = "body", EmitDefaultValue = false)]
        public FlexBox Body { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name = "footer", EmitDefaultValue = false)]
        public FlexBox Footer { get; set; }

        /// <summary>
        /// Gets or Sets Action
        /// </summary>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public Action Action { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FlexBubble {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Styles: ").Append(Styles).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Hero: ").Append(Hero).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FlexBubble);
        }

        /// <summary>
        /// Returns true if FlexBubble instances are equal
        /// </summary>
        /// <param name="input">Instance of FlexBubble to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlexBubble input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Direction == input.Direction ||
                    this.Direction.Equals(input.Direction)
                ) && base.Equals(input) && 
                (
                    this.Styles == input.Styles ||
                    (this.Styles != null &&
                    this.Styles.Equals(input.Styles))
                ) && base.Equals(input) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && base.Equals(input) && 
                (
                    this.Hero == input.Hero ||
                    (this.Hero != null &&
                    this.Hero.Equals(input.Hero))
                ) && base.Equals(input) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && base.Equals(input) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && base.Equals(input) && 
                (
                    this.Size == input.Size ||
                    this.Size.Equals(input.Size)
                ) && base.Equals(input) && 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Direction.GetHashCode();
                if (this.Styles != null)
                {
                    hashCode = (hashCode * 59) + this.Styles.GetHashCode();
                }
                if (this.Header != null)
                {
                    hashCode = (hashCode * 59) + this.Header.GetHashCode();
                }
                if (this.Hero != null)
                {
                    hashCode = (hashCode * 59) + this.Hero.GetHashCode();
                }
                if (this.Body != null)
                {
                    hashCode = (hashCode * 59) + this.Body.GetHashCode();
                }
                if (this.Footer != null)
                {
                    hashCode = (hashCode * 59) + this.Footer.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Size.GetHashCode();
                if (this.Action != null)
                {
                    hashCode = (hashCode * 59) + this.Action.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }

}
